<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Straw</title>
  
  <subtitle>Straw_blog</subtitle>
  <link href="https://straw-233.github.io/atom.xml" rel="self"/>
  
  <link href="https://straw-233.github.io/"/>
  <updated>2024-05-27T13:43:29.284Z</updated>
  <id>https://straw-233.github.io/</id>
  
  <author>
    <name>Straw</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>分组加密及模式</title>
    <link href="https://straw-233.github.io/2024/05/27/%E5%88%86%E7%BB%84%E5%8A%A0%E5%AF%86%E6%A8%A1%E5%BC%8F/"/>
    <id>https://straw-233.github.io/2024/05/27/%E5%88%86%E7%BB%84%E5%8A%A0%E5%AF%86%E6%A8%A1%E5%BC%8F/</id>
    <published>2024-05-27T13:38:45.253Z</published>
    <updated>2024-05-27T13:43:29.284Z</updated>
    
    <content type="html"><![CDATA[<h1 id="分组加密及模式"><a href="#分组加密及模式" class="headerlink" title="分组加密及模式"></a>分组加密及模式</h1><p>最近感觉做了很多分组加密的题，每次解密的模式都是赛博厨子一个一个试过来的，逻辑啥的也有点不理解，在比赛里最头疼的就是这种比较难的加密了，主要不知道为什么错，想一步一步分析步骤，又很难看，最终还是得归总一下。</p><p><img src="/../img/%E9%BE%9F%E9%BE%9F.gif" alt="龟龟"></p><h2 id="常见分组加密"><a href="#常见分组加密" class="headerlink" title="常见分组加密"></a>常见分组加密</h2><p>AES,DES,blowfish,sm4……(比赛里现在只遇到这些，以后遇到了会继续补充)</p><h2 id="KEY"><a href="#KEY" class="headerlink" title="KEY"></a>KEY</h2><p>密钥是加密中最关键的一个东西，也是解密中不可获取的东西，以下为各种分组加密的表：</p><table><thead><tr><th>加密方式</th><th>AES</th><th>DES</th><th>Blowfish</th><th>SM4</th></tr></thead><tbody><tr><td>密钥长度(位&#x3D;8bits)</td><td>16&#x2F;24&#x2F;32</td><td>8</td><td>4—56</td><td>16</td></tr><tr><td>重复次数</td><td>10&#x2F;12&#x2F;14</td><td>16</td><td>16</td><td>32</td></tr><tr><td>分组长度(位)</td><td>16</td><td>8</td><td>8</td><td>16</td></tr></tbody></table><p>牢记这些能有效帮助我们判断或者是确认加密类型。</p><h2 id="IV"><a href="#IV" class="headerlink" title="IV"></a>IV</h2><p>IV（Initialization Vector）是许多任务作模式中用于将加密随机化的一个位块，由此即使同样的明文被多次加密也会产生不同的密文，避免了较慢的重新产生密钥的过程。是区别ECB模式和CBC模式的关键。<strong>IV的长度一般和分组长度相同。</strong></p><h2 id="ECB模式"><a href="#ECB模式" class="headerlink" title="ECB模式"></a>ECB模式</h2><p>最简单的加密模式即为电子密码本（Electronic codebook，ECB）模式。需要加密的消息按照块密码的块大小被分为数个块，并对每个块进行独立加密。</p><p>在这种工作模式下，一个明文组只能固定地被加密成一个对应的密文组，一个密文组也只能固定地被解密成对应的密文组。他们彼此是一一对应的。设想我们有一个厚厚的密码本，每次加密时，我们只需要从密码本中查出明文所对应的密文就可以。这也是电码本模式名称的由来。对于短消息，ECB模式是比较适用的。但对于长消息，ECB模式就不太安全了。</p><p><img src="/../img/%E5%88%86%E7%BB%84%E5%8A%A0%E5%AF%86%E5%8F%8A%E6%A8%A1%E5%BC%8F/ecb%E6%A8%A1%E5%BC%8F.png" alt="ecb模式"></p><p>最简单的EBC模式，解密只需找密文密钥。</p><h2 id="CBC模式"><a href="#CBC模式" class="headerlink" title="CBC模式"></a>CBC模式</h2><p>密码分组链接（CBC，Cipher-block chaining）模式。在CBC模式中，每个明文块先与前一个密文块进行异或后，再进行加密。在这种方法中，每个密文块都依赖于它前面的所有明文块。同时，为了保证每条消息的唯一性，在第一个块中需要使用初始化向量iv。</p><p><img src="/../img/%E5%88%86%E7%BB%84%E5%8A%A0%E5%AF%86%E5%8F%8A%E6%A8%A1%E5%BC%8F/cbc%E5%8A%A0%E8%A7%A3%E5%AF%86.png" alt="cbc加解密"></p><p>其实是EBC模式的异或升级版，开局的异或交给了初始化向量，所以一般iv的长度跟分组长度相同。</p><p><strong>加密是先异或再加密，解密是先异或再解密。</strong></p><p>解密的话需要知道密文密钥还有iv。</p><h2 id="Padding"><a href="#Padding" class="headerlink" title="Padding"></a>Padding</h2><p>有的模式，经典的AES-CBC，AES-ECB（经常被填充搞红温过），支持对非128比特整的数据进行加密，有的模式不支持。填充是用各种可以恢复的方法把数据流填充为128bits&#x3D;16位。</p><h2 id="CFB模式"><a href="#CFB模式" class="headerlink" title="CFB模式"></a>CFB模式</h2><p>密文反馈(CFB,Cipher feedback)模式类似于CBC,可以将块密码变为自同步的流密码，这个模式可以对非128比特的数据进行加密。</p><p>在CFB模式中，加密的基本过程如下：</p><ul><li>初始向量（IV）被加密，生成一个伪随机的分组输出。</li><li>这个输出与明文的一部分（可以是一个比特，也可以是多个比特）进行异或运算，生成密文。</li><li>生成的密文部分作为下一个分组的输入新IV，继续进行加密。</li></ul><p><img src="/../img/%E5%88%86%E7%BB%84%E5%8A%A0%E5%AF%86%E5%8F%8A%E6%A8%A1%E5%BC%8F/cfb%E5%8A%A0%E8%A7%A3%E5%AF%86.png" alt="cfb加解密"></p><p>CFB模式的结构和一次性密码本非常相似。一次性密码本是通过“明文”与“随机比特序列”进行XOR运算来生成“密文”的。而CFB模式则是通过将“明文分组”与“密码算法的输出”进行XOR运算来生成“密文分组”的。在通过 XOR来进行加密这一点上，两者是非常相似的。</p><p><strong>CFB模式中由密码算法所生成的比特序列称为密钥流。在CFB模式中，密码算法相对于用来生成密钥流的伪随机数生成器，而初始化向量相当于伪随机数生成器的“种子”。</strong></p><p>在CFB模式中，明文数据可以被逐比特加密，因此可以将CFB模式看作是一种使用分组密码来实现流密码的方式。</p><h2 id="OFB模式"><a href="#OFB模式" class="headerlink" title="OFB模式"></a>OFB模式</h2><p>OFB模式是先用块加密器生成密钥流，然后将密钥流和明文流异或得到密文流，解密过程是重新异或一次。</p><p><strong>可以一次计算出所有的密钥流，每次加解密只需要做异或操作。</strong></p><p>这个就相对简单。</p><p><img src="/../img/%E5%88%86%E7%BB%84%E5%8A%A0%E5%AF%86%E5%8F%8A%E6%A8%A1%E5%BC%8F/ofb%E5%8A%A0%E8%A7%A3%E5%AF%86.png" alt="ofb加解密"></p><h2 id="CTR模式"><a href="#CTR模式" class="headerlink" title="CTR模式"></a>CTR模式</h2><p>CTR模式是使用随机数等方式产生一个IV，经过计数器累加+1后拼接成一个串，对这个串进行加密，然后和明文做异或操作。</p><p><img src="/../img/%E5%88%86%E7%BB%84%E5%8A%A0%E5%AF%86%E5%8F%8A%E6%A8%A1%E5%BC%8F/ctr%E5%8A%A0%E8%A7%A3%E5%AF%86.png" alt="ctr加解密"></p><p><strong>一般这个随机数产生的iv会放在加密后密文的最前面16位单独成一个组，或者是告诉你随机数的值，不然解密的话根本无法解密。</strong></p><h2 id="GCM模式"><a href="#GCM模式" class="headerlink" title="GCM模式"></a>GCM模式</h2><p>GCM是<a href="https://link.juejin.cn/?target=https://zh.wikipedia.org/zh-cn/%E8%AE%A4%E8%AF%81%E5%8A%A0%E5%AF%86">认证加密</a>模式中的一种，一般只在AES中见到，它结合了两者的特点(GCM中的G就是指GMAC，C就是指CTR)，能同时确保数据的保密性、完整性及真实性，另外，它还可以提供附加消息的完整性校验，加密流程如下图:</p><p><img src="/../img/%E5%88%86%E7%BB%84%E5%8A%A0%E5%AF%86%E5%8F%8A%E6%A8%A1%E5%BC%8F/GCM%E5%8A%A0%E5%AF%86.png" alt="GCM加密"></p><p>GCM可以提供对消息的加密和完整性校验，另外，它还可以提供附加消息的完整性校验。在实际应用场景中，有些信息是我们不需要保密，但信息的接收者需要确认它的真实性的，例如源IP，源端口，目的IP，IV，等等。因此，我们可以将这一部分作为附加消息加入到MAC值的计算当中。下图的Ek表示用对称秘钥k对输入做AES运算。最后，密文接收者会收到密文、IV（计数器CTR的初始值）、MAC值。</p><p>主要参考：</p><p><a href="https://a-little-cat.github.io/2017/12/14/SM4.html">https://a-little-cat.github.io/2017/12/14/SM4.html</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;分组加密及模式&quot;&gt;&lt;a href=&quot;#分组加密及模式&quot; class=&quot;headerlink&quot; title=&quot;分组加密及模式&quot;&gt;&lt;/a&gt;分组加密及模式&lt;/h1&gt;&lt;p&gt;最近感觉做了很多分组加密的题，每次解密的模式都是赛博厨子一个一个试过来的，逻辑啥的也有点不理解，在比</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>2024CISCN初赛 Reverse复现</title>
    <link href="https://straw-233.github.io/2024/05/27/2024%E5%9B%BD%E8%B5%9B%E5%88%9D%E8%B5%9B/"/>
    <id>https://straw-233.github.io/2024/05/27/2024%E5%9B%BD%E8%B5%9B%E5%88%9D%E8%B5%9B/</id>
    <published>2024-05-27T05:11:52.350Z</published>
    <updated>2024-05-27T05:18:32.895Z</updated>
    
    <content type="html"><![CDATA[<h1 id="2024CISCN初赛-Reverse"><a href="#2024CISCN初赛-Reverse" class="headerlink" title="2024CISCN初赛 Reverse"></a>2024CISCN初赛 Reverse</h1><p>最近太忙了，终于等pycc搞完，有点时间，进行赛后复现一下</p><p><img src="/../img/2024CISCN%E5%88%9D%E8%B5%9B/image-20240526160836214.png" alt="image-20240526160836214"></p><p>可惜了差道Goreverse，还需再练练，除了安卓其他题都出的挺好的</p><h2 id="asm-re"><a href="#asm-re" class="headerlink" title="asm_re"></a>asm_re</h2><p>汇编看得太慢了，不太熟练，直接取巧提取一下放ida里解析了</p><p><img src="/../img/2024CISCN%E5%88%9D%E8%B5%9B/image-20240425201336487.png" alt="image-20240425201336487"></p><p>一个简单的*+^操作，当时还奇怪为什么是int类型的密文，现在知道了，第一天的签到</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="type">int</span> pw[<span class="number">38</span>]=&#123;<span class="number">0x00001FD7</span>, <span class="number">0x000021B7</span>, <span class="number">0x00001E47</span>, <span class="number">0x00002027</span>, <span class="number">0x000026E7</span>, <span class="number">0x000010D7</span>, <span class="number">0x00001127</span>, <span class="number">0x00002007</span>, </span><br><span class="line"><span class="number">0x000011C7</span>, <span class="number">0x00001E47</span>, <span class="number">0x00001017</span>, <span class="number">0x00001017</span>, <span class="number">0x000011F7</span>, <span class="number">0x00002007</span>, <span class="number">0x00001037</span>, <span class="number">0x00001107</span>, </span><br><span class="line"><span class="number">0x00001F17</span>, <span class="number">0x000010D7</span>, <span class="number">0x00001017</span>, <span class="number">0x00001017</span>, <span class="number">0x00001F67</span>, <span class="number">0x00001017</span>, <span class="number">0x000011C7</span>, <span class="number">0x000011C7</span>, </span><br><span class="line"><span class="number">0x00001017</span>, <span class="number">0x00001FD7</span>, <span class="number">0x00001F17</span>, <span class="number">0x00001107</span>, <span class="number">0x00000F47</span>, <span class="number">0x00001127</span>, <span class="number">0x00001037</span>, <span class="number">0x00001E47</span>, </span><br><span class="line"><span class="number">0x00001037</span>, <span class="number">0x00001FD7</span>, <span class="number">0x00001107</span>, <span class="number">0x00001FD7</span>, <span class="number">0x00001107</span>, <span class="number">0x00002787</span>&#125;;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> flag[<span class="number">38</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">38</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line">flag[i]=(((pw[i]<span class="number">-30</span>)^<span class="number">0x4D</span>)<span class="number">-20</span>)/<span class="number">80</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>,flag[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//flag&#123;67e9a228e45b622c2992fb5174a4f5f5&#125;</span></span><br></pre></td></tr></table></figure><p>这种跟类型有关的题还是喜欢用c写</p><h2 id="android-so"><a href="#android-so" class="headerlink" title="android_so"></a>android_so</h2><p>哎只允许真机调试，有点出的不好了，对于我这种模拟器玩家很是难做，借了个学长的真机穿。</p><p>java层就一个base+des-CBC，主要iv和key都放在了so层处理。</p><p>key能直接断在返回那边动调出</p><p>iv用个frida hook cypher.init脚本出</p><p><img src="/../img/2024CISCN%E5%88%9D%E8%B5%9B/image-20240526164235188.png" alt="image-20240526164235188"></p><h2 id="rust-baby"><a href="#rust-baby" class="headerlink" title="rust_baby"></a>rust_baby</h2><p>看代码看得最头疼的一题，</p><p><img src="/../img/2024CISCN%E5%88%9D%E8%B5%9B/image-20240526164644891.png" alt="image-20240526164644891"></p><p>先写了个列表，然后慢慢从列表中调用</p><p>动调看加密，先是一个补齐，一直补到104位，这里是第一步加密，取8个字节，一个sub_1400028C3，一个异或</p><p><img src="/../img/2024CISCN%E5%88%9D%E8%B5%9B/image.png" alt="image"></p><p><img src="/../img/2024CISCN%E5%88%9D%E8%B5%9B/image-20240526165504040.png" alt="image-20240526165504040"></p><p>进去看不懂，但是根据输入输出进行大概猜测就知道是-1，0，+1，+2操作</p><p>后面进行16个字节分组，下一步加密是在这里，异或v96的表，这个表每次循环都会换一下，但是直接动调取就行</p><p><img src="/../img/2024CISCN%E5%88%9D%E8%B5%9B/image-20240526170136833.png" alt="image-20240526170136833"></p><p>一直到比较段，都没咋动，下面一大串都没啥用</p><p><a href="../img/2024CISCN%E5%88%9D%E8%B5%9B/image-20240526165822823.png">image-20240526165822823</a></p><p>然后写个脚本出</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">pw = [<span class="number">0x8a</span>,<span class="number">0x07</span>,<span class="number">0x72</span>,<span class="number">0x76</span>,<span class="number">0x8d</span>,<span class="number">0x7d</span>,<span class="number">0x4d</span>,<span class="number">0x51</span>,<span class="number">0x35</span>,<span class="number">0xde</span>,<span class="number">0x88</span>,<span class="number">0x16</span>,<span class="number">0xd4</span>,<span class="number">0x04</span>,<span class="number">0xf9</span>,<span class="number">0x0e</span>,<span class="number">0x08</span>,<span class="number">0xcf</span>,<span class="number">0xcc</span>,<span class="number">0x7c</span>,<span class="number">0x0f</span>,<span class="number">0x0d</span>,<span class="number">0x09</span>,<span class="number">0x5e</span>,<span class="number">0xd5</span>,<span class="number">0x7e</span>,<span class="number">0xe4</span>,<span class="number">0x4b</span>,<span class="number">0xc4</span>,<span class="number">0xf3</span>,<span class="number">0x1c</span>,<span class="number">0xaf</span>,<span class="number">0x12</span>,<span class="number">0xe4</span>,<span class="number">0xa0</span>,<span class="number">0xae</span>,<span class="number">0xf6</span>,<span class="number">0x69</span>,<span class="number">0xc9</span>,<span class="number">0xd2</span>,<span class="number">0xe0</span>,<span class="number">0xa7</span>,<span class="number">0x01</span>,<span class="number">0x0e</span>,<span class="number">0x1a</span>,<span class="number">0x57</span>,<span class="number">0x70</span>,<span class="number">0x92</span>,<span class="number">0x61</span>,<span class="number">0x49</span>,<span class="number">0x7a</span>,<span class="number">0x43</span>,<span class="number">0x27</span>,<span class="number">0x29</span>,<span class="number">0x89</span>,<span class="number">0xb5</span>,<span class="number">0x92</span>,<span class="number">0x2e</span>,<span class="number">0x6a</span>,<span class="number">0xa6</span>,<span class="number">0xdb</span>,<span class="number">0x2f</span>,<span class="number">0xc6</span>,<span class="number">0xa9</span>,<span class="number">0x6e</span>,<span class="number">0x8f</span>,<span class="number">0x34</span>,<span class="number">0x90</span>,<span class="number">0x59</span>,<span class="number">0xfc</span>,<span class="number">0x2d</span>,<span class="number">0x91</span>,<span class="number">0x66</span>,<span class="number">0xeb</span>,<span class="number">0xbe</span>,<span class="number">0x0d</span>,<span class="number">0xf4</span>,<span class="number">0x05</span>,<span class="number">0x0b</span>,<span class="number">0x1b</span>,<span class="number">0xcb</span>,<span class="number">0x18</span>,<span class="number">0x74</span>,<span class="number">0xf9</span>,<span class="number">0x82</span>,<span class="number">0x81</span>,<span class="number">0xbc</span>,<span class="number">0x04</span>,<span class="number">0xd9</span>,<span class="number">0x75</span>,<span class="number">0x8e</span>,<span class="number">0x2d</span>,<span class="number">0x97</span>,<span class="number">0x07</span>,<span class="number">0x7c</span>,<span class="number">0x7d</span>,<span class="number">0x18</span>,<span class="number">0xc8</span>,<span class="number">0x3d</span>,<span class="number">0x4f</span>,<span class="number">0xc0</span>,<span class="number">0xa5</span>,<span class="number">0x6a</span>,<span class="number">0xd7</span>]</span><br><span class="line">key = [<span class="number">0xDC</span>,<span class="number">0x5F</span>,<span class="number">0x20</span>,<span class="number">0x22</span>,<span class="number">0xC2</span>,<span class="number">0x79</span>,<span class="number">0x19</span>,<span class="number">0x56</span>,<span class="number">0x35</span>,<span class="number">0xDA</span>,<span class="number">0x8B</span>,<span class="number">0x47</span>,<span class="number">0xD3</span>,<span class="number">0x19</span>,<span class="number">0xFC</span>,<span class="number">0x55</span>,<span class="number">0x14</span>,<span class="number">0xCD</span>,<span class="number">0xD2</span>,<span class="number">0x7B</span>,<span class="number">0x58</span>,<span class="number">0x59</span>,<span class="number">0x09</span>,<span class="number">0x42</span>,<span class="number">0xDE</span>,<span class="number">0x2C</span>,<span class="number">0xB4</span>,<span class="number">0x48</span>,<span class="number">0xD9</span>,<span class="number">0xF2</span>,<span class="number">0x1B</span>,<span class="number">0xA9</span>,<span class="number">0x40</span>,<span class="number">0xE1</span>,<span class="number">0xA6</span>,<span class="number">0xFB</span>,<span class="number">0xFF</span>,<span class="number">0x38</span>,<span class="number">0xC1</span>,<span class="number">0xD5</span>,<span class="number">0xE2</span>,<span class="number">0xE8</span>,<span class="number">0x77</span>,<span class="number">0x78</span>,<span class="number">0x6F</span>,<span class="number">0x22</span>,<span class="number">0x04</span>,<span class="number">0xE6</span>,<span class="number">0x16</span>,<span class="number">0x3E</span>,<span class="number">0x0C</span>,<span class="number">0x35</span>,<span class="number">0x52</span>,<span class="number">0x5C</span>,<span class="number">0xFD</span>,<span class="number">0xC1</span>,<span class="number">0xE5</span>,<span class="number">0x59</span>,<span class="number">0x1C</span>,<span class="number">0xD0</span>,<span class="number">0xAE</span>,<span class="number">0x5A</span>,<span class="number">0xB2</span>,<span class="number">0xDD</span>,<span class="number">0x19</span>,<span class="number">0xF8</span>,<span class="number">0x42</span>,<span class="number">0xE6</span>,<span class="number">0x2C</span>,<span class="number">0x89</span>,<span class="number">0x59</span>,<span class="number">0xE5</span>,<span class="number">0x11</span>,<span class="number">0x9C</span>,<span class="number">0xC8</span>,<span class="number">0x7B</span>,<span class="number">0x81</span>,<span class="number">0x70</span>,<span class="number">0x7F</span>,<span class="number">0x6F</span>,<span class="number">0xBC</span>,<span class="number">0x6F</span>,<span class="number">0x02</span>,<span class="number">0x8F</span>,<span class="number">0xF7</span>,<span class="number">0xF4</span>,<span class="number">0xC8</span>,<span class="number">0x70</span>,<span class="number">0xAE</span>,<span class="number">0x02</span>,<span class="number">0xF8</span>,<span class="number">0x5B</span>,<span class="number">0xE2</span>,<span class="number">0x72</span>,<span class="number">0x08</span>,<span class="number">0x09</span>,<span class="number">0x6F</span>,<span class="number">0xBF</span>,<span class="number">0x4B</span>,<span class="number">0x39</span>,<span class="number">0xB5</span>,<span class="number">0xD0</span>,<span class="number">0x1E</span>,<span class="number">0xA3</span>,<span class="number">0x23</span>,<span class="number">0xAB</span>,<span class="number">0x9B</span>,<span class="number">0x43</span>,<span class="number">0xB1</span>,<span class="number">0x15</span>,<span class="number">0xD7</span>,<span class="number">0xBE</span>,]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(pw)):</span><br><span class="line">    pw[i] ^= key[i]</span><br><span class="line">    pw[i] ^= <span class="number">0x33</span></span><br><span class="line">    <span class="keyword">if</span> (((i%<span class="number">8</span>)//<span class="number">2</span>)==<span class="number">0</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">chr</span>(pw[i]+<span class="number">1</span>),end=<span class="string">&quot;&quot;</span>)</span><br><span class="line">    <span class="keyword">elif</span> (((i%<span class="number">8</span>)//<span class="number">2</span>)==<span class="number">1</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">chr</span>(pw[i]),end=<span class="string">&quot;&quot;</span>)</span><br><span class="line">    <span class="keyword">elif</span> (((i%<span class="number">8</span>)//<span class="number">2</span>)==<span class="number">2</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">chr</span>(pw[i]-<span class="number">1</span>),end=<span class="string">&quot;&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">chr</span>(pw[i]-<span class="number">2</span>),end=<span class="string">&quot;&quot;</span>)</span><br><span class="line">//flag&#123;6e2480b3-4f02-4cf1-9bc0-123b75f9a922&#125;</span><br></pre></td></tr></table></figure><h2 id="whereThe1b"><a href="#whereThe1b" class="headerlink" title="whereThe1b"></a>whereThe1b</h2><p>一个python写的lib，base32，各种随机数异或调用啥的，看了一会不想看了，发现是分组加密，三位对应四位，而且是可见字符，直接放在虚拟机(因为好像只有linux能调用cpython)里爆破了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> whereThel1b</span><br><span class="line"></span><br><span class="line">encry = [<span class="number">108</span>, <span class="number">117</span>, <span class="number">72</span>, <span class="number">80</span>, <span class="number">64</span>, <span class="number">49</span>, <span class="number">99</span>, <span class="number">19</span>, <span class="number">69</span>, <span class="number">115</span>, <span class="number">94</span>, <span class="number">93</span>, <span class="number">94</span>, <span class="number">115</span>, <span class="number">71</span>, <span class="number">95</span>, <span class="number">84</span>, <span class="number">89</span>, <span class="number">56</span>, <span class="number">101</span>, <span class="number">70</span>, <span class="number">2</span>, <span class="number">84</span>, <span class="number">75</span>, <span class="number">127</span>, <span class="number">68</span>, <span class="number">103</span>, <span class="number">85</span>, <span class="number">105</span>, <span class="number">113</span>, <span class="number">80</span>, <span class="number">103</span>, <span class="number">95</span>, <span class="number">67</span>, <span class="number">81</span>, <span class="number">7</span>, <span class="number">113</span>, <span class="number">70</span>, <span class="number">47</span>, <span class="number">73</span>, <span class="number">92</span>, <span class="number">124</span>, <span class="number">93</span>, <span class="number">120</span>, <span class="number">104</span>, <span class="number">108</span>, <span class="number">106</span>, <span class="number">17</span>, <span class="number">80</span>, <span class="number">102</span>, <span class="number">101</span>, <span class="number">75</span>, <span class="number">93</span>, <span class="number">68</span>, <span class="number">121</span>, <span class="number">26</span>]</span><br><span class="line">flag = <span class="string">&quot;&#123;&#125;&#123;&#125;&#123;&#125;&quot;</span></span><br><span class="line"><span class="keyword">for</span> o <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">14</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>,<span class="number">127</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>,<span class="number">127</span>):</span><br><span class="line">            <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>,<span class="number">127</span>):</span><br><span class="line">                flag=<span class="string">f&#x27;<span class="subst">&#123;<span class="built_in">chr</span>(i)&#125;</span><span class="subst">&#123;<span class="built_in">chr</span>(j)&#125;</span><span class="subst">&#123;<span class="built_in">chr</span>(k)&#125;</span>&#x27;</span>*<span class="number">14</span></span><br><span class="line">                flag = flag.encode()</span><br><span class="line">                ret = whereThel1b.trytry(flag)</span><br><span class="line">                <span class="keyword">if</span> ret[(<span class="number">4</span>*o):(<span class="number">4</span>*o+<span class="number">4</span>)]==encry[(<span class="number">4</span>*o):(<span class="number">4</span>*o+<span class="number">4</span>)]:</span><br><span class="line">                    <span class="built_in">print</span>(flag,end=<span class="string">&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="Goreverse"><a href="#Goreverse" class="headerlink" title="Goreverse"></a>Goreverse</h2><p>思路超级清晰，就是加密嵌套太多层了，只要一出错就得还原重新看，sm4那里就是死活出不来，最后才知道是iv搞错了，真无语了，这题调试还是一坨，调一步卡一步，有两个反调试。最后看vidar-team的wp复现的。</p><p>先用go脚本还原一下大部分符号名</p><p><img src="/../img/2024CISCN%E5%88%9D%E8%B5%9B/image-20240526171458703.png" alt="image-20240526171458703"></p><p>main函数一个反调试，直接把exit()nop掉就行，继续运行到</p><p><img src="/../img/2024CISCN%E5%88%9D%E8%B5%9B/image-20240526191855425.png" alt="image-20240526191855425"></p><p>很明显一个open了一个flag文件读入，然后进行以下几个操作，逐步分析</p><p><img src="/../img/2024CISCN%E5%88%9D%E8%B5%9B/image-20240526192238258.png" alt="image-20240526192238258"></p><p>大概就是这样，找到aes的key和iv，然后找到sm4的key和iv，还原xxtea算法和找到xxtea的key，找到异或表，就可以穿了。。。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> table[]=<span class="string">&quot;D7BJLsOk9@f&amp;1dWIn53IDlJqUS6$^WhkAk2kk*2GaqmLwiLX^bGGE$&amp;dmqR^g5bL3&quot;</span>;</span><br><span class="line"><span class="type">char</span> keyxxtea[]=<span class="string">&quot;Bs^8*wZ4lu8oR&amp;@k&quot;</span>;</span><br><span class="line"><span class="type">char</span> keySm4[]=<span class="string">&quot;pg5g#k6Qo3L&amp;1EzT&quot;</span>;</span><br><span class="line"><span class="type">char</span> keyaes[]=<span class="string">&quot;dPGWgcLpqmxw3uOXhKpKV009Cql@@XE6&quot;</span>;</span><br><span class="line"><span class="type">char</span> ivaes[]=<span class="string">&quot;dPGWgcLpqmxw3uOX&quot;</span></span><br></pre></td></tr></table></figure><p><img src="/../img/2024CISCN%E5%88%9D%E8%B5%9B/image-20240527124436315.png" alt="image-20240527124436315"></p><p>输出的前16个字节是sm4的iv，后面的都是sm4的密文，因为进行加密的iv是随机数，只能通过这个方法判断</p><p><img src="/../img/2024CISCN%E5%88%9D%E8%B5%9B/image-20240527124758410.png" alt="image-20240527124758410"></p><p>最后再进行一步xxtea解密和异或表</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> delta 0x7FAB4CAD</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> v[<span class="number">20</span>] = &#123;<span class="number">0xa17bd6ac</span>,<span class="number">0x5ec21b5e</span>,<span class="number">0xa42f58b2</span>,<span class="number">0x1f8dcfae</span>,<span class="number">0x17e7d4bb</span>,<span class="number">0x8bb7be13</span>,<span class="number">0xf335137e</span>,<span class="number">0x24eedf2f</span>,<span class="number">0xf57f3e58</span>,<span class="number">0xe246395a</span>,<span class="number">0x1c4f3291</span>&#125;;<span class="comment">//可改</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> key[<span class="number">4</span>] = &#123;<span class="number">0x385E7342</span>, <span class="number">0x345A772A</span>, <span class="number">0x6F38756C</span>, <span class="number">0x6B402652</span>&#125;;<span class="comment">//可改</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> y,z,p,rounds,e;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> table[<span class="number">100</span>]=&#123;<span class="number">0x44</span>, <span class="number">0x37</span>, <span class="number">0x42</span>, <span class="number">0x4A</span>, <span class="number">0x4C</span>, <span class="number">0x73</span>, <span class="number">0x4F</span>, <span class="number">0x6B</span>, <span class="number">0x39</span>, <span class="number">0x40</span>, <span class="number">0x66</span>, <span class="number">0x26</span>, <span class="number">0x31</span>, <span class="number">0x64</span>, <span class="number">0x57</span>, <span class="number">0x49</span>, </span><br><span class="line"><span class="number">0x6E</span>, <span class="number">0x35</span>, <span class="number">0x33</span>, <span class="number">0x49</span>, <span class="number">0x44</span>, <span class="number">0x6C</span>, <span class="number">0x4A</span>, <span class="number">0x71</span>, <span class="number">0x55</span>, <span class="number">0x53</span>, <span class="number">0x36</span>, <span class="number">0x24</span>, <span class="number">0x5E</span>, <span class="number">0x57</span>, <span class="number">0x68</span>, <span class="number">0x6B</span>, </span><br><span class="line"><span class="number">0x41</span>, <span class="number">0x6B</span>, <span class="number">0x32</span>, <span class="number">0x6B</span>, <span class="number">0x6B</span>, <span class="number">0x2A</span>, <span class="number">0x32</span>, <span class="number">0x47</span>, <span class="number">0x61</span>, <span class="number">0x71</span>, <span class="number">0x6D</span>, <span class="number">0x4C</span>, <span class="number">0x77</span>, <span class="number">0x69</span>, <span class="number">0x4C</span>, <span class="number">0x58</span>, </span><br><span class="line"><span class="number">0x5E</span>, <span class="number">0x62</span>, <span class="number">0x47</span>, <span class="number">0x47</span>, <span class="number">0x45</span>, <span class="number">0x24</span>, <span class="number">0x26</span>, <span class="number">0x64</span>, <span class="number">0x6D</span>, <span class="number">0x71</span>, <span class="number">0x52</span>, <span class="number">0x5E</span>, <span class="number">0x67</span>, <span class="number">0x35</span>, <span class="number">0x62</span>, <span class="number">0x4C</span>, </span><br><span class="line"><span class="number">0x33</span>, <span class="number">0x6C</span>, <span class="number">0x43</span>, <span class="number">0x41</span>, <span class="number">0x35</span>, <span class="number">0x5E</span>, <span class="number">0x48</span>, <span class="number">0x47</span>, <span class="number">0x4B</span>, <span class="number">0x24</span>, <span class="number">0x39</span>, <span class="number">0x71</span>, <span class="number">0x6F</span>, <span class="number">0x35</span>, <span class="number">0x54</span>, <span class="number">0x40</span>, </span><br><span class="line"><span class="number">0x42</span>, <span class="number">0x77</span>, <span class="number">0x6F</span>, <span class="number">0x6D</span>, <span class="number">0x39</span>, <span class="number">0x76</span>, <span class="number">0x45</span>, <span class="number">0x58</span>, <span class="number">0x79</span>, <span class="number">0x61</span>, <span class="number">0x30</span>, <span class="number">0x48</span>, <span class="number">0x41</span>, <span class="number">0x56</span>, <span class="number">0x33</span>, <span class="number">0x4C</span>, </span><br><span class="line"><span class="number">0x72</span>, <span class="number">0x57</span>, <span class="number">0x57</span>&#125;;</span><br><span class="line"><span class="type">int</span> n = <span class="number">11</span>;<span class="comment">//v的个数</span></span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">rounds = <span class="number">6</span> + <span class="number">52</span>/n;<span class="comment">//容易魔改</span></span><br><span class="line">y = v[<span class="number">0</span>];</span><br><span class="line">sum = rounds*delta;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line">e = sum &gt;&gt; <span class="number">2</span> &amp; <span class="number">3</span>;</span><br><span class="line"><span class="keyword">for</span>(p=n<span class="number">-1</span>;p&gt;<span class="number">0</span>;p--)</span><br><span class="line">&#123;</span><br><span class="line">z = v[p<span class="number">-1</span>];</span><br><span class="line">v[p] -= ((((z&gt;&gt;<span class="number">5</span>)^(y&lt;&lt;<span class="number">2</span>))+((y&gt;&gt;<span class="number">3</span>)^(z&lt;&lt;<span class="number">4</span>))) ^y ^ sum) + (key[(p&amp;<span class="number">3</span>)^e]^z);<span class="comment">//容易魔改</span></span><br><span class="line">y = v[p];</span><br><span class="line">&#125;</span><br><span class="line">z = v[n<span class="number">-1</span>];</span><br><span class="line">v[<span class="number">0</span>] -= ((((z&gt;&gt;<span class="number">5</span>)^(y&lt;&lt;<span class="number">2</span>))+((y&gt;&gt;<span class="number">3</span>)^(z&lt;&lt;<span class="number">4</span>))) ^y ^ sum) + (key[(p&amp;<span class="number">3</span>)^e]^z);<span class="comment">//容易魔改</span></span><br><span class="line">y = v[<span class="number">0</span>];</span><br><span class="line">sum -= delta;</span><br><span class="line">&#125;<span class="keyword">while</span>(--rounds);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>,*((<span class="type">char</span>*)&amp;v[i])^table[i*<span class="number">4</span>]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>,*((<span class="type">char</span>*)&amp;v[i]+<span class="number">1</span>)^table[i*<span class="number">4</span>+<span class="number">1</span>]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>,*((<span class="type">char</span>*)&amp;v[i]+<span class="number">2</span>)^table[i*<span class="number">4</span>+<span class="number">2</span>]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>,*((<span class="type">char</span>*)&amp;v[i]+<span class="number">3</span>)^table[i*<span class="number">4</span>+<span class="number">3</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//flag&#123;9c2a42ab-b02d-457e-befb-27af6a7fa7bc&#125;</span></span><br></pre></td></tr></table></figure><h2 id="gdb-debug"><a href="#gdb-debug" class="headerlink" title="gdb_debug"></a>gdb_debug</h2><p>固定的种子，一共调用了三次，先把需要用的rand值全部打印出来成为一个表，然后加密就是简单的异或+换表顺序+异或，写个脚本出了，第二天的签到。。。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;cstdlib&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;cstdio&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;defs.h&quot;</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> data2[] = &#123;<span class="number">220</span>, <span class="number">184</span>, <span class="number">64</span>, <span class="number">189</span>, <span class="number">156</span>, <span class="number">201</span>, <span class="number">110</span>, <span class="number">101</span>, <span class="number">239</span>, <span class="number">18</span>, <span class="number">216</span>, <span class="number">152</span>, <span class="number">105</span>, <span class="number">208</span>, <span class="number">222</span>, <span class="number">252</span>, <span class="number">107</span>, <span class="number">174</span>, <span class="number">125</span>, <span class="number">139</span>, <span class="number">214</span>,</span><br><span class="line">               <span class="number">141</span>, <span class="number">15</span>, <span class="number">208</span>, <span class="number">79</span>, <span class="number">102</span>, <span class="number">62</span>, <span class="number">157</span>, <span class="number">250</span>, <span class="number">195</span>, <span class="number">233</span>, <span class="number">36</span>, <span class="number">211</span>, <span class="number">239</span>, <span class="number">255</span>, <span class="number">157</span>, <span class="number">231</span>, <span class="number">1</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> rand_list[]&#123;</span><br><span class="line">        <span class="number">0x1fae43d9</span>, <span class="number">0x14da3e0f</span>, <span class="number">0x29fdc718</span>, <span class="number">0x6b7956bd</span>, <span class="number">0x565247c7</span>, <span class="number">0x118e4e16</span>, <span class="number">0xec41481</span>, <span class="number">0x2853f3be</span>, <span class="number">0x18fe7af8</span>,</span><br><span class="line">        <span class="number">0x637a7d4a</span>, <span class="number">0x4c235f65</span>, <span class="number">0x1a636af2</span>, <span class="number">0xf8e55d</span>, <span class="number">0x3f4562ab</span>, <span class="number">0x910412b</span>, <span class="number">0x57ec233</span>, <span class="number">0x1a9fe4d4</span>, <span class="number">0x321373a5</span>,</span><br><span class="line">        <span class="number">0x5aa40d67</span>, <span class="number">0x7661698</span>, <span class="number">0x7e44749f</span>, <span class="number">0x3c64e7e</span>, <span class="number">0x49be3e2b</span>, <span class="number">0x394c025d</span>, <span class="number">0x6acb9dc2</span>, <span class="number">0x726285af</span>, <span class="number">0x7d6818e</span>,</span><br><span class="line">        <span class="number">0x655c983a</span>, <span class="number">0x7afa9e4c</span>, <span class="number">0x7f7af6a5</span>, <span class="number">0x5b28f175</span>, <span class="number">0x1aa8e225</span>, <span class="number">0x145534b4</span>, <span class="number">0x526b88d</span>, <span class="number">0x62238e3</span>, <span class="number">0x6aa77c7b</span>,</span><br><span class="line">        <span class="number">0x16b506a3</span>, <span class="number">0x14e64d64</span>, <span class="number">0x12fb7039</span>, <span class="number">0x2fb3819c</span>, <span class="number">0x7860caae</span>, <span class="number">0x5f1ecf9e</span>, <span class="number">0x4a16ec8e</span>, <span class="number">0x7959b00b</span>, <span class="number">0x1e64324a</span>,</span><br><span class="line">        <span class="number">0x53272db9</span>, <span class="number">0x7ed8723f</span>, <span class="number">0x3904171e</span>, <span class="number">0x53aa15e</span>, <span class="number">0x597c7fa6</span>, <span class="number">0x406a2db6</span>, <span class="number">0x37f15fd</span>, <span class="number">0x5d42ce25</span>, <span class="number">0xa286be1</span>,</span><br><span class="line">        <span class="number">0x3ccb185a</span>, <span class="number">0x480e6be7</span>, <span class="number">0x7c8af191</span>, <span class="number">0x44a199e8</span>, <span class="number">0x2d6b0421</span>, <span class="number">0x77858fdd</span>, <span class="number">0x441c908d</span>, <span class="number">0x893f596</span>, <span class="number">0x122e7202</span>,</span><br><span class="line">        <span class="number">0x5871c541</span>, <span class="number">0xdbaae23</span>, <span class="number">0x1850aae5</span>, <span class="number">0x431941bc</span>, <span class="number">0x246fb4c7</span>, <span class="number">0x2d36f849</span>, <span class="number">0x5614b1f5</span>, <span class="number">0x54233663</span>, <span class="number">0x2597c2f7</span>,</span><br><span class="line">        <span class="number">0x35338194</span>, <span class="number">0x1e3a22f1</span>, <span class="number">0x1ef17303</span>, <span class="number">0x5397b3de</span>, <span class="number">0x716150aa</span>, <span class="number">0x1dc9e542</span>, <span class="number">0xc9bcafc</span>, <span class="number">0x769bf209</span>, <span class="number">0x774664e8</span>,</span><br><span class="line">        <span class="number">0x4d05f8b2</span>, <span class="number">0x7a1b0806</span>, <span class="number">0x5489330d</span>, <span class="number">0x572e6493</span>, <span class="number">0x36e62061</span>, <span class="number">0x1c979ef4</span>, <span class="number">0x53b95624</span>, <span class="number">0x7b87ba49</span>, <span class="number">0x4a02a315</span>,</span><br><span class="line">        <span class="number">0x4b3ee601</span>, <span class="number">0x3fa44ad7</span>, <span class="number">0x529698ab</span>, <span class="number">0x5d6d5804</span>, <span class="number">0x18161018</span>, <span class="number">0x605146cf</span>, <span class="number">0x75be02e9</span>, <span class="number">0x5b2f51d5</span>, <span class="number">0x4c0fb96</span>,</span><br><span class="line">        <span class="number">0x22f4fb33</span>, <span class="number">0x314403ca</span>, <span class="number">0x58e431f9</span>, <span class="number">0x488cbe2a</span>, <span class="number">0x6677855e</span>, <span class="number">0x771e54ea</span>, <span class="number">0x677e312d</span>, <span class="number">0x3a0f393c</span>, <span class="number">0x687fa594</span>,</span><br><span class="line">        <span class="number">0x548166f</span>, <span class="number">0x46ab0438</span>, <span class="number">0x5f1b979d</span>, <span class="number">0x7c8e7b58</span>, <span class="number">0x13b0fcea</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> unsi[<span class="number">40</span>] = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    srand(<span class="number">1610612736</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">38</span>; ++i) &#123;</span><br><span class="line">        data2[i] ^= rand_list[<span class="number">38</span> + <span class="number">37</span> + i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">void</span> *ptr = <span class="built_in">malloc</span>(<span class="number">40</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">38</span>; ++i) ((_BYTE *) ptr)[i] = i;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">38</span> - <span class="number">1</span>; k; --k) &#123;</span><br><span class="line">        <span class="type">int</span> v18 = rand_list[<span class="number">38</span> + <span class="number">37</span> - k] % (k + <span class="number">1</span>);</span><br><span class="line">        <span class="type">int</span> v19 = *((_BYTE *) ptr + k);</span><br><span class="line">        *((_BYTE *) ptr + k) = *((_BYTE *) ptr + v18);</span><br><span class="line">        *((_BYTE *) ptr + v18) = v19;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">40</span>; ++i) &#123;</span><br><span class="line">        _BYTE current = data2[i];</span><br><span class="line">        unsi[((_BYTE *) ptr)[i]] = current;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">38</span>; ++i) &#123;</span><br><span class="line">        unsi[i] ^= rand_list[i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">38</span>; ++i) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, unsi[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;2024CISCN初赛-Reverse&quot;&gt;&lt;a href=&quot;#2024CISCN初赛-Reverse&quot; class=&quot;headerlink&quot; title=&quot;2024CISCN初赛 Reverse&quot;&gt;&lt;/a&gt;2024CISCN初赛 Reverse&lt;/h1&gt;&lt;p&gt;最近</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>ios学习篇(2)</title>
    <link href="https://straw-233.github.io/2024/04/18/ios%E5%AD%A6%E4%B9%A0%E7%AF%87(2)/"/>
    <id>https://straw-233.github.io/2024/04/18/ios%E5%AD%A6%E4%B9%A0%E7%AF%87(2)/</id>
    <published>2024-04-18T13:46:25.520Z</published>
    <updated>2024-04-18T13:59:15.265Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ios学习篇-2"><a href="#ios学习篇-2" class="headerlink" title="ios学习篇(2)"></a>ios学习篇(2)</h1><h2 id="ipa文件结构"><a href="#ipa文件结构" class="headerlink" title="ipa文件结构"></a>ipa文件结构</h2><p>​ipa以压缩包的形式打开后进入payload中会有很多的文件存在，我们如何进行有效的辨别每个文件是什么，以快速找到对于逆向最有用二进制文件呢，先从ipa的结构入手。</p><p>​本文章将以一个开源的社交app为例子进行简单介绍</p><p><img src="/../img/ios%E5%AD%A6%E4%B9%A0%E7%AF%87(2)/1.png" alt="1"></p><h3 id="Info-plist"><a href="#Info-plist" class="headerlink" title="Info.plist"></a>Info.plist</h3><p>​Info.plist是一个应用的相关配置文件（类似于android的AndroidManifest.xml）</p><p>​可以用plist Editor来查看大致的相关配置信息，当然用vscode看也行不过比较难看</p><p><img src="/../img/ios%E5%AD%A6%E4%B9%A0%E7%AF%87(2)/2.png" alt="2"></p><p><img src="/../img/ios%E5%AD%A6%E4%B9%A0%E7%AF%87(2)/3.png" alt="3"></p><p>​后面还涉及一些权限啥的配置，不展开细讲</p><h3 id="CodeSignature"><a href="#CodeSignature" class="headerlink" title="_CodeSignature"></a>_CodeSignature</h3><ul><li>ipa包签名文件的存放文件夹</li></ul><h3 id="Iproj"><a href="#Iproj" class="headerlink" title=".Iproj"></a>.Iproj</h3><ul><li>App所支持的语言文件</li></ul><h3 id="Plugins"><a href="#Plugins" class="headerlink" title="Plugins"></a>Plugins</h3><ul><li>插件</li></ul><p><img src="/../img/ios%E5%AD%A6%E4%B9%A0%E7%AF%87(2)/4.png" alt="4"></p><p>​每个插件里的结构也类似</p><h3 id="Frameworks"><a href="#Frameworks" class="headerlink" title="Frameworks"></a>Frameworks</h3><ul><li><p>当前应用使用的三方 Framework 或 Swift 动态库</p><p><img src="/../img/ios%E5%AD%A6%E4%B9%A0%E7%AF%87(2)/5.png" alt="5"></p></li></ul><h3 id="Source"><a href="#Source" class="headerlink" title="Source"></a>Source</h3><ul><li>资源文件</li></ul><h3 id="Assets-car"><a href="#Assets-car" class="headerlink" title="Assets.car"></a>Assets.car</h3><ul><li>Assets.xcassts在编译过程中生成的最终展示文件，默认里面存放各种分辨率图片</li></ul><h3 id="bundle"><a href="#bundle" class="headerlink" title=".bundle"></a>.bundle</h3><ul><li>调用一些其他的资源项目包</li></ul><p>该文件多的话，会非常难逆</p><h3 id="mach-o"><a href="#mach-o" class="headerlink" title="mach-o"></a>mach-o</h3><p><img src="/../img/ios%E5%AD%A6%E4%B9%A0%E7%AF%87(2)/6.png" alt="6"></p><p>根据Info.plist里找，这就是就是我们需要进行逆向的文件</p><h3 id="nib"><a href="#nib" class="headerlink" title=".nib"></a>.nib</h3><p>.nib 文件是二进制的 plist 文件，其中保存了应用程序中 GUI 组件的位置信息和设置信息。这些文件是通过 Xcode 的 Interface Builder 创建的。Interface Builder 编辑.xib 文件的文本版本，然后再将这些文件打包成二进制格式。</p><h3 id="storyboardc"><a href="#storyboardc" class="headerlink" title=".storyboardc"></a>.storyboardc</h3><ul><li>模块化UI文件</li></ul><h3 id="其他资源文件"><a href="#其他资源文件" class="headerlink" title="其他资源文件"></a>其他资源文件</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">.xml、.json</span><br><span class="line">.plist：项目中使用资源的.plist文件</span><br><span class="line">.conf：相关的配置文件</span><br><span class="line">.cer、.der、.p12：钥匙串文件</span><br><span class="line">.wav：音频文件</span><br><span class="line">.js、.html</span><br><span class="line">.nib：Xcode自带的数据文件，包含一个窗口程序和应用程序委托对象</span><br><span class="line">.sqlite：数据库文件</span><br><span class="line">.txt：文本文件</span><br><span class="line">.mom：Xcode创建的数据模型文件</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;ios学习篇-2&quot;&gt;&lt;a href=&quot;#ios学习篇-2&quot; class=&quot;headerlink&quot; title=&quot;ios学习篇(2)&quot;&gt;&lt;/a&gt;ios学习篇(2)&lt;/h1&gt;&lt;h2 id=&quot;ipa文件结构&quot;&gt;&lt;a href=&quot;#ipa文件结构&quot; class=&quot;head</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>ios学习篇(1)</title>
    <link href="https://straw-233.github.io/2024/04/13/ios%E5%AD%A6%E4%B9%A0%E7%AF%87(1)/"/>
    <id>https://straw-233.github.io/2024/04/13/ios%E5%AD%A6%E4%B9%A0%E7%AF%87(1)/</id>
    <published>2024-04-13T11:16:58.428Z</published>
    <updated>2024-04-13T13:53:27.911Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ios学习篇-1"><a href="#ios学习篇-1" class="headerlink" title="ios学习篇(1)"></a>ios学习篇(1)</h1><h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>​哎，感觉学安卓太难了，没有用过安卓系统，但是之前有过ios越狱经验，干脆直接学ios逆向好了。学了一个星期，才刚把基础题做出来。为了省钱不买mac，就用windows硬搞，吃尽了苦头啊。。。</p><h2 id="工具-设备"><a href="#工具-设备" class="headerlink" title="工具&#x2F;设备"></a>工具&#x2F;设备</h2><p>iphone 7：dopamine(多巴胺)，牛蛙助手，巨魔商店，open-ssh，debugserver</p><p>windows系统：ssh，爱思助手，ida</p><h2 id="无根越狱-仅适配ios17以下版本"><a href="#无根越狱-仅适配ios17以下版本" class="headerlink" title="无根越狱(仅适配ios17以下版本)"></a>无根越狱(仅适配ios17以下版本)</h2><p>看了很多教程，试过了WinRa1n，直接报错差点成为苹果板砖了。感觉还是多巴胺一键最简单</p><h3 id="前置步骤"><a href="#前置步骤" class="headerlink" title="前置步骤"></a>前置步骤</h3><p><img src="/../img/ios%E5%AD%A6%E4%B9%A0%E7%AF%87(1)/%E6%89%80%E9%9C%80%E8%BD%AF%E4%BB%B6.png" alt="所需软件"></p><p>​先去把爱思助手下了，爱思能帮你配好很多环境，还有唯一可见的ui，只能执行&#x2F;var&#x2F;mobile&#x2F;Media下的文件</p><p>​再去下个<a href="https://ios222.com/">牛蛙助手官网_苹果助手</a>，BLFGTool这个可以将你下载的ipa进行签名并且安装</p><p>​签名详细步骤可以跟着<a href="https://www.bilibili.com/video/BV1jT4y1H7cu/?spm_id_from=333.337.search-card.all.click&vd_source=934266fa049a08cd3a0a9e4ceda56d20">【免费免越狱】牛蛙助手iphone手机7天自签名神器 手机上自签 从此告别电脑签名 苹果应用多开_哔哩哔哩_bilibili</a>来操作</p><h3 id="中间步骤"><a href="#中间步骤" class="headerlink" title="中间步骤"></a>中间步骤</h3><p>​在手机上的safari浏览器下一个dopamine(多巴胺)的ipa，然后传到牛蛙助手(如果你有巨魔就用巨魔，因为我的巨魔是越狱后搞得)上进行签名安装，打开多巴胺后，就直接默认设置直接一键越狱即可，后续设置的密码要记住，记得使用sileo越狱商店。</p><p><img src="/../img/ios%E5%AD%A6%E4%B9%A0%E7%AF%87(1)/%E5%A4%9A%E5%B7%B4%E8%83%BA.png" alt="多巴胺"></p><h3 id="后续步骤"><a href="#后续步骤" class="headerlink" title="后续步骤"></a>后续步骤</h3><p>有了sileo以后，就可以添加各种软件源，在源上下载很多插件，工具，软件等，我的字体也是这里改的。</p><p>先在sileo中搜Trollstore helper，对巨魔商店进行一个安装(感觉是通过一个ios的漏洞安装的，因为没越狱也能装)，巨魔商店是一个一个ipa直接安装的超级牛的工具</p><p><img src="/../img/ios%E5%AD%A6%E4%B9%A0%E7%AF%87(1)/%E5%B7%A8%E9%AD%94%E5%95%86%E5%BA%97.png" alt="巨魔商店"></p><p>后面在sileo上再装open-ssh和debug-server，方便我们在windows系统中进行终端操作，和ida远程调试</p><p><img src="/../img/ios%E5%AD%A6%E4%B9%A0%E7%AF%87(1)/open-ssh.png" alt="open-ssh"></p><p><img src="/../img/ios%E5%AD%A6%E4%B9%A0%E7%AF%87(1)/debugserver.png" alt="debugserver"></p><p>最后我喜欢搞一个Filza，一个ios的文件管理器，自带那个权限太低了，啥操作也没有，这个就跟安卓的文件管理器相似了。</p><h2 id="ssh连接"><a href="#ssh连接" class="headerlink" title="ssh连接"></a>ssh连接</h2><p>确保两台设备在同一网络下，使用ssh，进行连接</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh root@192.168.x.xxx</span><br></pre></td></tr></table></figure><p>输入密码，一般默认是alpine或者是你之前越狱设置的密码</p><p><img src="/../img/ios%E5%AD%A6%E4%B9%A0%E7%AF%87(1)/ssh%E8%BF%9E%E6%8E%A5.png" alt="ssh连接"></p><p>这样就成功进入了，ios系统是基于unix系统的，所以一些常见的linux指令也能运行</p><h2 id="动态调试"><a href="#动态调试" class="headerlink" title="动态调试"></a>动态调试</h2><p>以crack me1这题为例子，来演示一下</p><h3 id="ipa"><a href="#ipa" class="headerlink" title="ipa"></a>ipa</h3><p>一般给你的文件就是一个ipa的文件（很多正式的ipa都会有带壳，需要对壳进行砸壳处理，但这题没有），相当于安卓里的apk文件，其实本质上都是一个压缩包，用压缩包打开后，进入&#x2F;Payload&#x2F;crack me1.app&#x2F;</p><p><img src="/../img/ios%E5%AD%A6%E4%B9%A0%E7%AF%87(1)/ipa%E6%96%87%E4%BB%B6.png" alt="ipa文件"></p><p>就可以看到全部的文件，我们主要用到的是一个mach-o的文件，是mac和ios系统下的可执行文件，就是那个crack me1，关于其他文件是什么，可以自行搜索ipa结构进行分析查看。</p><p>将这个ipa传到巨魔商店里进行安装，打开</p><p><img src="/../img/ios%E5%AD%A6%E4%B9%A0%E7%AF%87(1)/%E9%A2%98%E7%9B%AE.png" alt="题目"></p><h3 id="mach-o"><a href="#mach-o" class="headerlink" title="mach-o"></a>mach-o</h3><p>关于怎么判断哪个文件为mach-o文件，其实可以用010中的mach-o的模板看，因为该类文件的文件头和java的.class文件相同，都是CA FE BA BE(咖啡宝贝)</p><p><img src="/../img/ios%E5%AD%A6%E4%B9%A0%E7%AF%87(1)/%E5%A4%B4%E6%96%87%E4%BB%B6.png" alt="头文件"></p><p>模板中也能看到很多文件头，函数表，数据库信息等</p><p><img src="/../img/ios%E5%AD%A6%E4%B9%A0%E7%AF%87(1)/mach-o%E7%BB%93%E6%9E%84.png" alt="mach-o结构"></p><p>当然如果你有mac，使用machoview会更方便</p><p>通过010我们也可以看到，这个文件把32位和64位架构全部整合进去了，所以这个文件无论在哪种arm架构下都能正常运行，但我们手机基本用的是arm64，所以我们用ida64对文件进行分析。</p><p><img src="/../img/ios%E5%AD%A6%E4%B9%A0%E7%AF%87(1)/main%E5%87%BD%E6%95%B0.png" alt="main函数"></p><p>打开，发现也能正常反编译，是使用object-c写的，左边的函数表中有一堆，然后main函数只是一个接口，没有关键函数，所以从AppDelegate，ViewController，GTMBase64这几个大类下手。</p><p><a href="https://juejin.cn/post/6951591401528229895">iOS应用的启动流程和优化详解 - 掘金 (juejin.cn)</a></p><p><a href="https://www.cnblogs.com/hubert-style/p/15408236.html">iOS程序入口结构 - 背包の技术 - 博客园 (cnblogs.com)</a></p><h3 id="ida分析"><a href="#ida分析" class="headerlink" title="ida分析"></a>ida分析</h3><p>看了一堆文章再加随便乱点以后，发现了关键函数位置ViewController touch</p><p><img src="/../img/ios%E5%AD%A6%E4%B9%A0%E7%AF%87(1)/%E5%85%B3%E9%94%AE%E5%87%BD%E6%95%B0.png" alt="关键函数"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">v33[2] = self;//指向应用程序的委托对象的指针</span><br><span class="line">v33[1] = (id)a2;//选择器</span><br><span class="line">v33[0] = objc_retain(&amp;cfstr_Crack);//v33=&quot;crack&quot;</span><br><span class="line">v2 = +[ViewController DES:KEY:](&amp;OBJC_CLASS___ViewController, &quot;DES:KEY:&quot;, string, v33[0]);//DES加密</span><br><span class="line">v32 = objc_retainAutoreleasedReturnValue(v2);//清空释放</span><br><span class="line">v3 = objc_msgSend((id)textfield, &quot;text&quot;);//相当于scanf，获取text窗口中的数据</span><br><span class="line">v25 = objc_retainAutoreleasedReturnValue(v3);//清空释放</span><br><span class="line">v24 = (unsigned __int8)objc_msgSend(v32, &quot;isEqualToString:&quot;, v25);//比较</span><br><span class="line">objc_release(v25);</span><br></pre></td></tr></table></figure><p><img src="/../img/ios%E5%AD%A6%E4%B9%A0%E7%AF%87(1)/DES%E5%8A%A0%E5%AF%86.png" alt="DES加密"></p><p>细看DES加密的函数，要是不给函数名，估计更难看，这边调用了CommonCrypto 库中的 CCCrypt 函数进行加密或解密操作</p><p>进入CCCrypt细看</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">CCCryptorStatus __cdecl CCCrypt(</span><br><span class="line">        CCOperation op,</span><br><span class="line">        CCAlgorithm alg,</span><br><span class="line">        CCOptions options,</span><br><span class="line">        const void *key,</span><br><span class="line">        size_t keyLength,</span><br><span class="line">        const void *iv,</span><br><span class="line">        const void *dataIn,</span><br><span class="line">        size_t dataInLength,</span><br><span class="line">        void *dataOut,</span><br><span class="line">        size_t dataOutAvailable,</span><br><span class="line">        size_t *dataOutMoved)</span><br><span class="line">&#123;</span><br><span class="line">  return _CCCrypt(op, alg, options, key, keyLength, iv, dataIn, dataInLength, dataOut, dataOutAvailable, dataOutMoved);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">解释一下每个参数的作用：</span><br><span class="line">op: 表示进行加密还是解密操作，可以是 kCCEncrypt 或 kCCDecrypt。</span><br><span class="line">alg: 表示使用的加密算法，例如 kCCAlgorithmAES 表示使用 AES 算法。</span><br><span class="line">options: 用于指定加密选项，例如填充方式等。</span><br><span class="line">key: 表示加密或解密所使用的密钥。</span><br><span class="line">keyLength: 表示密钥的长度。</span><br><span class="line">iv: 表示初始化向量（Initialization Vector），在某些加密模式下会使用到。</span><br><span class="line">dataIn: 表示待加密或解密的数据输入。</span><br><span class="line">dataInLength: 表示待加密或解密的数据输入长度。</span><br><span class="line">dataOut: 表示加密或解密后的数据输出。</span><br><span class="line">dataOutAvailable: 表示输出缓冲区的可用空间大小。</span><br><span class="line">dataOutMoved: 表示实际写入到输出缓冲区的数据长度。</span><br></pre></td></tr></table></figure><p>然后根据参数看出来是DES&#x2F;pkcs7&#x2F;ECB加密，密文是1hKgkdbhfbeu6755d8fk，密钥是crack，但是自己加密出来结果怎么都是是错的，感觉是密钥填充的问题，哎，要是能动态调试这题就秒杀了。</p><h3 id="动态调试-1"><a href="#动态调试-1" class="headerlink" title="动态调试"></a>动态调试</h3><p>最煎熬的地方，看了无数文章，无限个报错，终于成功动调了。</p><p>因为ida本身不自带iphone-server（为什么macos-server都有，iPhone没有？怒了），我们要用其他的方法调试</p><p>我先尝试了用网上下载的debug-server，但是因为iphone自身极高的保护，修改了各种权限后，还是一执行就把我kill掉，估计也是因为签名问题，iphone 的保护真是好啊！</p><p>于是又搜到sileo中的自带的debugserver，在iphone中安装完debugserver后，就已经在环境变量中能直接使用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">debugserver-@(#)PROGRAM:LLDB  PROJECT:lldb-14.0.0</span><br><span class="line"> for arm64.</span><br><span class="line">Usage:</span><br><span class="line">  debugserver host:port [program-name program-arg1 program-arg2 ...]</span><br><span class="line">  debugserver /path/file [program-name program-arg1 program-arg2 ...]</span><br><span class="line">  debugserver host:port --attach=&lt;pid&gt;</span><br><span class="line">  debugserver /path/file --attach=&lt;pid&gt;</span><br><span class="line">  debugserver host:port --attach=&lt;process_name&gt;</span><br><span class="line">  debugserver /path/file --attach=&lt;process_name&gt;</span><br></pre></td></tr></table></figure><p>将我们的题目在手机中打开</p><p>先要查看你所运行的程序的PID，简单的grep查找指令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps aux | grep crack</span><br></pre></td></tr></table></figure><p><img src="/../img/ios%E5%AD%A6%E4%B9%A0%E7%AF%87(1)/PID%E6%9F%A5%E7%9C%8B.png" alt="PID查看"></p><p>可以看到PID为37918</p><p>输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">debugserver 192.168.x.xxx:3333</span><br><span class="line">               电脑的ip  端口(默认)</span><br></pre></td></tr></table></figure><p><img src="/../img/ios%E5%AD%A6%E4%B9%A0%E7%AF%87(1)/%E7%9B%91%E5%90%AC.png" alt="监听"></p><p>打开ida,远程调试参数设置</p><p><img src="/../img/ios%E5%AD%A6%E4%B9%A0%E7%AF%87(1)/ip%E8%AE%BE%E7%BD%AE.png" alt="ip设置"></p><p>那个hostname填的是你手机的ip地址，跟上面的相反</p><p>连上后再用attach process输入刚才获取的程序PID，进行附加</p><p><img src="/../img/ios%E5%AD%A6%E4%B9%A0%E7%AF%87(1)/%E7%AB%AF%E5%8F%A3%E8%AE%BE%E7%BD%AE.png" alt="端口设置"></p><p>要慢慢wait，等待各种函数加载好，这样就可以正常调试了，我们在刚才那个分析的判断函数下断个断点</p><p><img src="/../img/ios%E5%AD%A6%E4%B9%A0%E7%AF%87(1)/%E4%B8%8B%E6%96%AD%E7%82%B9.png" alt="下断点"></p><p>点进v32</p><p><img src="/../img/ios%E5%AD%A6%E4%B9%A0%E7%AF%87(1)/%E5%9C%B0%E5%9D%80.png" alt="地址"></p><p>一个地址，再进去</p><p><img src="/../img/ios%E5%AD%A6%E4%B9%A0%E7%AF%87(1)/flag.png" alt="flag"></p><p>下面就是我们的flag啦</p><p>输入我们的app进行验证</p><p><img src="/../img/ios%E5%AD%A6%E4%B9%A0%E7%AF%87(1)/%E9%AA%8C%E8%AF%81%E6%88%90%E5%8A%9F.png" alt="验证成功"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;ios学习篇-1&quot;&gt;&lt;a href=&quot;#ios学习篇-1&quot; class=&quot;headerlink&quot; title=&quot;ios学习篇(1)&quot;&gt;&lt;/a&gt;ios学习篇(1)&lt;/h1&gt;&lt;h2 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; ti</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>反混淆学习-fla控制流平坦化篇</title>
    <link href="https://straw-233.github.io/2024/03/27/%E5%8F%8D%E6%B7%B7%E6%B7%86%E5%AD%A6%E4%B9%A0-fla%E7%AF%87/"/>
    <id>https://straw-233.github.io/2024/03/27/%E5%8F%8D%E6%B7%B7%E6%B7%86%E5%AD%A6%E4%B9%A0-fla%E7%AF%87/</id>
    <published>2024-03-27T13:23:15.049Z</published>
    <updated>2024-03-27T13:43:28.160Z</updated>
    
    <content type="html"><![CDATA[<h1 id="反混淆学习-fla控制流平坦化篇"><a href="#反混淆学习-fla控制流平坦化篇" class="headerlink" title="反混淆学习-fla控制流平坦化篇"></a>反混淆学习-fla控制流平坦化篇</h1><p>感觉反混淆比混淆难多了。。。</p><p>现在也暂时不会怎么自己写ida-python脚本来反混淆</p><p>还是先学学看吧</p><h2 id="deflat工具介绍"><a href="#deflat工具介绍" class="headerlink" title="deflat工具介绍"></a>deflat工具介绍</h2><p>网上常用的反控制流平坦化的工具，可以直接在终端运行将经过fla编译的可执行文件转化为反混淆过的可执行文件，也支持arm架构。</p><p>下载地址：<a href="https://github.com/cq674350529/deflat">deflat: use angr to deobfuscation </a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ python deflat.py --file 文件名 --addr 初始地址</span><br></pre></td></tr></table></figure><p>需要一个python的angr库</p><p>因为要用到初始地址，所以就要求你的可执行文件没开PIE（随机地址）保护</p><p>（要求还挺苛刻的，估计只有比赛值得一用，实战估计全是保护全开，优点就是常用架构都能用）</p><h2 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h2><p>自己先用编译一个保护全关的经过fla过的文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">opt -lowerswitch -S IR/TestProgram.ll -o IR/TestProgram_lowerswitch.ll</span><br><span class="line">opt -load ../Build/LLVMObfuscator.so -fla -S -enable-new-pm=0 IR/TestProgram_lowerswitch.ll -o IR/TestProgram_fla.ll</span><br><span class="line">clang IR/TestProgram_fla.ll -o Bin/TestProgram_fla -fno-stack-protector -z execstack -no-pie</span><br></pre></td></tr></table></figure><p><img src="/../img/%E5%8F%8D%E6%B7%B7%E6%B7%86%E5%AD%A6%E4%B9%A0-fla%E6%8E%A7%E5%88%B6%E6%B5%81%E5%B9%B3%E5%9D%A6%E5%8C%96%E7%AF%87/image-20240327201723919.png" alt="image-20240327201723919"></p><p>用ida看看，很常规的控制流平坦化</p><p><img src="/../img/%E5%8F%8D%E6%B7%B7%E6%B7%86%E5%AD%A6%E4%B9%A0-fla%E6%8E%A7%E5%88%B6%E6%B5%81%E5%B9%B3%E5%9D%A6%E5%8C%96%E7%AF%87/image-20240327201828945.png" alt="image-20240327201828945"></p><p>用工具转化一下，得到了个TestProgram_fla_unprotect_recovered文件</p><p><img src="/../img/%E5%8F%8D%E6%B7%B7%E6%B7%86%E5%AD%A6%E4%B9%A0-fla%E6%8E%A7%E5%88%B6%E6%B5%81%E5%B9%B3%E5%9D%A6%E5%8C%96%E7%AF%87/image-20240327202021043.png" alt="image-20240327202021043"></p><p>确实反混淆了，效果不错</p><p><img src="/../img/%E5%8F%8D%E6%B7%B7%E6%B7%86%E5%AD%A6%E4%B9%A0-fla%E6%8E%A7%E5%88%B6%E6%B5%81%E5%B9%B3%E5%9D%A6%E5%8C%96%E7%AF%87/image-20240327202141816.png" alt="image-20240327202141816"></p><p>这下面有一堆nop看来是把一些跳转指令全去了，并进行了补全</p><h2 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h2><p>详细学习太复杂，简单概述一下大概流程</p><h3 id="主函数"><a href="#主函数" class="headerlink" title="主函数"></a>主函数</h3><p>引入：</p><ol><li>函数的开始地址为序言的地址</li><li>序言的后继为主分发器</li><li>后继为主分发器的块为预处理器</li><li>后继为预处理器的块为真实块</li><li>无后继的块为返回块</li><li>剩下的为无用块</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    parser = argparse.ArgumentParser(description=<span class="string">&quot;deflat control flow script&quot;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&quot;-f&quot;</span>, <span class="string">&quot;--file&quot;</span>, <span class="built_in">help</span>=<span class="string">&quot;binary to analyze&quot;</span>)</span><br><span class="line">    parser.add_argument(</span><br><span class="line">        <span class="string">&quot;--addr&quot;</span>, <span class="built_in">help</span>=<span class="string">&quot;address of target function in hex format&quot;</span>)</span><br><span class="line">    args = parser.parse_args()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> args.file <span class="keyword">is</span> <span class="literal">None</span> <span class="keyword">or</span> args.addr <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        parser.print_help()</span><br><span class="line">        sys.exit(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    filename = args.file</span><br><span class="line">    start = <span class="built_in">int</span>(args.addr, <span class="number">16</span>)</span><br><span class="line"></span><br><span class="line">    project = angr.Project(filename, load_options=&#123;<span class="string">&#x27;auto_load_libs&#x27;</span>: <span class="literal">False</span>&#125;)</span><br><span class="line">    <span class="comment"># do normalize to avoid overlapping blocks, disable force_complete_scan to avoid possible &quot;wrong&quot; blocks</span></span><br><span class="line">    <span class="comment"># 获取控制流</span></span><br><span class="line">    cfg = project.analyses.CFGFast(normalize=<span class="literal">True</span>, force_complete_scan=<span class="literal">False</span>)</span><br><span class="line">    target_function = cfg.functions.get(start)</span><br><span class="line">    <span class="comment"># A super transition graph is a graph that looks like IDA Pro&#x27;s CFG</span></span><br><span class="line">    supergraph = am_graph.to_supergraph(target_function.transition_graph)</span><br><span class="line"></span><br><span class="line">    base_addr = project.loader.main_object.mapped_base &gt;&gt; <span class="number">12</span> &lt;&lt; <span class="number">12</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># get prologue_node and retn_node</span></span><br><span class="line">    <span class="comment"># 从控制流中获取返回块和序言</span></span><br><span class="line">    prologue_node = <span class="literal">None</span></span><br><span class="line">    <span class="keyword">for</span> node <span class="keyword">in</span> supergraph.nodes():</span><br><span class="line">        <span class="keyword">if</span> supergraph.in_degree(node) == <span class="number">0</span>:</span><br><span class="line">            prologue_node = node</span><br><span class="line">        <span class="keyword">if</span> supergraph.out_degree(node) == <span class="number">0</span> <span class="keyword">and</span> <span class="built_in">len</span>(node.out_branches) == <span class="number">0</span>:</span><br><span class="line">            retn_node = node</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> prologue_node <span class="keyword">is</span> <span class="literal">None</span> <span class="keyword">or</span> prologue_node.addr != start:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Something must be wrong...&quot;</span>)</span><br><span class="line">        sys.exit(-<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 主分发器，successors包括了所有正常的后续list</span></span><br><span class="line">    main_dispatcher_node = <span class="built_in">list</span>(supergraph.successors(prologue_node))[<span class="number">0</span>]</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 找到预处理器</span></span><br><span class="line">    <span class="keyword">for</span> node <span class="keyword">in</span> supergraph.predecessors(main_dispatcher_node):</span><br><span class="line">        <span class="keyword">if</span> node.addr != prologue_node.addr:</span><br><span class="line">            pre_dispatcher_node = node</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"><span class="comment"># 找到真实块和预处理块（虚假块）</span></span><br><span class="line">    relevant_nodes, nop_nodes = get_relevant_nop_nodes(</span><br><span class="line">        supergraph, pre_dispatcher_node, prologue_node, retn_node)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;*******************relevant blocks************************&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;prologue: %#x&#x27;</span> % start)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;main_dispatcher: %#x&#x27;</span> % main_dispatcher_node.addr)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;pre_dispatcher: %#x&#x27;</span> % pre_dispatcher_node.addr)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;retn: %#x&#x27;</span> % retn_node.addr)</span><br><span class="line">    relevant_block_addrs = [node.addr <span class="keyword">for</span> node <span class="keyword">in</span> relevant_nodes]</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;relevant_blocks:&#x27;</span>, [<span class="built_in">hex</span>(addr) <span class="keyword">for</span> addr <span class="keyword">in</span> relevant_block_addrs])</span><br><span class="line"><span class="comment"># 打印相关块信息</span></span><br><span class="line">    </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;*******************symbolic execution*********************&#x27;</span>)</span><br><span class="line">    relevants = relevant_nodes</span><br><span class="line">    relevants.append(prologue_node)</span><br><span class="line">    relevants_without_retn = <span class="built_in">list</span>(relevants)</span><br><span class="line">    relevants.append(retn_node)</span><br><span class="line">    relevant_block_addrs.extend([prologue_node.addr, retn_node.addr])</span><br><span class="line"></span><br><span class="line">    flow = defaultdict(<span class="built_in">list</span>)</span><br><span class="line">    patch_instrs = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> relevant <span class="keyword">in</span> relevants_without_retn:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;-------------------dse %#x---------------------&#x27;</span> % relevant.addr)</span><br><span class="line">        block = project.factory.block(relevant.addr, size=relevant.size)</span><br><span class="line">        has_branches = <span class="literal">False</span></span><br><span class="line">        hook_addrs = <span class="built_in">set</span>([])</span><br><span class="line">        <span class="keyword">for</span> ins <span class="keyword">in</span> block.capstone.insns:</span><br><span class="line">            <span class="comment"># 不同架构的区分</span></span><br><span class="line">            <span class="keyword">if</span> project.arch.name <span class="keyword">in</span> ARCH_X86:</span><br><span class="line">                <span class="comment"># 判断该真实块是否存在分支</span></span><br><span class="line">                <span class="keyword">if</span> ins.insn.mnemonic.startswith(<span class="string">&#x27;cmov&#x27;</span>):</span><br><span class="line">                    <span class="comment"># only record the first one</span></span><br><span class="line">                    <span class="keyword">if</span> relevant <span class="keyword">not</span> <span class="keyword">in</span> patch_instrs:</span><br><span class="line">                        patch_instrs[relevant] = ins</span><br><span class="line">                        has_branches = <span class="literal">True</span></span><br><span class="line">                <span class="comment"># call指令对angr没影响，直接hook</span></span><br><span class="line">                <span class="keyword">elif</span> ins.insn.mnemonic.startswith(<span class="string">&#x27;call&#x27;</span>):</span><br><span class="line">                    hook_addrs.add(ins.insn.address)</span><br><span class="line">            <span class="keyword">elif</span> project.arch.name <span class="keyword">in</span> ARCH_ARM:</span><br><span class="line">                <span class="keyword">if</span> ins.insn.mnemonic != <span class="string">&#x27;mov&#x27;</span> <span class="keyword">and</span> ins.insn.mnemonic.startswith(<span class="string">&#x27;mov&#x27;</span>):</span><br><span class="line">                    <span class="keyword">if</span> relevant <span class="keyword">not</span> <span class="keyword">in</span> patch_instrs:</span><br><span class="line">                        patch_instrs[relevant] = ins</span><br><span class="line">                        has_branches = <span class="literal">True</span></span><br><span class="line">                <span class="keyword">elif</span> ins.insn.mnemonic <span class="keyword">in</span> &#123;<span class="string">&#x27;bl&#x27;</span>, <span class="string">&#x27;blx&#x27;</span>&#125;:</span><br><span class="line">                    hook_addrs.add(ins.insn.address)</span><br><span class="line">            <span class="keyword">elif</span> project.arch.name <span class="keyword">in</span> ARCH_ARM64:</span><br><span class="line">                <span class="keyword">if</span> ins.insn.mnemonic.startswith(<span class="string">&#x27;cset&#x27;</span>):</span><br><span class="line">                    <span class="keyword">if</span> relevant <span class="keyword">not</span> <span class="keyword">in</span> patch_instrs:</span><br><span class="line">                        patch_instrs[relevant] = ins</span><br><span class="line">                        has_branches = <span class="literal">True</span></span><br><span class="line">                <span class="keyword">elif</span> ins.insn.mnemonic <span class="keyword">in</span> &#123;<span class="string">&#x27;bl&#x27;</span>, <span class="string">&#x27;blr&#x27;</span>&#125;:</span><br><span class="line">                    hook_addrs.add(ins.insn.address)</span><br><span class="line">                    </span><br><span class="line">        <span class="comment"># angr符号执行，对于两个分支的进行模拟，获取后续节点  </span></span><br><span class="line">        <span class="keyword">if</span> has_branches:</span><br><span class="line">            tmp_addr = symbolic_execution(project, relevant_block_addrs,</span><br><span class="line">                                                     relevant.addr, hook_addrs, claripy.BVV(<span class="number">1</span>, <span class="number">1</span>), <span class="literal">True</span>)</span><br><span class="line">            <span class="keyword">if</span> tmp_addr <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">                flow[relevant].append(tmp_addr)</span><br><span class="line">            tmp_addr = symbolic_execution(project, relevant_block_addrs,</span><br><span class="line">                                                     relevant.addr, hook_addrs, claripy.BVV(<span class="number">0</span>, <span class="number">1</span>), <span class="literal">True</span>)</span><br><span class="line">            <span class="keyword">if</span> tmp_addr <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">                flow[relevant].append(tmp_addr)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            tmp_addr = symbolic_execution(project, relevant_block_addrs,</span><br><span class="line">                                                     relevant.addr, hook_addrs)</span><br><span class="line">            <span class="keyword">if</span> tmp_addr <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">                flow[relevant].append(tmp_addr)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;************************flow******************************&#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> k, v <span class="keyword">in</span> flow.items():</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;%#x: &#x27;</span> % k.addr, [<span class="built_in">hex</span>(child) <span class="keyword">for</span> child <span class="keyword">in</span> v])</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;%#x: &#x27;</span> % retn_node.addr, [])</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;************************patch*****************************&#x27;</span>)</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(filename, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> origin:</span><br><span class="line">        <span class="comment"># Attention: can&#x27;t transform to str by calling decode() directly. so use bytearray instead.</span></span><br><span class="line">        origin_data = <span class="built_in">bytearray</span>(origin.read())</span><br><span class="line">        origin_data_len = <span class="built_in">len</span>(origin_data)</span><br><span class="line">        <span class="comment"># 打开文件，记录长度</span></span><br><span class="line"></span><br><span class="line">    recovery_file = filename + <span class="string">&#x27;_recovered&#x27;</span></span><br><span class="line">    recovery = <span class="built_in">open</span>(recovery_file, <span class="string">&#x27;wb&#x27;</span>)</span><br><span class="line">    <span class="comment"># 重命名为_recovered文件并重新打开</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># patch irrelevant blocks</span></span><br><span class="line">    <span class="keyword">for</span> nop_node <span class="keyword">in</span> nop_nodes:</span><br><span class="line">        fill_nop(origin_data, nop_node.addr-base_addr,</span><br><span class="line">                 nop_node.size, project.arch)</span><br><span class="line">    <span class="comment"># 如果在nop列表中全nop了</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># remove unnecessary control flows</span></span><br><span class="line">    <span class="keyword">for</span> parent, childs <span class="keyword">in</span> flow.items():</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(childs) == <span class="number">1</span>:</span><br><span class="line">            <span class="comment"># 子节点为1的操作</span></span><br><span class="line">            parent_block = project.factory.block(parent.addr, size=parent.size)</span><br><span class="line">            last_instr = parent_block.capstone.insns[-<span class="number">1</span>]</span><br><span class="line">            file_offset = last_instr.address - base_addr</span><br><span class="line">            <span class="comment"># patch the last instruction to jmp</span></span><br><span class="line">            <span class="keyword">if</span> project.arch.name <span class="keyword">in</span> ARCH_X86:</span><br><span class="line">                fill_nop(origin_data, file_offset,</span><br><span class="line">                         last_instr.size, project.arch)</span><br><span class="line">                patch_value = ins_j_jmp_hex_x86(last_instr.address, childs[<span class="number">0</span>], <span class="string">&#x27;jmp&#x27;</span>)</span><br><span class="line">            <span class="keyword">elif</span> project.arch.name <span class="keyword">in</span> ARCH_ARM:</span><br><span class="line">                patch_value = ins_b_jmp_hex_arm(last_instr.address, childs[<span class="number">0</span>], <span class="string">&#x27;b&#x27;</span>)</span><br><span class="line">                <span class="keyword">if</span> project.arch.memory_endness == <span class="string">&quot;Iend_BE&quot;</span>:</span><br><span class="line">                    patch_value = patch_value[::-<span class="number">1</span>]</span><br><span class="line">            <span class="keyword">elif</span> project.arch.name <span class="keyword">in</span> ARCH_ARM64:</span><br><span class="line">                <span class="comment"># <span class="doctag">FIXME:</span> For aarch64/arm64, the last instruction of prologue seems useful in some cases, so patch the next instruction instead.</span></span><br><span class="line">                <span class="keyword">if</span> parent.addr == start:</span><br><span class="line">                    file_offset += <span class="number">4</span></span><br><span class="line">                    patch_value = ins_b_jmp_hex_arm64(last_instr.address+<span class="number">4</span>, childs[<span class="number">0</span>], <span class="string">&#x27;b&#x27;</span>)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    patch_value = ins_b_jmp_hex_arm64(last_instr.address, childs[<span class="number">0</span>], <span class="string">&#x27;b&#x27;</span>)</span><br><span class="line">                <span class="keyword">if</span> project.arch.memory_endness == <span class="string">&quot;Iend_BE&quot;</span>:</span><br><span class="line">                    patch_value = patch_value[::-<span class="number">1</span>]</span><br><span class="line">            patch_instruction(origin_data, file_offset, patch_value)</span><br><span class="line">            <span class="comment"># 针对不同架构将父节点的最后一条指令修补为跳转至子节点的跳转指令</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># 子节点多个的操作</span></span><br><span class="line">            instr = patch_instrs[parent]</span><br><span class="line">            file_offset = instr.address - base_addr</span><br><span class="line">            <span class="comment"># patch instructions starting from `cmovx` to the end of block</span></span><br><span class="line">            fill_nop(origin_data, file_offset, parent.addr +</span><br><span class="line">                     parent.size - base_addr - file_offset, project.arch)</span><br><span class="line">            <span class="keyword">if</span> project.arch.name <span class="keyword">in</span> ARCH_X86:</span><br><span class="line">                <span class="comment"># patch the cmovx instruction to jx instruction</span></span><br><span class="line">                patch_value = ins_j_jmp_hex_x86(instr.address, childs[<span class="number">0</span>], instr.mnemonic[<span class="built_in">len</span>(<span class="string">&#x27;cmov&#x27;</span>):])</span><br><span class="line">                patch_instruction(origin_data, file_offset, patch_value)</span><br><span class="line"></span><br><span class="line">                file_offset += <span class="number">6</span></span><br><span class="line">                <span class="comment"># patch the next instruction to jmp instrcution</span></span><br><span class="line">                patch_value = ins_j_jmp_hex_x86(instr.address+<span class="number">6</span>, childs[<span class="number">1</span>], <span class="string">&#x27;jmp&#x27;</span>)</span><br><span class="line">                patch_instruction(origin_data, file_offset, patch_value)</span><br><span class="line">            <span class="keyword">elif</span> project.arch.name <span class="keyword">in</span> ARCH_ARM:</span><br><span class="line">                <span class="comment"># patch the movx instruction to bx instruction</span></span><br><span class="line">                bx_cond = <span class="string">&#x27;b&#x27;</span> + instr.mnemonic[<span class="built_in">len</span>(<span class="string">&#x27;mov&#x27;</span>):]</span><br><span class="line">                patch_value = ins_b_jmp_hex_arm(instr.address, childs[<span class="number">0</span>], bx_cond)</span><br><span class="line">                <span class="keyword">if</span> project.arch.memory_endness == <span class="string">&#x27;Iend_BE&#x27;</span>:</span><br><span class="line">                    patch_value = patch_value[::-<span class="number">1</span>]</span><br><span class="line">                patch_instruction(origin_data, file_offset, patch_value)</span><br><span class="line"></span><br><span class="line">                file_offset += <span class="number">4</span></span><br><span class="line">                <span class="comment"># patch the next instruction to b instrcution</span></span><br><span class="line">                patch_value = ins_b_jmp_hex_arm(instr.address+<span class="number">4</span>, childs[<span class="number">1</span>], <span class="string">&#x27;b&#x27;</span>)</span><br><span class="line">                <span class="keyword">if</span> project.arch.memory_endness == <span class="string">&#x27;Iend_BE&#x27;</span>:</span><br><span class="line">                    patch_value = patch_value[::-<span class="number">1</span>]</span><br><span class="line">                patch_instruction(origin_data, file_offset, patch_value)</span><br><span class="line">            <span class="keyword">elif</span> project.arch.name <span class="keyword">in</span> ARCH_ARM64:</span><br><span class="line">                <span class="comment"># patch the cset.xx instruction to bx instruction</span></span><br><span class="line">                bx_cond = instr.op_str.split(<span class="string">&#x27;,&#x27;</span>)[-<span class="number">1</span>].strip()</span><br><span class="line">                patch_value = ins_b_jmp_hex_arm64(instr.address, childs[<span class="number">0</span>], bx_cond)</span><br><span class="line">                <span class="keyword">if</span> project.arch.memory_endness == <span class="string">&#x27;Iend_BE&#x27;</span>:</span><br><span class="line">                    patch_value = patch_value[::-<span class="number">1</span>]</span><br><span class="line">                patch_instruction(origin_data, file_offset, patch_value)</span><br><span class="line"></span><br><span class="line">                file_offset += <span class="number">4</span></span><br><span class="line">                <span class="comment"># patch the next instruction to b instruction</span></span><br><span class="line">                patch_value = ins_b_jmp_hex_arm64(instr.address+<span class="number">4</span>, childs[<span class="number">1</span>], <span class="string">&#x27;b&#x27;</span>)</span><br><span class="line">                <span class="keyword">if</span> project.arch.memory_endness == <span class="string">&#x27;Iend_BE&#x27;</span>:</span><br><span class="line">                    patch_value = patch_value[::-<span class="number">1</span>]</span><br><span class="line">                patch_instruction(origin_data, file_offset, patch_value)</span><br><span class="line">                <span class="comment">#如果存在多个子节点，则需要进行更复杂的修补。对于x86架构，需要修改条件传送指令（如cmovx）为条件跳转指令（如jx）。对于ARM和ARM64架构，需要修改指令为条件跳转指令（如bx、b）</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">len</span>(origin_data) == origin_data_len, <span class="string">&quot;Error: size of data changed!!!&quot;</span></span><br><span class="line">    <span class="comment">#确保修复前后长度相同</span></span><br><span class="line">    recovery.write(origin_data)</span><br><span class="line">    recovery.close()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Successful! The recovered file: %s&#x27;</span> % recovery_file)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="获取与控制流相关的NOP节点"><a href="#获取与控制流相关的NOP节点" class="headerlink" title="获取与控制流相关的NOP节点"></a>获取与控制流相关的NOP节点</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">get_relevant_nop_nodes</span>(<span class="params">supergraph, pre_dispatcher_node, prologue_node, retn_node</span>):</span><br><span class="line">    <span class="comment"># relevant_nodes = list(supergraph.predecessors(pre_dispatcher_node))</span></span><br><span class="line">    relevant_nodes = []</span><br><span class="line">    nop_nodes = []</span><br><span class="line">    <span class="keyword">for</span> node <span class="keyword">in</span> supergraph.nodes():</span><br><span class="line">        <span class="comment">#使用块字节大小，来判断是否为真实块</span></span><br><span class="line">        <span class="keyword">if</span> supergraph.has_edge(node, pre_dispatcher_node) <span class="keyword">and</span> node.size &gt; <span class="number">8</span>:</span><br><span class="line">            <span class="comment"># <span class="doctag">XXX:</span> use node.size is faster than to create a block</span></span><br><span class="line">            relevant_nodes.append(node)</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="comment">#排除序言，返回块，预处理器</span></span><br><span class="line">        <span class="keyword">if</span> node.addr <span class="keyword">in</span> (prologue_node.addr, retn_node.addr, pre_dispatcher_node.addr):</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        nop_nodes.append(node)</span><br><span class="line">        <span class="comment">#其余都加入nop</span></span><br><span class="line">    <span class="keyword">return</span> relevant_nodes, nop_nodes</span><br></pre></td></tr></table></figure><h3 id="在给定的起始地址处执行符号执行"><a href="#在给定的起始地址处执行符号执行" class="headerlink" title="在给定的起始地址处执行符号执行"></a>在给定的起始地址处执行符号执行</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">symbolic_execution</span>(<span class="params">project, relevant_block_addrs, start_addr, hook_addrs=<span class="literal">None</span>, modify_value=<span class="literal">None</span>, inspect=<span class="literal">False</span></span>):</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#从状态中获取当前指令指针的值，并解除指定地址的挂钩</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">retn_procedure</span>(<span class="params">state</span>):</span><br><span class="line">        ip = state.solver.<span class="built_in">eval</span>(state.regs.ip)</span><br><span class="line">        project.unhook(ip)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    <span class="comment"># 检查语句</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">statement_inspect</span>(<span class="params">state</span>):</span><br><span class="line">        expressions = <span class="built_in">list</span>(</span><br><span class="line">            state.scratch.irsb.statements[state.inspect.statement].expressions)</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(expressions) != <span class="number">0</span> <span class="keyword">and</span> <span class="built_in">isinstance</span>(expressions[<span class="number">0</span>], pyvex.expr.ITE):</span><br><span class="line">            state.scratch.temps[expressions[<span class="number">0</span>].cond.tmp] = modify_value</span><br><span class="line">            state.inspect._breakpoints[<span class="string">&#x27;statement&#x27;</span>] = []</span><br><span class="line"><span class="comment"># 检查挂钩</span></span><br><span class="line">    <span class="keyword">if</span> hook_addrs <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">        skip_length = <span class="number">4</span></span><br><span class="line">        <span class="keyword">if</span> project.arch.name <span class="keyword">in</span> ARCH_X86:</span><br><span class="line">            skip_length = <span class="number">5</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> hook_addr <span class="keyword">in</span> hook_addrs:</span><br><span class="line">            project.hook(hook_addr, retn_procedure, length=skip_length)</span><br><span class="line"></span><br><span class="line">    state = project.factory.blank_state(addr=start_addr, remove_options=&#123;</span><br><span class="line">                                        angr.sim_options.LAZY_SOLVES&#125;)</span><br><span class="line">    <span class="keyword">if</span> inspect:</span><br><span class="line">        state.inspect.b(</span><br><span class="line">            <span class="string">&#x27;statement&#x27;</span>, when=angr.state_plugins.inspect.BP_BEFORE, action=statement_inspect)</span><br><span class="line">    sm = project.factory.simulation_manager(state)</span><br><span class="line">    sm.step()</span><br><span class="line">    <span class="keyword">while</span> <span class="built_in">len</span>(sm.active) &gt; <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">for</span> active_state <span class="keyword">in</span> sm.active:</span><br><span class="line">            <span class="keyword">if</span> active_state.addr <span class="keyword">in</span> relevant_block_addrs:</span><br><span class="line">                <span class="keyword">return</span> active_state.addr</span><br><span class="line">        sm.step()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">None</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;反混淆学习-fla控制流平坦化篇&quot;&gt;&lt;a href=&quot;#反混淆学习-fla控制流平坦化篇&quot; class=&quot;headerlink&quot; title=&quot;反混淆学习-fla控制流平坦化篇&quot;&gt;&lt;/a&gt;反混淆学习-fla控制流平坦化篇&lt;/h1&gt;&lt;p&gt;感觉反混淆比混淆难多了。。。</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>OLLVM-常量替代</title>
    <link href="https://straw-233.github.io/2024/03/20/OLLVM-%E5%B8%B8%E9%87%8F%E6%9B%BF%E4%BB%A3/"/>
    <id>https://straw-233.github.io/2024/03/20/OLLVM-%E5%B8%B8%E9%87%8F%E6%9B%BF%E4%BB%A3/</id>
    <published>2024-03-20T10:43:21.967Z</published>
    <updated>2024-03-20T10:47:12.016Z</updated>
    
    <content type="html"><![CDATA[<h1 id="OLLVM-常量替代"><a href="#OLLVM-常量替代" class="headerlink" title="OLLVM-常量替代"></a>OLLVM-常量替代</h1><p>感觉跟指令替代类似，仅支持32位整数替代</p><p>（建议结合代码食用）</p><h2 id="替换方案"><a href="#替换方案" class="headerlink" title="替换方案"></a>替换方案</h2><p><img src="/../img/OLLVM%E5%B8%B8%E9%87%8F%E6%9B%BF%E4%BB%A3/%E6%9B%BF%E4%BB%A3%E6%96%B9%E6%A1%88.png" alt="替换方案"></p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>ConstantSubstitution.cpp</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;llvm/IR/Function.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;llvm/Pass.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;llvm/IR/LegacyPassManager.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;llvm/Transforms/IPO/PassManagerBuilder.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;llvm/Support/raw_ostream.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;llvm/IR/Instructions.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;llvm/Transforms/Utils.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;llvm/Support/CommandLine.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;llvm/Transforms/Utils/Local.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;SplitBasicBlock.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Utils.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAX_RAND 32767</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> NUMBER_CONST_SUBST 2</span></span><br><span class="line">using namespace llvm;</span><br><span class="line">using <span class="built_in">std</span>::<span class="built_in">vector</span>;</span><br><span class="line"><span class="type">static</span> cl::opt&lt;<span class="type">int</span>&gt; <span class="title function_">obfuTimes</span><span class="params">(<span class="string">&quot;csub_loop&quot;</span>,cl::init(<span class="number">1</span>),cl::desc(<span class="string">&quot;Obfucase a function &lt;obfu_loop&gt; time(s).&quot;</span>))</span>;</span><br><span class="line">namespace&#123;</span><br><span class="line">        <span class="class"><span class="keyword">class</span> <span class="title">ConstantSubstitution</span> :</span>public FunctionPass&#123;</span><br><span class="line">        public :</span><br><span class="line">            <span class="type">static</span> <span class="type">char</span> ID;</span><br><span class="line">            </span><br><span class="line">            ConstantSubstitution():FunctionPass(ID)&#123;</span><br><span class="line">                srand(time(<span class="literal">NULL</span>));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">bool</span> <span class="title function_">runOnFunction</span><span class="params">(Function &amp;F)</span>;</span><br><span class="line">            <span class="type">void</span> <span class="title function_">substitute</span><span class="params">(BinaryOperator *BI)</span>;</span><br><span class="line">            <span class="type">void</span> <span class="title function_">linearSubstitute</span><span class="params">(BinaryOperator *BI,<span class="type">int</span> i)</span>;</span><br><span class="line">            <span class="type">void</span> <span class="title function_">bitwiseSubstitute</span><span class="params">(BinaryOperator *BI,<span class="type">int</span> i)</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">bool</span> <span class="title function_">ConstantSubstitution::runOnFunction</span><span class="params">(Function &amp;F)</span>&#123;</span><br><span class="line">    INIT_CONTEXT(F);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;obfuTimes;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(BasicBlock &amp;BB:F)&#123;</span><br><span class="line">            <span class="built_in">vector</span>&lt;Instruction*&gt;origInst;</span><br><span class="line">            <span class="keyword">for</span>(Instruction &amp;I:BB)&#123;</span><br><span class="line">                origInst.push_back(&amp;I);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span>(Instruction *I:origInst)&#123; <span class="comment">//遍历所有指令</span></span><br><span class="line">                <span class="keyword">if</span>(BinaryOperator *BI=dyn_cast&lt;BinaryOperator&gt;(I))&#123;<span class="comment">//判断是不是二元运算指令</span></span><br><span class="line">                    <span class="keyword">if</span>(BI-&gt;getType()-&gt;isIntegerTy(<span class="number">32</span>))&#123;<span class="comment">//仅对整数进行替换</span></span><br><span class="line">                        substitute(BI);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">ConstantSubstitution::substitute</span><span class="params">(BinaryOperator *BI)</span>&#123;</span><br><span class="line">    <span class="type">int</span> operandNum =BI -&gt;getNumOperands();</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;operandNum;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(isa&lt;ConstantInt&gt;(BI-&gt;getOperand(i)))&#123;</span><br><span class="line">            <span class="type">int</span> choice =rand()%NUMBER_CONST_SUBST;</span><br><span class="line">            <span class="keyword">switch</span> (choice)</span><br><span class="line">            &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">                linearSubstitute(BI,i); <span class="comment">// 线性替换</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                bitwiseSubstitute(BI,i);</span><br><span class="line">                <span class="comment">// bitwiseSubstitute(BI,i); // 按位运算替换</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">ConstantSubstitution::linearSubstitute</span><span class="params">(BinaryOperator *BI,<span class="type">int</span> i)</span>&#123;</span><br><span class="line">    <span class="comment">//线性替换 :Val -&gt; ax+by+c</span></span><br><span class="line">    <span class="comment">//其中 val 为原常量 a, b 为随机常量 x, y 为随机全局变量 c = val - (ax + by)</span></span><br><span class="line">    Module *M=BI-&gt;getModule();</span><br><span class="line">    <span class="comment">//指定模块</span></span><br><span class="line">    ConstantInt *val=cast&lt;ConstantInt&gt;(BI-&gt;getOperand(i));</span><br><span class="line">    <span class="comment">//获取原来的操作数</span></span><br><span class="line">    <span class="type">int</span> randx=rand()%MAX_RAND,randy=rand()%MAX_RAND;</span><br><span class="line">    <span class="comment">//创建随机数x,y</span></span><br><span class="line">    <span class="type">int</span> randa=rand()%MAX_RAND,randb=rand()%MAX_RAND;</span><br><span class="line">    <span class="comment">//创建随机数a,b</span></span><br><span class="line">    APInt c = val-&gt;getValue()-(randx*randa+randy*randb);</span><br><span class="line">    <span class="comment">//c=val-(ax+by)</span></span><br><span class="line">    GlobalVariable *xptr=new GlobalVariable(*M,TYPE_I32,<span class="literal">false</span>,GlobalValue::PrivateLinkage,CONST_I32(randx),<span class="string">&quot;x&quot;</span>);</span><br><span class="line">    <span class="comment">//创建x全局变量</span></span><br><span class="line">    <span class="comment">//commonLinkage 是未初始化的全局变量，初始值只能为0，不能为其他值。这里我们设置的初始值x不能是0，所以不能设置成commonlinkage</span></span><br><span class="line">    GlobalVariable *yptr=new GlobalVariable(*M,TYPE_I32,<span class="literal">false</span>,GlobalValue::PrivateLinkage,CONST_I32(randy),<span class="string">&quot;y&quot;</span>);</span><br><span class="line">    <span class="comment">//创建y全局变量</span></span><br><span class="line">    LoadInst *x=new LoadInst(TYPE_I32,xptr,<span class="string">&quot;&quot;</span>,BI);</span><br><span class="line">    <span class="comment">//读取x</span></span><br><span class="line">    LoadInst *y=new LoadInst(TYPE_I32,yptr,<span class="string">&quot;&quot;</span>,BI);</span><br><span class="line">    <span class="comment">//读取y</span></span><br><span class="line">    BinaryOperator *op1=BinaryOperator::CreateMul(CONST_I32(randa),x,<span class="string">&quot;&quot;</span>,BI);</span><br><span class="line">    <span class="comment">//ax</span></span><br><span class="line">    BinaryOperator *op2=BinaryOperator::CreateMul(CONST_I32(randb),y,<span class="string">&quot;&quot;</span>,BI);</span><br><span class="line">    <span class="comment">//by</span></span><br><span class="line">    BinaryOperator *op3=BinaryOperator::CreateAdd(op1,op2,<span class="string">&quot;&quot;</span>,BI);</span><br><span class="line">    <span class="comment">//ax+by</span></span><br><span class="line">    BinaryOperator *op4=BinaryOperator::CreateAdd(op3,CONST_I32(c.getSExtValue()),<span class="string">&quot;&quot;</span>,BI);</span><br><span class="line">    <span class="comment">//ax+by+c</span></span><br><span class="line">    BI-&gt;setOperand(i,op4);</span><br><span class="line">   </span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">ConstantSubstitution::bitwiseSubstitute</span><span class="params">(BinaryOperator *BI,<span class="type">int</span> i)</span>&#123;</span><br><span class="line">    <span class="comment">//按位运算替换：val -&gt; (x &lt;&lt; 5 | y &gt;&gt; 3) ^ c</span></span><br><span class="line">    <span class="comment">//其中 val 为原常量x, y 为随机全局变量 c = val ^ (x &lt;&lt; 5 | y &gt;&gt; 3)</span></span><br><span class="line">    Module *M=BI-&gt;getModule();</span><br><span class="line">    <span class="comment">//指定模块</span></span><br><span class="line">    ConstantInt *val=cast&lt;ConstantInt&gt;(BI-&gt;getOperand(i));</span><br><span class="line">    <span class="comment">//获取原来的操作数</span></span><br><span class="line">    <span class="type">int</span> randx=rand()%MAX_RAND,randy=rand()%MAX_RAND;</span><br><span class="line">    <span class="comment">//随机数</span></span><br><span class="line">    APInt c = val-&gt;getValue()^(randx&lt;&lt;<span class="number">5</span>|randy&gt;&gt;<span class="number">3</span>);</span><br><span class="line">    <span class="comment">//c = val ^ (x &lt;&lt; 5 | y &gt;&gt; 3)</span></span><br><span class="line">    GlobalVariable *xptr=new GlobalVariable(*M,TYPE_I32,<span class="literal">false</span>,GlobalValue::PrivateLinkage,CONST_I32(randx),<span class="string">&quot;x&quot;</span>);   </span><br><span class="line">    <span class="comment">//创建x全局变量</span></span><br><span class="line">    <span class="comment">//commonLinkage 是未初始化的全局变量，初始值只能为0，不能为其他值。这里我们设置的初始值x不能是0，所以不能设置成commonlinkage</span></span><br><span class="line">    GlobalVariable *yptr=new GlobalVariable(*M,TYPE_I32,<span class="literal">false</span>,GlobalValue::PrivateLinkage,CONST_I32(randy),<span class="string">&quot;y&quot;</span>);</span><br><span class="line">    <span class="comment">//创建y全局变量 </span></span><br><span class="line">    LoadInst *x=new LoadInst(TYPE_I32,xptr,<span class="string">&quot;&quot;</span>,BI);</span><br><span class="line">    <span class="comment">//加载x</span></span><br><span class="line">    LoadInst *y=new LoadInst(TYPE_I32,yptr,<span class="string">&quot;&quot;</span>,BI);</span><br><span class="line">    <span class="comment">//加载y</span></span><br><span class="line">    BinaryOperator *op1=BinaryOperator::CreateShl(x,CONST_I32(<span class="number">5</span>),<span class="string">&quot;&quot;</span>,BI);</span><br><span class="line">    <span class="comment">//x&lt;&lt;5</span></span><br><span class="line">    BinaryOperator *op2=BinaryOperator::CreateLShr(y,CONST_I32(<span class="number">3</span>),<span class="string">&quot;&quot;</span>,BI);</span><br><span class="line">    <span class="comment">//y&gt;&gt;3</span></span><br><span class="line">    BinaryOperator *op3=BinaryOperator::CreateOr(op1,op2,<span class="string">&quot;&quot;</span>,BI);  </span><br><span class="line">    <span class="comment">//x&lt;&lt;5|y&gt;&gt;3</span></span><br><span class="line">    BinaryOperator *op4=BinaryOperator::CreateXor(op3,CONST_I32(c.getSExtValue()),<span class="string">&quot;&quot;</span>,BI);</span><br><span class="line">    <span class="comment">//c^(x&lt;&lt;5|y&gt;&gt;3)</span></span><br><span class="line">    BI-&gt;setOperand(i,op4);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">char</span> ConstantSubstitution::ID=<span class="number">0</span>;</span><br><span class="line"><span class="type">static</span> RegisterPass&lt;ConstantSubstitution&gt; <span class="title function_">X</span><span class="params">(<span class="string">&quot;csub&quot;</span>,<span class="string">&quot;Replace a constant value with equivalent instructions&quot;</span>)</span>; </span><br></pre></td></tr></table></figure><h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><p><img src="/../img/OLLVM%E5%B8%B8%E9%87%8F%E6%9B%BF%E4%BB%A3/%E6%95%88%E6%9E%9C1.png" alt="效果1"></p><p>用自己的题目编译混淆了一次，效果还行，试试三次的</p><p><img src="/../img/OLLVM%E5%B8%B8%E9%87%8F%E6%9B%BF%E4%BB%A3/%E6%95%88%E6%9E%9C2.png" alt="效果2"></p><p>爽了，妈妈再也不用担心我的tea加密被一眼看出来了</p><p><img src="/../img/%E4%BB%A4%E7%82%B9%E5%A4%B4.gif" alt="令点头"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;OLLVM-常量替代&quot;&gt;&lt;a href=&quot;#OLLVM-常量替代&quot; class=&quot;headerlink&quot; title=&quot;OLLVM-常量替代&quot;&gt;&lt;/a&gt;OLLVM-常量替代&lt;/h1&gt;&lt;p&gt;感觉跟指令替代类似，仅支持32位整数替代&lt;/p&gt;
&lt;p&gt;（建议结合代码食用）</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>OLLVM-随机控制流</title>
    <link href="https://straw-233.github.io/2024/03/19/OLLVM-%E9%9A%8F%E6%9C%BA%E6%8E%A7%E5%88%B6%E6%B5%81/"/>
    <id>https://straw-233.github.io/2024/03/19/OLLVM-%E9%9A%8F%E6%9C%BA%E6%8E%A7%E5%88%B6%E6%B5%81/</id>
    <published>2024-03-19T11:45:53.766Z</published>
    <updated>2024-03-19T11:49:56.760Z</updated>
    
    <content type="html"><![CDATA[<h1 id="OLLVM-随机控制流"><a href="#OLLVM-随机控制流" class="headerlink" title="OLLVM-随机控制流"></a>OLLVM-随机控制流</h1><p>感觉跟虚假控制流差不多，就是badyBB和cloneBB的定向跳转转到了随机跳转</p><p>(建议结合代码食用)</p><p><img src="/../img/%E5%B0%8F%E9%B8%A1%E8%B5%B0.gif" alt="小鸡走"></p><h2 id="第一步：基本块分割"><a href="#第一步：基本块分割" class="headerlink" title="第一步：基本块分割"></a>第一步：基本块分割</h2><p>与虚假控制流相同</p><h2 id="第二步：基本块克隆"><a href="#第二步：基本块克隆" class="headerlink" title="第二步：基本块克隆"></a>第二步：基本块克隆</h2><p><img src="/../img/OLLVM%E9%9A%8F%E6%9C%BA%E6%8E%A7%E5%88%B6%E6%B5%81/%E9%9A%8F%E6%9C%BA2.png" alt="随机2"></p><h2 id="第三步：构造随机跳转，插入生成随机数指令，插入随即跳转，对随机数进行恒等变换"><a href="#第三步：构造随机跳转，插入生成随机数指令，插入随即跳转，对随机数进行恒等变换" class="headerlink" title="第三步：构造随机跳转，插入生成随机数指令，插入随即跳转，对随机数进行恒等变换"></a>第三步：构造随机跳转，插入生成随机数指令，插入随即跳转，对随机数进行恒等变换</h2><p><img src="/../img/OLLVM%E9%9A%8F%E6%9C%BA%E6%8E%A7%E5%88%B6%E6%B5%81/%E9%9A%8F%E6%9C%BA3.png" alt="随机3"></p><h2 id="第四步：构造虚假随机数跳转"><a href="#第四步：构造虚假随机数跳转" class="headerlink" title="第四步：构造虚假随机数跳转"></a>第四步：构造虚假随机数跳转</h2><p><img src="/../img/OLLVM%E9%9A%8F%E6%9C%BA%E6%8E%A7%E5%88%B6%E6%B5%81/%E9%9A%8F%E6%9C%BA4.png" alt="随机4"></p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>RandomControlFlow.cpp</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;llvm/IR/Function.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;llvm/Pass.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;llvm/Support/raw_ostream.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;llvm/Support/CommandLine.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;llvm/Transforms/Utils/ValueMapper.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;llvm/Transforms/Utils/Cloning.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;llvm/IR/Module.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;llvm/IR/Instructions.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;SplitBasicBlock.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;llvm/IR/IRBuilder.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Utils.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ctime&gt;</span> </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;llvm/IR/Intrinsics.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;llvm/IR/IntrinsicsX86.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;RandomControlFlow.h&quot;</span></span></span><br><span class="line">using namespace llvm;</span><br><span class="line">using <span class="built_in">std</span>::<span class="built_in">vector</span>;</span><br><span class="line"><span class="type">static</span> cl::opt&lt;<span class="type">int</span>&gt;obfuTimes(<span class="string">&quot;rcf_loop&quot;</span>,cl::init(<span class="number">1</span>),cl::desc(<span class="string">&quot;Obfuscate a function &lt;bef_loop&gt;time(s).&quot;</span>));</span><br><span class="line">namespace&#123;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">RandomControlFlow</span>:</span> public FunctionPass&#123;</span><br><span class="line">        public:</span><br><span class="line">            <span class="type">static</span> <span class="type">char</span> ID;</span><br><span class="line">            RandomControlFlow():FunctionPass(ID)&#123;</span><br><span class="line">                srand(time(<span class="literal">NULL</span>));</span><br><span class="line">            &#125;</span><br><span class="line">            Value* <span class="title function_">alterVal</span><span class="params">(Value *origVar,BasicBlock *insertAfter)</span>;</span><br><span class="line">            <span class="comment">//对随机变量进行恒等变换</span></span><br><span class="line">            <span class="type">bool</span> <span class="title function_">runOnFunction</span><span class="params">(Function &amp;F)</span>;</span><br><span class="line">            <span class="type">void</span> <span class="title function_">insertRandomBranch</span><span class="params">(Value *randVar,BasicBlock *ifTrue,BasicBlock *ifFalse,BasicBlock *insertAfter)</span>;</span><br><span class="line">            <span class="comment">//插入随机跳转</span></span><br><span class="line">            <span class="type">bool</span> <span class="title function_">randcf</span><span class="params">(BasicBlock *entryBB)</span>;</span><br><span class="line">            <span class="comment">//对基本块进行混淆</span></span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">bool</span> <span class="title function_">RandomControlFlow::runOnFunction</span><span class="params">(Function &amp;F)</span>&#123;</span><br><span class="line">    INIT_CONTEXT(F);</span><br><span class="line">    FunctionPass *pass=createSplitBasicBlockPass();</span><br><span class="line">    pass-&gt;runOnFunction(F);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;obfuTimes;i++)&#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;BasicBlock*&gt;origBB;</span><br><span class="line">        <span class="keyword">for</span>(BasicBlock &amp;BB:F)&#123;</span><br><span class="line">            origBB.push_back(&amp;BB);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(BasicBlock *BB:origBB)&#123;</span><br><span class="line">            randcf(BB);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;&#125;</span><br><span class="line"><span class="comment">//以基本块为单位进行随机控制流混淆</span></span><br><span class="line"><span class="type">bool</span> <span class="title function_">RandomControlFlow::randcf</span><span class="params">(BasicBlock *entryBB)</span>&#123;</span><br><span class="line">    <span class="comment">//第一步 将基本块拆分</span></span><br><span class="line">    BasicBlock *bodyBB=entryBB-&gt;splitBasicBlock(entryBB-&gt;getFirstNonPHI(),<span class="string">&quot;bodyBB&quot;</span>);</span><br><span class="line">    <span class="comment">//拆分出bodyBB</span></span><br><span class="line">    BasicBlock *endBB=bodyBB-&gt;splitBasicBlock(bodyBB-&gt;getTerminator(),<span class="string">&quot;endBB&quot;</span>);</span><br><span class="line">    <span class="comment">//拆分出endBB</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//第二步,对基本块进行克隆,并且修复逃逸变量</span></span><br><span class="line">    BasicBlock *cloneBB=createCloneBasicBlock(bodyBB);</span><br><span class="line">    <span class="comment">//修复克隆产生的逃逸变量</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//第三步,构建随机跳转</span></span><br><span class="line">    *entryBB-&gt;getTerminator()-&gt;eraseFromParent();</span><br><span class="line">    <span class="comment">//移除entryBB的终结指令</span></span><br><span class="line">    Function *randfunc=Intrinsic::getDeclaration(entryBB-&gt;getModule(),llvm::Intrinsic::x86_rdrand_32); </span><br><span class="line">    <span class="comment">//获取32位随机数</span></span><br><span class="line">    CallInst *callinst=CallInst::Create(randfunc-&gt;getFunctionType(),randfunc,<span class="string">&quot;&quot;</span>,entryBB);</span><br><span class="line">    <span class="comment">//创建call指令插入entryBB的尾部</span></span><br><span class="line">    Value *randVar=ExtractValueInst::Create(callinst,<span class="number">0</span>,<span class="string">&quot;&quot;</span>,entryBB);</span><br><span class="line">    <span class="comment">//将生成的随机数插入到 entryBB的尾部</span></span><br><span class="line">    insertRandomBranch(randVar,bodyBB,cloneBB,entryBB);</span><br><span class="line">    <span class="comment">//添加随机跳转</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//第四步 bodyBB和cloneBB添加随机跳转</span></span><br><span class="line">    bodyBB-&gt;getTerminator()-&gt;eraseFromParent();</span><br><span class="line">    <span class="comment">//移除bodyBB的终结指令</span></span><br><span class="line">    cloneBB-&gt;getTerminator()-&gt;eraseFromParent();</span><br><span class="line">    <span class="comment">//移除cloneBB的终结指令</span></span><br><span class="line">    insertRandomBranch(randVar,bodyBB,endBB,cloneBB);</span><br><span class="line">    <span class="comment">//添加cloneBB到endBB的指令，到bodyBB不执行</span></span><br><span class="line">    insertRandomBranch(randVar,endBB,cloneBB,bodyBB);</span><br><span class="line">    <span class="comment">//添加bodyBB到endBB的指令，到cloneBB不执行</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//插入随机跳转，随机数为randvar</span></span><br><span class="line"><span class="comment">//如果 randvar %2==1 就跳转到ifTrue  ，否则跳转到ifFalse;</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">RandomControlFlow::insertRandomBranch</span><span class="params">(Value *randVar,BasicBlock *ifTrue,BasicBlock *ifFalse,BasicBlock *insertAfter)</span>&#123;</span><br><span class="line">    Value *alteredRandVar=alterVal(randVar,insertAfter);</span><br><span class="line">    <span class="comment">//对随机变量进行恒等变换</span></span><br><span class="line">    Value *randMod2=BinaryOperator::CreateURem(alteredRandVar,CONST_I32(<span class="number">2</span>),<span class="string">&quot;&quot;</span>,insertAfter);</span><br><span class="line">    <span class="comment">//对随机变量进行%2</span></span><br><span class="line">    CmpInst *cmp1=new ICmpInst(*insertAfter,ICmpInst::ICMP_EQ,randMod2,CONST_I32(<span class="number">0</span>),<span class="string">&quot;&quot;</span>);</span><br><span class="line">    <span class="comment">//判断结果</span></span><br><span class="line">    BranchInst *branch=BranchInst::Create(ifTrue,ifFalse,cmp1,insertAfter);</span><br><span class="line">    <span class="comment">//跳转</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//对变量进行恒等变换</span></span><br><span class="line">Value* <span class="title function_">RandomControlFlow::alterVal</span><span class="params">(Value *startVar,BasicBlock *insertAfter)</span>&#123;</span><br><span class="line">    <span class="type">uint32_t</span> code = rand() % <span class="number">3</span>;</span><br><span class="line">  Value *result;</span><br><span class="line">  <span class="keyword">if</span> (code == <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="comment">// x = x * (x + 1) - x^2</span></span><br><span class="line">    BinaryOperator *op1 = BinaryOperator::Create(Instruction::Add, startVar,</span><br><span class="line">                                                 CONST_I32(<span class="number">1</span>), <span class="string">&quot;&quot;</span>, insertAfter);</span><br><span class="line">    BinaryOperator *op2 = BinaryOperator::Create(Instruction::Mul, startVar,</span><br><span class="line">                                                 op1, <span class="string">&quot;&quot;</span>, insertAfter);</span><br><span class="line">    BinaryOperator *op3 = BinaryOperator::Create(Instruction::Mul, startVar,</span><br><span class="line">                                                 startVar, <span class="string">&quot;&quot;</span>, insertAfter);</span><br><span class="line">    BinaryOperator *op4 =</span><br><span class="line">        BinaryOperator::Create(Instruction::Sub, op2, op3, <span class="string">&quot;&quot;</span>, insertAfter);</span><br><span class="line">    result = op4;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (code == <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="comment">// x = 3 * x * (x - 2) - 3 * x^2 + 7 * x</span></span><br><span class="line">    BinaryOperator *op1 = BinaryOperator::Create(Instruction::Mul, startVar,</span><br><span class="line">                                                 CONST_I32(<span class="number">3</span>), <span class="string">&quot;&quot;</span>, insertAfter);</span><br><span class="line">    BinaryOperator *op2 = BinaryOperator::Create(Instruction::Sub, startVar,</span><br><span class="line">                                                 CONST_I32(<span class="number">2</span>), <span class="string">&quot;&quot;</span>, insertAfter);</span><br><span class="line">    BinaryOperator *op3 =</span><br><span class="line">        BinaryOperator::Create(Instruction::Mul, op1, op2, <span class="string">&quot;&quot;</span>, insertAfter);</span><br><span class="line">    BinaryOperator *op4 = BinaryOperator::Create(Instruction::Mul, startVar,</span><br><span class="line">                                                 startVar, <span class="string">&quot;&quot;</span>, insertAfter);</span><br><span class="line">    BinaryOperator *op5 = BinaryOperator::Create(Instruction::Mul, op4,</span><br><span class="line">                                                 CONST_I32(<span class="number">3</span>), <span class="string">&quot;&quot;</span>, insertAfter);</span><br><span class="line">    BinaryOperator *op6 = BinaryOperator::Create(Instruction::Mul, startVar,</span><br><span class="line">                                                 CONST_I32(<span class="number">7</span>), <span class="string">&quot;&quot;</span>, insertAfter);</span><br><span class="line">    BinaryOperator *op7 =</span><br><span class="line">        BinaryOperator::Create(Instruction::Sub, op3, op5, <span class="string">&quot;&quot;</span>, insertAfter);</span><br><span class="line">    BinaryOperator *op8 =</span><br><span class="line">        BinaryOperator::Create(Instruction::Add, op6, op7, <span class="string">&quot;&quot;</span>, insertAfter);</span><br><span class="line">    result = op8;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (code == <span class="number">2</span>) &#123;</span><br><span class="line">    <span class="comment">// x = (x - 1) * (x + 3) - (x + 4) * (x - 3) - 9</span></span><br><span class="line">    BinaryOperator *op1 = BinaryOperator::Create(Instruction::Sub, startVar,</span><br><span class="line">                                                 CONST_I32(<span class="number">1</span>), <span class="string">&quot;&quot;</span>, insertAfter);</span><br><span class="line">    BinaryOperator *op2 = BinaryOperator::Create(Instruction::Add, startVar,</span><br><span class="line">                                                 CONST_I32(<span class="number">3</span>), <span class="string">&quot;&quot;</span>, insertAfter);</span><br><span class="line">    BinaryOperator *op3 = BinaryOperator::Create(Instruction::Add, startVar,</span><br><span class="line">                                                 CONST_I32(<span class="number">4</span>), <span class="string">&quot;&quot;</span>, insertAfter);</span><br><span class="line">    BinaryOperator *op4 = BinaryOperator::Create(Instruction::Sub, startVar,</span><br><span class="line">                                                 CONST_I32(<span class="number">3</span>), <span class="string">&quot;&quot;</span>, insertAfter);</span><br><span class="line">    BinaryOperator *op5 =</span><br><span class="line">        BinaryOperator::Create(Instruction::Mul, op1, op2, <span class="string">&quot;&quot;</span>, insertAfter);</span><br><span class="line">    BinaryOperator *op6 =</span><br><span class="line">        BinaryOperator::Create(Instruction::Mul, op3, op4, <span class="string">&quot;&quot;</span>, insertAfter);</span><br><span class="line">    BinaryOperator *op7 =</span><br><span class="line">        BinaryOperator::Create(Instruction::Sub, op5, op6, <span class="string">&quot;&quot;</span>, insertAfter);</span><br><span class="line">    BinaryOperator *op8 = BinaryOperator::Create(Instruction::Sub, op7,</span><br><span class="line">                                                 CONST_I32(<span class="number">9</span>), <span class="string">&quot;&quot;</span>, insertAfter);</span><br><span class="line">    result = op8;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line">FunctionPass *<span class="title function_">llvm::createRandomControlFlow</span><span class="params">()</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> new RandomControlFlow();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">char</span> RandomControlFlow::ID = <span class="number">0</span>;</span><br><span class="line"><span class="type">static</span> RegisterPass&lt;RandomControlFlow&gt; <span class="title function_">X</span><span class="params">(<span class="string">&quot;rcf&quot;</span>,<span class="string">&quot;My Random control flow obfuscation&quot;</span>)</span>;</span><br></pre></td></tr></table></figure><h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><p><img src="/../img/OLLVM%E9%9A%8F%E6%9C%BA%E6%8E%A7%E5%88%B6%E6%B5%81/%E6%95%88%E6%9E%9C.png" alt="效果"></p><p>感觉混淆一次都已经很难看了，混淆两次更是一坨粑粑，强力混淆(๑•̀ㅂ•́)و✧</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;OLLVM-随机控制流&quot;&gt;&lt;a href=&quot;#OLLVM-随机控制流&quot; class=&quot;headerlink&quot; title=&quot;OLLVM-随机控制流&quot;&gt;&lt;/a&gt;OLLVM-随机控制流&lt;/h1&gt;&lt;p&gt;感觉跟虚假控制流差不多，就是badyBB和cloneBB的定向跳转转</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>OLLVM-指令替代</title>
    <link href="https://straw-233.github.io/2024/03/18/OLLVM-%E6%8C%87%E4%BB%A4%E6%9B%BF%E4%BB%A3/"/>
    <id>https://straw-233.github.io/2024/03/18/OLLVM-%E6%8C%87%E4%BB%A4%E6%9B%BF%E4%BB%A3/</id>
    <published>2024-03-18T13:28:58.072Z</published>
    <updated>2024-03-18T13:38:29.142Z</updated>
    
    <content type="html"><![CDATA[<h1 id="OLLVM-指令替代"><a href="#OLLVM-指令替代" class="headerlink" title="OLLVM-指令替代"></a>OLLVM-指令替代</h1><p>(建议结合代码后的注释食用!)</p><p>例如a+b&#x3D;a-(-b)，a^b&#x3D; ( ~ a&amp;b) | (a&amp; ~ b) 且仅支持整数</p><h2 id="加法替代"><a href="#加法替代" class="headerlink" title="加法替代"></a>加法替代</h2><p><img src="/../img/OLLVM%E6%8C%87%E4%BB%A4%E6%9B%BF%E4%BB%A3/%E6%8C%87%E4%BB%A41.png" alt="指令1"></p><h2 id="减法替代"><a href="#减法替代" class="headerlink" title="减法替代"></a>减法替代</h2><p><img src="/../img/OLLVM%E6%8C%87%E4%BB%A4%E6%9B%BF%E4%BB%A3/%E6%8C%87%E4%BB%A42.png" alt="指令2"></p><h2 id="与替换"><a href="#与替换" class="headerlink" title="与替换"></a>与替换</h2><p><img src="/../img/OLLVM%E6%8C%87%E4%BB%A4%E6%9B%BF%E4%BB%A3/%E6%8C%87%E4%BB%A43.png" alt="指令3"></p><h2 id="或替换"><a href="#或替换" class="headerlink" title="或替换"></a>或替换</h2><p><img src="/../img/OLLVM%E6%8C%87%E4%BB%A4%E6%9B%BF%E4%BB%A3/%E6%8C%87%E4%BB%A44.png" alt="指令4"></p><h2 id="异或替换"><a href="#异或替换" class="headerlink" title="异或替换"></a>异或替换</h2><p><img src="/../img/OLLVM%E6%8C%87%E4%BB%A4%E6%9B%BF%E4%BB%A3/%E6%8C%87%E4%BB%A45.png" alt="指令5"></p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>Substitution.cpp</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;llvm/IR/Function.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;llvm/IR/IRBuilder.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;llvm/IR/Instructions.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;llvm/Pass.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;llvm/IR/Function.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;llvm/Pass.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;llvm/IR/LegacyPassManager.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;llvm/Transforms/IPO/PassManagerBuilder.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;llvm/Support/raw_ostream.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;llvm/IR/Instructions.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;llvm/Transforms/Utils.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;llvm/Support/CommandLine.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;llvm/Transforms/Utils/Local.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;SplitBasicBlock.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Utils.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> NUMBER_ADD_SUBST 4</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> NUMBER_SUB_SUBST 3</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> NUMBER_AND_SUBST 2</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> NUMBER_OR_SUBST 2</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> NUMBER_XOR_SUBST 2</span></span><br><span class="line">using namespace llvm;</span><br><span class="line">using <span class="built_in">std</span>::<span class="built_in">vector</span>;</span><br><span class="line"><span class="type">static</span> cl::opt&lt;<span class="type">int</span>&gt; <span class="title function_">obfuTimes</span><span class="params">(<span class="string">&quot;sub_loop&quot;</span>,cl::init(<span class="number">1</span>),cl::desc(<span class="string">&quot;Obfucase a function &lt;sub_loop&gt; time().&quot;</span>))</span>;</span><br><span class="line">namespace &#123;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Substitution</span>:</span>public FunctionPass&#123;</span><br><span class="line">        public:</span><br><span class="line">        <span class="type">static</span> <span class="type">char</span> ID;</span><br><span class="line">        Substitution():FunctionPass(ID)&#123;</span><br><span class="line">            srand(time(<span class="literal">NULL</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">bool</span> <span class="title function_">runOnFunction</span><span class="params">(Function &amp;F)</span> ;</span><br><span class="line">        <span class="type">void</span> <span class="title function_">substitute</span><span class="params">(BinaryOperator *BI)</span>;</span><br><span class="line">        <span class="comment">// 替换 Add 指令</span></span><br><span class="line">        <span class="type">void</span> <span class="title function_">substituteAdd</span><span class="params">(BinaryOperator *BI)</span> ;</span><br><span class="line">        <span class="comment">// 加法替换：a = b + c -&gt; a = b - (-c)</span></span><br><span class="line">        <span class="type">void</span> <span class="title function_">addNeg</span><span class="params">(BinaryOperator *BI)</span> ;</span><br><span class="line">        <span class="comment">// 加法替换：a = b + c -&gt; a = -(-b + (-c))</span></span><br><span class="line">        <span class="type">void</span> <span class="title function_">addDoubleNeg</span><span class="params">(BinaryOperator *BI)</span> ;</span><br><span class="line">        <span class="comment">// 加法替换：a = b + c -&gt; r = rand (); a = b + r; a = a + c; a = a - r</span></span><br><span class="line">        <span class="type">void</span> <span class="title function_">addRand</span><span class="params">(BinaryOperator *BI)</span> ;</span><br><span class="line">        <span class="comment">// 加法替换：a = b + c -&gt; r = rand (); a = b - r; a = a + b; a = a + r</span></span><br><span class="line">        <span class="type">void</span> <span class="title function_">addRand2</span><span class="params">(BinaryOperator *BI)</span> ;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 替换 Sub 指令</span></span><br><span class="line">        <span class="type">void</span> <span class="title function_">substituteSub</span><span class="params">(BinaryOperator *BI)</span> ;</span><br><span class="line">        <span class="comment">// 减法替换：a = b - c -&gt; a = b + (-c)</span></span><br><span class="line">        <span class="type">void</span> <span class="title function_">subNeg</span><span class="params">(BinaryOperator *BI)</span> ;</span><br><span class="line">        <span class="comment">// 减法替换：a = b - c -&gt; r = rand (); a = b + r; a = a - c; a = a - r</span></span><br><span class="line">        <span class="type">void</span> <span class="title function_">subRand</span><span class="params">(BinaryOperator *BI)</span> ;</span><br><span class="line">        <span class="comment">// 减法替换：a = b - c -&gt; a = b - r; a = a - c; a = a + r</span></span><br><span class="line">        <span class="type">void</span> <span class="title function_">subRand2</span><span class="params">(BinaryOperator *BI)</span> ;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 替换 And 指令</span></span><br><span class="line">        <span class="type">void</span> <span class="title function_">substituteAnd</span><span class="params">(BinaryOperator *BI)</span> ;</span><br><span class="line">        <span class="comment">// 与替换：a = b &amp; c -&gt; a = (b ^ ~c) &amp; b</span></span><br><span class="line">        <span class="type">void</span> <span class="title function_">andSubstitute</span><span class="params">(BinaryOperator *BI)</span> ;</span><br><span class="line">        <span class="comment">// 与替换：a = b &amp; c -&gt; a = ~(~b | ~c) &amp; (r | ~r)</span></span><br><span class="line">        <span class="type">void</span> <span class="title function_">andSubstituteRand</span><span class="params">(BinaryOperator *BI)</span> ;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 替换 Or 指令</span></span><br><span class="line">        <span class="type">void</span> <span class="title function_">substituteOr</span><span class="params">(BinaryOperator *BI)</span> ;</span><br><span class="line">        <span class="comment">// 或替换：a = b | c -&gt; a = (b &amp; c) | (b ^ c)</span></span><br><span class="line">        <span class="type">void</span> <span class="title function_">orSubstitute</span><span class="params">(BinaryOperator *BI)</span> ;</span><br><span class="line">        <span class="comment">// 或替换：a = b | c -&gt; a = ~(~b &amp; ~c) &amp; (r | ~r)</span></span><br><span class="line">        <span class="type">void</span> <span class="title function_">orSubstituteRand</span><span class="params">(BinaryOperator *BI)</span> ;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 替换 Xor 指令</span></span><br><span class="line">        <span class="type">void</span> <span class="title function_">substituteXor</span><span class="params">(BinaryOperator *BI)</span> ;</span><br><span class="line">        <span class="comment">// 异或替换：a = b ^ c -&gt; a = ~b &amp; c | b &amp; ~c</span></span><br><span class="line">        <span class="type">void</span> <span class="title function_">xorSubstitute</span><span class="params">(BinaryOperator *BI)</span> ;</span><br><span class="line">        <span class="comment">// 异或替换：a = b ^ c -&gt; (b ^ r) ^ (c ^ r) &lt;=&gt; (~b &amp; r | b &amp; ~r) ^ (~c &amp; r |</span></span><br><span class="line">        <span class="comment">// c &amp; ~r)</span></span><br><span class="line">        <span class="type">void</span> <span class="title function_">xorSubstituteRand</span><span class="params">(BinaryOperator *BI)</span> ;</span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="type">bool</span> <span class="title function_">Substitution::runOnFunction</span><span class="params">(Function &amp;F)</span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;obfuTimes;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(BasicBlock &amp;BB:F)&#123;</span><br><span class="line">            <span class="built_in">vector</span>&lt;Instruction*&gt;origInst;</span><br><span class="line">            <span class="keyword">for</span>(Instruction &amp;I:BB)&#123;</span><br><span class="line">                origInst.push_back(&amp;I);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span>(Instruction *I:origInst)&#123; <span class="comment">//遍历所有指令</span></span><br><span class="line">                <span class="keyword">if</span>(BinaryOperator *BI=dyn_cast&lt;BinaryOperator&gt;(I))&#123;</span><br><span class="line">                        substitute(BI);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// if(isa&lt;BinaryOperator&gt;(I))&#123;</span></span><br><span class="line">                <span class="comment">//     BinaryOperator *BI=cast&lt;BinaryOperator&gt;(I);</span></span><br><span class="line">                <span class="comment">//     substitute(BI);</span></span><br><span class="line">                <span class="comment">// &#125;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Substitution::substitute</span><span class="params">(BinaryOperator *BI)</span>&#123;</span><br><span class="line">    <span class="keyword">switch</span> (BI-&gt;getOpcode())</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">case</span> BinaryOperator::Add:</span><br><span class="line">        substituteAdd(BI);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> BinaryOperator::Sub:</span><br><span class="line">        substituteSub(BI);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> BinaryOperator::Xor:</span><br><span class="line">        substituteXor(BI);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> BinaryOperator::And:</span><br><span class="line">        substituteAnd(BI);</span><br><span class="line">    <span class="keyword">case</span> BinaryOperator::Or:</span><br><span class="line">        substituteOr(BI);</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//选择替换类型</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Substitution::substituteAdd</span><span class="params">(BinaryOperator *BI)</span>&#123;</span><br><span class="line">    <span class="type">int</span> choice=rand()%NUMBER_ADD_SUBST;</span><br><span class="line">    <span class="keyword">switch</span>(choice)&#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">            addNeg(BI);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">            addDoubleNeg(BI);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">            addRand(BI);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">            addRand2(BI);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 加法替换：a = b + c -&gt; a = b - (-c)</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Substitution::addNeg</span><span class="params">(BinaryOperator *BI)</span> &#123;</span><br><span class="line">    BinaryOperator *opt1=BinaryOperator::CreateNeg(BI-&gt;getOperand(<span class="number">1</span>),<span class="string">&quot;&quot;</span>,BI);</span><br><span class="line">    <span class="comment">//-c</span></span><br><span class="line">    BinaryOperator *opt2=BinaryOperator::CreateSub(BI-&gt;getOperand(<span class="number">0</span>),opt1,<span class="string">&quot;&quot;</span>,BI);</span><br><span class="line">    <span class="comment">//b-(-c)</span></span><br><span class="line">    BI-&gt;replaceAllUsesWith(opt2);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 加法替换：a = b + c -&gt; a = -(-b + (-c))</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Substitution::addDoubleNeg</span><span class="params">(BinaryOperator *BI)</span> &#123;</span><br><span class="line">    BinaryOperator *op1 = BinaryOperator::CreateNeg(BI-&gt;getOperand(<span class="number">0</span>),<span class="string">&quot;&quot;</span>,BI);</span><br><span class="line">    <span class="comment">//-b</span></span><br><span class="line">    BinaryOperator *op2 = BinaryOperator::CreateNeg(BI-&gt;getOperand(<span class="number">1</span>),<span class="string">&quot;&quot;</span>,BI);</span><br><span class="line">    <span class="comment">//-c</span></span><br><span class="line">    BinaryOperator *op3 = BinaryOperator::CreateAdd(op1, op2,<span class="string">&quot;&quot;</span>,BI);</span><br><span class="line">    <span class="comment">//-b+(-c)</span></span><br><span class="line">    BinaryOperator *op = BinaryOperator::CreateNeg(op3,<span class="string">&quot;&quot;</span>,BI);</span><br><span class="line">    <span class="comment">//-(-b+(-c))</span></span><br><span class="line">    BI-&gt;replaceAllUsesWith(op);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 加法替换：a = b + c -&gt; r = rand (); a = b + r; a = a + c; a = a - r</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Substitution::addRand</span><span class="params">(BinaryOperator *BI)</span> &#123;</span><br><span class="line">    ConstantInt *r =(ConstantInt*)CONST(BI-&gt;getType(),rand());</span><br><span class="line">    <span class="comment">//r</span></span><br><span class="line">    BinaryOperator * op1 = BinaryOperator::CreateAdd(BI-&gt;getOperand(<span class="number">0</span>), r,<span class="string">&quot;&quot;</span>,BI);</span><br><span class="line">    <span class="comment">//b+r</span></span><br><span class="line">    BinaryOperator *op2 = BinaryOperator::CreateAdd(op1, BI-&gt;getOperand(<span class="number">1</span>),<span class="string">&quot;&quot;</span>,BI);</span><br><span class="line">    <span class="comment">//(b+r)+c</span></span><br><span class="line">    BinaryOperator *op = BinaryOperator::CreateSub(op2, r,<span class="string">&quot;&quot;</span>,BI);</span><br><span class="line">    <span class="comment">//((b+r)+c)-r</span></span><br><span class="line">    BI-&gt;replaceAllUsesWith(op);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 加法替换：a = b + c -&gt; r = rand (); a = b - r; a = a + c; a = a + r</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Substitution::addRand2</span><span class="params">(BinaryOperator *BI)</span> &#123;</span><br><span class="line">    ConstantInt *r =(ConstantInt*)CONST(BI-&gt;getType(),rand());</span><br><span class="line">    <span class="comment">//r</span></span><br><span class="line">    BinaryOperator * op1 = BinaryOperator::CreateSub(BI-&gt;getOperand(<span class="number">0</span>), r,<span class="string">&quot;&quot;</span>,BI);</span><br><span class="line">    <span class="comment">//b-r</span></span><br><span class="line">    BinaryOperator *op2 = BinaryOperator::CreateAdd(op1, BI-&gt;getOperand(<span class="number">1</span>),<span class="string">&quot;&quot;</span>,BI);</span><br><span class="line">    <span class="comment">//(b-r)+c</span></span><br><span class="line">    BinaryOperator *op = BinaryOperator::CreateAdd(op2, r,<span class="string">&quot;&quot;</span>,BI);</span><br><span class="line">    <span class="comment">//((b-r)+c)+r</span></span><br><span class="line">    BI-&gt;replaceAllUsesWith(op);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 替换 Sub 指令</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Substitution::substituteSub</span><span class="params">(BinaryOperator *BI)</span> &#123;</span><br><span class="line">        <span class="type">int</span> choice=rand()%NUMBER_SUB_SUBST;</span><br><span class="line">    <span class="keyword">switch</span>(choice)&#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">            subNeg(BI);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">            subRand(BI);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">            subRand2(BI);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 减法替换：a = b - c -&gt; a = b + (-c)</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Substitution::subNeg</span><span class="params">(BinaryOperator *BI)</span> &#123;</span><br><span class="line">    BinaryOperator *opt1=BinaryOperator::CreateNeg(BI-&gt;getOperand(<span class="number">1</span>),<span class="string">&quot;&quot;</span>,BI);</span><br><span class="line">    <span class="comment">//-c</span></span><br><span class="line">    BinaryOperator *opt2=BinaryOperator::CreateAdd(BI-&gt;getOperand(<span class="number">0</span>),opt1,<span class="string">&quot;&quot;</span>,BI);</span><br><span class="line">    <span class="comment">//b+(-c)</span></span><br><span class="line">    BI-&gt;replaceAllUsesWith(opt2);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 减法替换：a = b - c -&gt; r = rand (); a = b + r; a = a - c; a = a - r</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Substitution::subRand</span><span class="params">(BinaryOperator *BI)</span> &#123;</span><br><span class="line">    ConstantInt *r =(ConstantInt*)CONST(BI-&gt;getType(),rand());</span><br><span class="line">    <span class="comment">//r</span></span><br><span class="line">    BinaryOperator * op1 = BinaryOperator::CreateAdd(BI-&gt;getOperand(<span class="number">0</span>), r,<span class="string">&quot;&quot;</span>,BI);</span><br><span class="line">    <span class="comment">//b+r</span></span><br><span class="line">    BinaryOperator *op2 = BinaryOperator::CreateSub(op1, BI-&gt;getOperand(<span class="number">1</span>),<span class="string">&quot;&quot;</span>,BI);</span><br><span class="line">    <span class="comment">//(b+r)-c</span></span><br><span class="line">    BinaryOperator *op = BinaryOperator::CreateSub(op2, r,<span class="string">&quot;&quot;</span>,BI);</span><br><span class="line">    <span class="comment">//((b+r)-c)-r</span></span><br><span class="line">    BI-&gt;replaceAllUsesWith(op);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 减法替换：a = b - c -&gt; a = b - r; a = a - c; a = a + r</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Substitution::subRand2</span><span class="params">(BinaryOperator *BI)</span> &#123;</span><br><span class="line">    ConstantInt *r =(ConstantInt*)CONST(BI-&gt;getType(),rand());</span><br><span class="line">    <span class="comment">//r</span></span><br><span class="line">    BinaryOperator * op1 = BinaryOperator::CreateSub(BI-&gt;getOperand(<span class="number">0</span>), r,<span class="string">&quot;&quot;</span>,BI);</span><br><span class="line">    <span class="comment">//b-r</span></span><br><span class="line">    BinaryOperator *op2 = BinaryOperator::CreateSub(op1, BI-&gt;getOperand(<span class="number">1</span>),<span class="string">&quot;&quot;</span>,BI);</span><br><span class="line">    <span class="comment">//(b-r)-c</span></span><br><span class="line">    BinaryOperator *op = BinaryOperator::CreateAdd(op2, r,<span class="string">&quot;&quot;</span>,BI);</span><br><span class="line">    <span class="comment">//((b-r)-c)+r</span></span><br><span class="line">    BI-&gt;replaceAllUsesWith(op);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 替换 And 指令</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Substitution::substituteAnd</span><span class="params">(BinaryOperator *BI)</span> &#123;</span><br><span class="line">    <span class="type">int</span> choice=rand()%NUMBER_AND_SUBST;</span><br><span class="line">    <span class="keyword">switch</span>(choice)&#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">            andSubstitute(BI);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">            andSubstituteRand(BI);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 与替换：a = b &amp; c -&gt; a = (b ^ ~c) &amp; b</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Substitution::andSubstitute</span><span class="params">(BinaryOperator *BI)</span> &#123;</span><br><span class="line">    BinaryOperator *opt1=BinaryOperator::CreateNot(BI-&gt;getOperand(<span class="number">1</span>),<span class="string">&quot;&quot;</span>,BI);</span><br><span class="line">    <span class="comment">//~c</span></span><br><span class="line">    BinaryOperator *opt2=BinaryOperator::CreateXor(BI-&gt;getOperand(<span class="number">0</span>),opt1,<span class="string">&quot;&quot;</span>,BI);</span><br><span class="line">    <span class="comment">//b^~c</span></span><br><span class="line">    BinaryOperator *opt3=BinaryOperator::CreateAnd(BI-&gt;getOperand(<span class="number">0</span>),opt2,<span class="string">&quot;&quot;</span>,BI);</span><br><span class="line">    <span class="comment">//(b^~c)&amp;b</span></span><br><span class="line">    BI-&gt;replaceAllUsesWith(opt3);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 与替换：a = b &amp; c -&gt; a = ~(~b | ~c) &amp; (r | ~r)</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Substitution::andSubstituteRand</span><span class="params">(BinaryOperator *BI)</span> &#123;</span><br><span class="line">    ConstantInt *r=(ConstantInt*)CONST(BI-&gt;getType(),rand());</span><br><span class="line">    <span class="comment">//r</span></span><br><span class="line">    BinaryOperator *opt1=BinaryOperator::CreateNot(BI-&gt;getOperand(<span class="number">1</span>),<span class="string">&quot;&quot;</span>,BI);</span><br><span class="line">    <span class="comment">//~b</span></span><br><span class="line">    BinaryOperator *opt2=BinaryOperator::CreateNot(BI-&gt;getOperand(<span class="number">0</span>),<span class="string">&quot;&quot;</span>,BI);</span><br><span class="line">    <span class="comment">//~c</span></span><br><span class="line">    BinaryOperator *opt3=BinaryOperator::CreateOr(opt1,opt2,<span class="string">&quot;&quot;</span>,BI);</span><br><span class="line">    <span class="comment">//~b | ~c</span></span><br><span class="line">    BinaryOperator *opt4=BinaryOperator::CreateNot(opt3,<span class="string">&quot;&quot;</span>,BI);</span><br><span class="line">    <span class="comment">//~(~b | ~c)</span></span><br><span class="line">    BinaryOperator *opt5=BinaryOperator::CreateNot(r,<span class="string">&quot;&quot;</span>,BI);</span><br><span class="line">    <span class="comment">//~r</span></span><br><span class="line">    BinaryOperator *opt6=BinaryOperator::CreateOr(r,opt5,<span class="string">&quot;&quot;</span>,BI);</span><br><span class="line">    <span class="comment">//r | ~r</span></span><br><span class="line">    BinaryOperator *opt7=BinaryOperator::CreateAnd(opt6,opt4,<span class="string">&quot;&quot;</span>,BI);</span><br><span class="line">    <span class="comment">//~(~b | ~c)&amp;(r | ~r)</span></span><br><span class="line">    BI-&gt;replaceAllUsesWith(opt7);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 替换 Or 指令</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Substitution::substituteOr</span><span class="params">(BinaryOperator *BI)</span> &#123;</span><br><span class="line">    <span class="type">int</span> choice=rand()%NUMBER_OR_SUBST;</span><br><span class="line">    <span class="keyword">switch</span>(choice)&#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">            orSubstitute(BI);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">            orSubstituteRand(BI);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 或替换：a = b | c -&gt; a = (b &amp; c) | (b ^ c)</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Substitution::orSubstitute</span><span class="params">(BinaryOperator *BI)</span> &#123;</span><br><span class="line">    BinaryOperator *opt1=BinaryOperator::CreateAnd(BI-&gt;getOperand(<span class="number">0</span>),BI-&gt;getOperand(<span class="number">1</span>),<span class="string">&quot;&quot;</span>,BI);</span><br><span class="line">    <span class="comment">//b&amp;c</span></span><br><span class="line">    BinaryOperator *opt2=BinaryOperator::CreateXor(BI-&gt;getOperand(<span class="number">0</span>),BI-&gt;getOperand(<span class="number">1</span>),<span class="string">&quot;&quot;</span>,BI);</span><br><span class="line">    <span class="comment">//b^c</span></span><br><span class="line">    BinaryOperator *opt3=BinaryOperator::CreateOr(opt1,opt2,<span class="string">&quot;&quot;</span>,BI);</span><br><span class="line">    <span class="comment">//(b&amp;c)|(b^c)</span></span><br><span class="line">    BI-&gt;replaceAllUsesWith(opt3);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 或替换：a = b | c -&gt; a = ~(~b &amp; ~c) &amp; (r | ~r)</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Substitution::orSubstituteRand</span><span class="params">(BinaryOperator *BI)</span> &#123;</span><br><span class="line">    ConstantInt *r=(ConstantInt*)CONST(BI-&gt;getType(),rand());</span><br><span class="line">    <span class="comment">//r</span></span><br><span class="line">    BinaryOperator *opt1=BinaryOperator::CreateNot(BI-&gt;getOperand(<span class="number">1</span>),<span class="string">&quot;&quot;</span>,BI);</span><br><span class="line">    <span class="comment">//~b</span></span><br><span class="line">    BinaryOperator *opt2=BinaryOperator::CreateNot(BI-&gt;getOperand(<span class="number">0</span>),<span class="string">&quot;&quot;</span>,BI);</span><br><span class="line">    <span class="comment">//~c</span></span><br><span class="line">    BinaryOperator *opt3=BinaryOperator::CreateAnd(opt1,opt2,<span class="string">&quot;&quot;</span>,BI);</span><br><span class="line">    <span class="comment">//~b&amp;~c</span></span><br><span class="line">    BinaryOperator *opt4=BinaryOperator::CreateNot(opt3,<span class="string">&quot;&quot;</span>,BI);</span><br><span class="line">    <span class="comment">//~(~b&amp;~c)</span></span><br><span class="line">    BinaryOperator *opt5=BinaryOperator::CreateNot(r,<span class="string">&quot;&quot;</span>,BI);</span><br><span class="line">    <span class="comment">//~r</span></span><br><span class="line">    BinaryOperator *opt6=BinaryOperator::CreateOr(r,opt5,<span class="string">&quot;&quot;</span>,BI);</span><br><span class="line">    <span class="comment">//r|~r</span></span><br><span class="line">    BinaryOperator *opt7=BinaryOperator::CreateAnd(opt6,opt4,<span class="string">&quot;&quot;</span>,BI);</span><br><span class="line">    <span class="comment">//~(~b &amp; ~c) &amp; (r | ~r)</span></span><br><span class="line">    BI-&gt;replaceAllUsesWith(opt7);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 替换 Xor 指令</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Substitution::substituteXor</span><span class="params">(BinaryOperator *BI)</span> &#123;</span><br><span class="line">    <span class="type">int</span> choice=rand()%NUMBER_XOR_SUBST;</span><br><span class="line">    <span class="keyword">switch</span>(choice)&#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">            xorSubstitute(BI);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">            xorSubstituteRand(BI);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 异或替换：a = b ^ c -&gt; a = ~b &amp; c | b &amp; ~c</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Substitution::xorSubstitute</span><span class="params">(BinaryOperator *BI)</span> &#123;</span><br><span class="line">    BinaryOperator *opt1=BinaryOperator::CreateNot(BI-&gt;getOperand(<span class="number">0</span>),<span class="string">&quot;&quot;</span>,BI);</span><br><span class="line">    <span class="comment">//~c</span></span><br><span class="line">    BinaryOperator *opt2=BinaryOperator::CreateAnd(BI-&gt;getOperand(<span class="number">1</span>),opt1,<span class="string">&quot;&quot;</span>,BI);</span><br><span class="line">    <span class="comment">//b&amp;~c</span></span><br><span class="line">    BinaryOperator *opt3=BinaryOperator::CreateNot(BI-&gt;getOperand(<span class="number">1</span>),<span class="string">&quot;&quot;</span>,BI);</span><br><span class="line">    <span class="comment">//~b</span></span><br><span class="line">    BinaryOperator *opt4=BinaryOperator::CreateAnd(BI-&gt;getOperand(<span class="number">0</span>),opt3,<span class="string">&quot;&quot;</span>,BI);</span><br><span class="line">    <span class="comment">//~b&amp;c</span></span><br><span class="line">    BinaryOperator *opt5=BinaryOperator::CreateOr(opt4,opt2,<span class="string">&quot;&quot;</span>,BI);</span><br><span class="line">    <span class="comment">//~b&amp;c|b&amp;~c</span></span><br><span class="line">    BI-&gt;replaceAllUsesWith(opt5);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 异或替换：a = b ^ c -&gt; (b ^ r) ^ (c ^ r) &lt;=&gt; (~b &amp; r | b &amp; ~r) ^ (~c &amp; r | c &amp; ~r)</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Substitution::xorSubstituteRand</span><span class="params">(BinaryOperator *BI)</span> &#123;</span><br><span class="line">    ConstantInt *r=(ConstantInt*)CONST(BI-&gt;getType(),rand());</span><br><span class="line">    <span class="comment">//r</span></span><br><span class="line">    BinaryOperator *opt1=BinaryOperator::CreateNot(BI-&gt;getOperand(<span class="number">0</span>),<span class="string">&quot;&quot;</span>,BI);</span><br><span class="line">    <span class="comment">//~b</span></span><br><span class="line">    BinaryOperator *opt2=BinaryOperator::CreateAnd(r,opt1,<span class="string">&quot;&quot;</span>,BI);</span><br><span class="line">    <span class="comment">//~b&amp;r</span></span><br><span class="line">    BinaryOperator *opt3=BinaryOperator::CreateNot(r,<span class="string">&quot;&quot;</span>,BI);</span><br><span class="line">    <span class="comment">//~r</span></span><br><span class="line">    BinaryOperator *opt4=BinaryOperator::CreateAnd(opt3,BI-&gt;getOperand(<span class="number">0</span>),<span class="string">&quot;&quot;</span>,BI);</span><br><span class="line">    <span class="comment">//b&amp;~r</span></span><br><span class="line">    BinaryOperator *opt5=BinaryOperator::CreateOr(opt4,opt2,<span class="string">&quot;&quot;</span>,BI);</span><br><span class="line">    <span class="comment">//~b&amp;r|b&amp;r</span></span><br><span class="line">    BinaryOperator *opt6=BinaryOperator::CreateNot(BI-&gt;getOperand(<span class="number">1</span>),<span class="string">&quot;&quot;</span>,BI);</span><br><span class="line">    BinaryOperator *opt7=BinaryOperator::CreateAnd(r,opt6,<span class="string">&quot;&quot;</span>,BI);</span><br><span class="line">    BinaryOperator *opt8=BinaryOperator::CreateNot(r,<span class="string">&quot;&quot;</span>,BI);</span><br><span class="line">    BinaryOperator *opt9=BinaryOperator::CreateAnd(opt8,BI-&gt;getOperand(<span class="number">1</span>),<span class="string">&quot;&quot;</span>,BI);</span><br><span class="line">    BinaryOperator *opt10=BinaryOperator::CreateOr(opt7,opt9,<span class="string">&quot;&quot;</span>,BI);</span><br><span class="line">    BinaryOperator *opt11=BinaryOperator::CreateXor(opt10,opt5,<span class="string">&quot;&quot;</span>,BI);</span><br><span class="line">    <span class="comment">//(~b&amp;r|b&amp;~r)^(~c&amp;r|c&amp;~r)</span></span><br><span class="line">    BI-&gt;replaceAllUsesWith(opt11);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">char</span> Substitution::ID=<span class="number">0</span>;</span><br><span class="line"><span class="type">static</span> RegisterPass&lt;Substitution&gt; <span class="title function_">X</span><span class="params">(<span class="string">&quot;sub&quot;</span>,<span class="string">&quot;Replace a operator with equivalent instructions&quot;</span>)</span>; </span><br></pre></td></tr></table></figure><h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><p><img src="/../img/OLLVM%E6%8C%87%E4%BB%A4%E6%9B%BF%E4%BB%A3/%E6%95%88%E6%9E%9C.png" alt="效果"></p><p>感觉就汇编多了点东西，伪代码直接被ida修正了，可能是源文件的问题。。。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;OLLVM-指令替代&quot;&gt;&lt;a href=&quot;#OLLVM-指令替代&quot; class=&quot;headerlink&quot; title=&quot;OLLVM-指令替代&quot;&gt;&lt;/a&gt;OLLVM-指令替代&lt;/h1&gt;&lt;p&gt;(建议结合代码后的注释食用!)&lt;/p&gt;
&lt;p&gt;例如a+b&amp;#x3D;a-(-</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>OLLVM-虚假控制流</title>
    <link href="https://straw-233.github.io/2024/03/17/OLLVM-%E8%99%9A%E5%81%87%E6%8E%A7%E5%88%B6%E6%B5%81/"/>
    <id>https://straw-233.github.io/2024/03/17/OLLVM-%E8%99%9A%E5%81%87%E6%8E%A7%E5%88%B6%E6%B5%81/</id>
    <published>2024-03-17T11:41:18.729Z</published>
    <updated>2024-03-17T11:46:47.153Z</updated>
    
    <content type="html"><![CDATA[<h1 id="OLLVM-虚假控制流"><a href="#OLLVM-虚假控制流" class="headerlink" title="OLLVM-虚假控制流"></a>OLLVM-虚假控制流</h1><p>建议结合代码后的注释食用！</p><p><img src="/../img/%E6%81%B6%E5%BF%83%E6%A3%89.gif" alt="恶心棉"></p><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p><img src="/../img/OLLVM%E8%99%9A%E5%81%87%E6%8E%A7%E5%88%B6%E6%B5%81/%E8%99%9A%E6%8E%A70.png" alt="虚控0"></p><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><h3 id="第一步：基本块拆分"><a href="#第一步：基本块拆分" class="headerlink" title="第一步：基本块拆分"></a>第一步：基本块拆分</h3><p><img src="/../img/OLLVM%E8%99%9A%E5%81%87%E6%8E%A7%E5%88%B6%E6%B5%81/%E8%99%9A%E6%8E%A71.png" alt="虚控1"></p><h3 id="第二步：基本块克隆"><a href="#第二步：基本块克隆" class="headerlink" title="第二步：基本块克隆"></a>第二步：基本块克隆</h3><p><img src="/../img/OLLVM%E8%99%9A%E5%81%87%E6%8E%A7%E5%88%B6%E6%B5%81/%E8%99%9A%E6%8E%A72.png" alt="虚控2"></p><h3 id="第三步：构造虚假跳转"><a href="#第三步：构造虚假跳转" class="headerlink" title="第三步：构造虚假跳转"></a>第三步：构造虚假跳转</h3><p><img src="/../img/OLLVM%E8%99%9A%E5%81%87%E6%8E%A7%E5%88%B6%E6%B5%81/%E8%99%9A%E6%8E%A73.png" alt="虚控3"></p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>BogusControlFlow.cpp</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;llvm/IR/Function.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;llvm/Pass.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;llvm/Support/raw_ostream.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;llvm/Support/CommandLine.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;llvm/Transforms/Utils/ValueMapper.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;llvm/Transforms/Utils/Cloning.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;llvm/IR/Module.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;llvm/IR/Instructions.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;SplitBasicBlock.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Utils.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ctime&gt;</span> </span></span><br><span class="line">using <span class="built_in">std</span>::<span class="built_in">vector</span>; </span><br><span class="line">using namespace llvm;</span><br><span class="line"><span class="comment">//混淆次数</span></span><br><span class="line"><span class="type">static</span> cl::opt&lt;<span class="type">int</span>&gt; <span class="title function_">obfuTimes</span><span class="params">(<span class="string">&quot;bcf_loop&quot;</span>,cl::init(<span class="number">1</span>),cl::desc(<span class="string">&quot;Obfucase a function &lt;bcf_loop&gt; time().&quot;</span>))</span>;</span><br><span class="line">namespace&#123;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">BogusControlFlow</span> :</span> public FunctionPass&#123;</span><br><span class="line">        public:</span><br><span class="line">            <span class="type">static</span> <span class="type">char</span> ID;</span><br><span class="line">            BogusControlFlow():FunctionPass(ID)&#123;</span><br><span class="line">                srand(time(<span class="literal">NULL</span>));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">bool</span> <span class="title function_">runOnFunction</span><span class="params">(Function &amp;F)</span>;</span><br><span class="line">            <span class="type">void</span> <span class="title function_">bogus</span><span class="params">(BasicBlock *BB)</span>;</span><br><span class="line">            Value * <span class="title function_">createBogusCmp</span><span class="params">(BasicBlock *insertAfter)</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="title function_">BogusControlFlow::runOnFunction</span><span class="params">(Function &amp;F)</span>&#123;</span><br><span class="line">    INIT_CONTEXT(F);</span><br><span class="line">    FunctionPass *pass =createSplitBasicBlockPass();</span><br><span class="line">    pass-&gt;runOnFunction(F);</span><br><span class="line">     <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;obfuTimes;i++)&#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;BasicBlock*&gt; origBB;</span><br><span class="line">        <span class="keyword">for</span>(BasicBlock&amp; BB:F)&#123;</span><br><span class="line">            origBB.push_back(&amp;BB);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(BasicBlock *BB:origBB)&#123;</span><br><span class="line">            bogus(BB);</span><br><span class="line">        &#125;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">Value *<span class="title function_">BogusControlFlow::createBogusCmp</span><span class="params">(BasicBlock * insertAfter)</span>&#123;</span><br><span class="line">    <span class="comment">//构建虚假跳转</span></span><br><span class="line">    Module *M=insertAfter-&gt;getModule();</span><br><span class="line">    GlobalVariable *xptr= new GlobalVariable(*M,TYPE_I32,<span class="literal">false</span>,GlobalValue::CommonLinkage,CONST_I32(<span class="number">0</span>),<span class="string">&quot;x&quot;</span>);  </span><br><span class="line">    <span class="comment">//设置 x 初始值为 0;</span></span><br><span class="line">    GlobalVariable *yptr= new GlobalVariable(*M,TYPE_I32,<span class="literal">false</span>,GlobalValue::CommonLinkage,CONST_I32(<span class="number">0</span>),<span class="string">&quot;y&quot;</span>);  </span><br><span class="line">    <span class="comment">//设置 y 初始值为 0;</span></span><br><span class="line">    LoadInst *x=new LoadInst(TYPE_I32,xptr,<span class="string">&quot;&quot;</span>,insertAfter); </span><br><span class="line">    <span class="comment">//全局变量不能直接使用，用load来读取</span></span><br><span class="line">    LoadInst *y=new LoadInst(TYPE_I32,yptr,<span class="string">&quot;&quot;</span>,insertAfter); </span><br><span class="line">    ICmpInst *cmp1=new ICmpInst(*insertAfter,CmpInst::ICMP_SLT,y,CONST_I32(<span class="number">10</span>));<span class="comment">//y&lt;10</span></span><br><span class="line">    BinaryOperator *opt1=BinaryOperator::CreateAdd(x,CONST_I32(<span class="number">1</span>),<span class="string">&quot;&quot;</span>,insertAfter);<span class="comment">//x+1   </span></span><br><span class="line">    BinaryOperator *opt2=BinaryOperator::CreateMul(x,opt1,<span class="string">&quot;&quot;</span>,insertAfter); <span class="comment">//x*(x+1)  </span></span><br><span class="line">    BinaryOperator *opt3=BinaryOperator::CreateSRem(opt2,CONST_I32(<span class="number">2</span>),<span class="string">&quot;&quot;</span>,insertAfter);<span class="comment">//x*(x+1)%2   </span></span><br><span class="line">    ICmpInst *cmp2=new ICmpInst(*insertAfter,CmpInst::ICMP_EQ,opt3,CONST_I32(<span class="number">0</span>));<span class="comment">//x*(x+1)%2==0</span></span><br><span class="line">    <span class="keyword">return</span> BinaryOperator::CreateOr(cmp1,cmp2,<span class="string">&quot;&quot;</span>,insertAfter);</span><br><span class="line">    <span class="comment">//创建了if((y&lt;10||x*(x+1)%2==0)) 等价于if(true)</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">BogusControlFlow::bogus</span><span class="params">(BasicBlock *entryBB)</span>&#123;</span><br><span class="line">    <span class="comment">//第一步，将基本快拆分成entryBB,bodyBB,endBB</span></span><br><span class="line">    BasicBlock *bodyBB=entryBB-&gt;splitBasicBlock(entryBB-&gt;getFirstNonPHI(),<span class="string">&quot;BodyBB&quot;</span>);</span><br><span class="line">    BasicBlock *endBB=bodyBB-&gt;splitBasicBlock(bodyBB-&gt;getTerminator(),<span class="string">&quot;endBB&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//第二步，对中间的基本块 BodyBB 进行克隆，得到cloneBB</span></span><br><span class="line">    BasicBlock *cloneBB=createCloneBasicBlock(bodyBB);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//第三部 构建虚假跳转</span></span><br><span class="line">    <span class="comment">//1.将entryBB,bodyBB,cloneBB末尾的绝对跳转移除</span></span><br><span class="line">    entryBB-&gt;getTerminator()-&gt;eraseFromParent();    </span><br><span class="line">    bodyBB-&gt;getTerminator()-&gt;eraseFromParent();    </span><br><span class="line">    cloneBB-&gt;getTerminator()-&gt;eraseFromParent();</span><br><span class="line">    <span class="comment">//2.在entryBB和bodyBB的末尾插入条件恒为真的虚假比较指令</span></span><br><span class="line">    Value *cond1 =createBogusCmp(entryBB);</span><br><span class="line">    Value *cond2 =createBogusCmp(bodyBB); </span><br><span class="line">    <span class="comment">//3.将entryBB到bodyBB的绝对跳转改为条件跳转</span></span><br><span class="line">    BranchInst::Create(bodyBB,cloneBB,cond1,entryBB);</span><br><span class="line">    <span class="comment">//4.将bodyBB到endBB的绝对跳转改为条件跳转</span></span><br><span class="line">    BranchInst::Create(endBB,cloneBB,cond2,bodyBB);</span><br><span class="line">    <span class="comment">//5.添加bodyBB.clone到bodyBB的绝对跳转</span></span><br><span class="line">    BranchInst::Create(bodyBB,cloneBB);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="type">char</span> BogusControlFlow::ID=<span class="number">0</span>;</span><br><span class="line"><span class="type">static</span> RegisterPass&lt;BogusControlFlow&gt; <span class="title function_">X</span><span class="params">(<span class="string">&quot;bcf&quot;</span>,<span class="string">&quot;My control bogus control flattening obfuscation&quot;</span>)</span>;</span><br><span class="line"><span class="comment">//向LLVM注册我们的pass    其中X()中的第一个参数是指定LLVM Pass的参数 ，这样再使用opt加载这个so文件的时候，用这个参数来指定用哪个Pass来优化，第二个参数就是对Pass的描述。</span></span><br></pre></td></tr></table></figure><p>Utils.cpp</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;Utils.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;llvm/IR/Instructions.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;llvm/Transforms/Utils/Local.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;llvm/Transforms/Utils/ValueMapper.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;llvm/Transforms/Utils/Cloning.h&quot;</span></span></span><br><span class="line">using <span class="built_in">std</span>::<span class="built_in">vector</span>;</span><br><span class="line">using namespace llvm;</span><br><span class="line">LLVMContext *CONTEXT=nullptr;</span><br><span class="line"><span class="comment">//第五步 修复PHI指令和逃逸变量</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">llvm::fixStack</span><span class="params">(Function &amp;F)</span>&#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;PHINode*&gt; origPHI;</span><br><span class="line">    <span class="built_in">vector</span>&lt;Instruction*&gt; origReg;</span><br><span class="line">    BasicBlock &amp;entryBB=F.getEntryBlock();</span><br><span class="line">    <span class="keyword">for</span>(BasicBlock &amp;BB:F)&#123;</span><br><span class="line">        <span class="keyword">for</span> (Instruction &amp;I:BB)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(PHINode *PN=dyn_cast&lt;PHINode&gt;(&amp;I))&#123;</span><br><span class="line">                origPHI.push_back(PN);</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(!(isa&lt;AllocaInst&gt;(&amp;I)&amp;&amp; I.getParent()==&amp;entryBB)&amp;&amp; I.isUsedOutsideOfBlock(&amp;BB))&#123;<span class="comment">//判断是不是逃逸变量(除了通过Alloc，并且定义在入口块的，都要处理)</span></span><br><span class="line">                origReg.push_back(&amp;I);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(PHINode *PN:origPHI)&#123;</span><br><span class="line">        DemotePHIToStack(PN,entryBB.getTerminator());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(Instruction *I:origReg)&#123;</span><br><span class="line">        DemoteRegToStack(*I,entryBB.getTerminator());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//基本块克隆</span></span><br><span class="line">BasicBlock * <span class="title function_">llvm::createCloneBasicBlock</span><span class="params">(BasicBlock *BB)</span>&#123;</span><br><span class="line">    <span class="comment">//修复逃逸变量</span></span><br><span class="line">    <span class="built_in">vector</span>&lt;Instruction*&gt; origReg;</span><br><span class="line">    BasicBlock &amp;entryBB=BB-&gt;getParent()-&gt;getEntryBlock();</span><br><span class="line">        <span class="keyword">for</span> (Instruction &amp;I:*BB)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(!(isa&lt;AllocaInst&gt;(&amp;I)&amp;&amp; I.getParent()==&amp;entryBB)&amp;&amp; I.isUsedOutsideOfBlock(BB))&#123;<span class="comment">//判断是不是逃逸变量(除了通过Alloc，并且定义在入口块的，都要处理)</span></span><br><span class="line">                origReg.push_back(&amp;I);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">for</span>(Instruction *I:origReg)&#123;</span><br><span class="line">        DemoteRegToStack(*I,entryBB.getTerminator());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    ValueToValueMapTy VMap;  <span class="comment">//变量的映射表</span></span><br><span class="line">    BasicBlock *cloneBB=CloneBasicBlock(BB,VMap,<span class="string">&quot;cloneBB&quot;</span>,BB-&gt;getParent());</span><br><span class="line">    <span class="keyword">for</span>(Instruction &amp;I:*cloneBB)&#123;  </span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;I.getNumOperands();i++)&#123; <span class="comment">//遍历操作数不能用for:each ，要用for循环</span></span><br><span class="line">            Value *V=MapValue(I.getOperand(i),VMap);</span><br><span class="line">            <span class="keyword">if</span>(V)&#123;<span class="comment">//判断映射是否成功</span></span><br><span class="line">                I.setOperand(i,V);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> cloneBB;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">opt -load ../Build/LLVMObfuscator.so -bcf -S -enable-new-pm=0 IR/TestProgram.ll -o IR/TestProgram_bcf.ll</span><br><span class="line"># opt -load ../Build/LLVMObfuscator.so -bcf -bcf_loop 2 -S -enable-new-pm=0 IR/TestProgram.ll -o IR/TestProgram_bcf.ll</span><br><span class="line">#多次混淆</span><br><span class="line">clang  IR/TestProgram_bcf.ll -o Bin/TestProgram_bcf</span><br></pre></td></tr></table></figure><p>用以下指令将其进行编译</p><p><img src="/../img/OLLVM%E8%99%9A%E5%81%87%E6%8E%A7%E5%88%B6%E6%B5%81/dm1.png" alt="dm1"></p><p>得到一个还行的173行的代码，用D810跑一下还能看</p><p>再试着进行混淆2次</p><p><img src="/../img/OLLVM%E8%99%9A%E5%81%87%E6%8E%A7%E5%88%B6%E6%B5%81/dm2.png" alt="dm2"></p><p>已经变成了一坨763行代码的粑粑，比一次混淆的文件大了一倍（感觉真实情况不会这么搞，太冗长了）</p><p>欣赏一下流程图（）</p><p><img src="/../img/OLLVM%E8%99%9A%E5%81%87%E6%8E%A7%E5%88%B6%E6%B5%81/pic.png" alt="pic"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;OLLVM-虚假控制流&quot;&gt;&lt;a href=&quot;#OLLVM-虚假控制流&quot; class=&quot;headerlink&quot; title=&quot;OLLVM-虚假控制流&quot;&gt;&lt;/a&gt;OLLVM-虚假控制流&lt;/h1&gt;&lt;p&gt;建议结合代码后的注释食用！&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/..</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>OLLVM-控制流平坦化</title>
    <link href="https://straw-233.github.io/2024/03/15/OLLVM-%E6%8E%A7%E5%88%B6%E6%B5%81%E5%B9%B3%E5%9D%A6%E5%8C%96/"/>
    <id>https://straw-233.github.io/2024/03/15/OLLVM-%E6%8E%A7%E5%88%B6%E6%B5%81%E5%B9%B3%E5%9D%A6%E5%8C%96/</id>
    <published>2024-03-15T13:06:43.121Z</published>
    <updated>2024-03-15T13:13:29.829Z</updated>
    
    <content type="html"><![CDATA[<h1 id="OLLVM-控制流平坦化"><a href="#OLLVM-控制流平坦化" class="headerlink" title="OLLVM-控制流平坦化"></a>OLLVM-控制流平坦化</h1><p>建议结合代码后的注释食用！</p><p><img src="/../img/%E7%82%B8%E6%AF%9B%E8%8A%99.jpg" alt="炸毛芙"></p><h4 id="第一步：保存基本块"><a href="#第一步：保存基本块" class="headerlink" title="第一步：保存基本块"></a>第一步：保存基本块</h4><p><img src="/../img/OLLVM%E6%8E%A7%E5%88%B6%E6%B5%81%E5%B9%B3%E5%9D%A6%E5%8C%96/%E6%8E%A7%E5%88%B6%E6%B5%811.png" alt="控制流1"></p><h4 id="第二步：创建分发块和返回块"><a href="#第二步：创建分发块和返回块" class="headerlink" title="第二步：创建分发块和返回块"></a>第二步：创建分发块和返回块</h4><p><img src="/../img/OLLVM%E6%8E%A7%E5%88%B6%E6%B5%81%E5%B9%B3%E5%9D%A6%E5%8C%96/%E6%8E%A7%E5%88%B6%E6%B5%812.png" alt="控制流2"></p><h4 id="第三步：实现分发块调度"><a href="#第三步：实现分发块调度" class="headerlink" title="第三步：实现分发块调度"></a>第三步：实现分发块调度</h4><p><img src="/../img/OLLVM%E6%8E%A7%E5%88%B6%E6%B5%81%E5%B9%B3%E5%9D%A6%E5%8C%96/%E6%8E%A7%E5%88%B6%E6%B5%813.png" alt="控制流3"></p><h4 id="第四步：实现调度变量的自动调整"><a href="#第四步：实现调度变量的自动调整" class="headerlink" title="第四步：实现调度变量的自动调整"></a>第四步：实现调度变量的自动调整</h4><p><img src="/../img/OLLVM%E6%8E%A7%E5%88%B6%E6%B5%81%E5%B9%B3%E5%9D%A6%E5%8C%96/%E6%8E%A7%E5%88%B6%E6%B5%814.png" alt="控制流4"></p><h4 id="第五步：修复PHI指令和逃逸变量"><a href="#第五步：修复PHI指令和逃逸变量" class="headerlink" title="第五步：修复PHI指令和逃逸变量"></a>第五步：修复PHI指令和逃逸变量</h4><p><img src="/../img/OLLVM%E6%8E%A7%E5%88%B6%E6%B5%81%E5%B9%B3%E5%9D%A6%E5%8C%96/%E6%8E%A7%E5%88%B6%E6%B5%815.png" alt="控制流5"></p><h4 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h4><p>FLattening.cpp</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;llvm/IR/Function.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;llvm/Pass.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;llvm/IR/LegacyPassManager.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;llvm/Transforms/IPO/PassManagerBuilder.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;llvm/Support/raw_ostream.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;llvm/IR/Instructions.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;llvm/Transforms/Utils.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;llvm/Support/CommandLine.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;llvm/Transforms/Utils/Local.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;SplitBasicBlock.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Utils.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ctime&gt;</span></span></span><br><span class="line">using namespace llvm;</span><br><span class="line">using <span class="built_in">std</span>::<span class="built_in">vector</span>;</span><br><span class="line">namespace&#123;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Flattening</span> :</span>public FunctionPass&#123;</span><br><span class="line">        public :</span><br><span class="line">            <span class="type">static</span> <span class="type">char</span> ID;</span><br><span class="line">            </span><br><span class="line">            Flattening():FunctionPass(ID)&#123;</span><br><span class="line">                srand(time(<span class="number">0</span>));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">void</span> <span class="title function_">flatten</span><span class="params">(Function &amp;F)</span>;</span><br><span class="line">            <span class="type">bool</span> <span class="title function_">runOnFunction</span><span class="params">(Function &amp;F)</span>;</span><br><span class="line"></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="type">bool</span> <span class="title function_">Flattening::runOnFunction</span><span class="params">(Function &amp;F)</span>&#123;</span><br><span class="line">    INIT_CONTEXT(F);</span><br><span class="line">    FunctionPass * pass =createSplitBasicBlockPass();</span><br><span class="line">    pass-&gt;runOnFunction(F);</span><br><span class="line">    flatten(F);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Flattening::flatten</span><span class="params">(Function &amp;F)</span>&#123;</span><br><span class="line">    <span class="comment">//第一步,保存除了入口块的基本块</span></span><br><span class="line">    <span class="built_in">vector</span>&lt;BasicBlock*&gt; origBB;<span class="comment">//创建一个容器</span></span><br><span class="line">    <span class="keyword">for</span>(BasicBlock&amp; BB:F)&#123;</span><br><span class="line">        origBB.push_back(&amp;BB);</span><br><span class="line">    &#125;<span class="comment">//保存所有基本快</span></span><br><span class="line">    origBB.erase(origBB.begin());<span class="comment">//移除第一个基本块</span></span><br><span class="line">    BasicBlock &amp;entryBlock=F.getEntryBlock();<span class="comment">//获取入口块</span></span><br><span class="line">    <span class="keyword">if</span>(BranchInst *br=dyn_cast&lt;BranchInst&gt;(entryBlock.getTerminator()))&#123;</span><br><span class="line">        <span class="keyword">if</span>(br-&gt;isConditional())&#123;<span class="comment">//判断是不是条件跳转</span></span><br><span class="line">            origBB.insert(origBB.begin(),entryBlock.splitBasicBlock(br));<span class="comment">//是条件跳转，单独拎出来作为新的基本块</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//第二步，创建分发块和返回块</span></span><br><span class="line">    BasicBlock *dispatchBB=BasicBlock::Create(*CONTEXT,<span class="string">&quot;dispatchBB&quot;</span>,&amp;F,&amp;entryBlock);<span class="comment">//创建分发块</span></span><br><span class="line">    BasicBlock *retBB=BasicBlock::Create(*CONTEXT,<span class="string">&quot;retBB&quot;</span>,&amp;F,&amp;entryBlock);<span class="comment">//创建返回块</span></span><br><span class="line">    entryBlock.moveBefore(dispatchBB);<span class="comment">//移动入口块到最前面</span></span><br><span class="line">    entryBlock.getTerminator()-&gt;eraseFromParent();<span class="comment">//踢掉入口块原来的跳转</span></span><br><span class="line">    BranchInst::Create(dispatchBB,&amp;entryBlock);<span class="comment">//入口块绝对跳转到分发快</span></span><br><span class="line">    BranchInst::Create(dispatchBB,retBB);<span class="comment">//返回块到分发块</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//第三部，实现分发块的调度功能</span></span><br><span class="line">    <span class="type">int</span> randNumcase=rand();<span class="comment">//rand参数</span></span><br><span class="line">    AllocaInst * swVarPtr =new AllocaInst(TYPE_I32,<span class="number">0</span>,<span class="string">&quot;swVar.ptr&quot;</span>,entryBlock.getTerminator());<span class="comment">//入口块创建alloca指令，插入到入口块终结指令前</span></span><br><span class="line">    new StoreInst(CONST_I32(randNumcase),swVarPtr,entryBlock.getTerminator());<span class="comment">//对switch变量进行初始化</span></span><br><span class="line">    LoadInst *swVar=new LoadInst(TYPE_I32,swVarPtr,<span class="string">&quot;swVAR&quot;</span>,dispatchBB);<span class="comment">//添加switch指令</span></span><br><span class="line">    BasicBlock *defaultBB = BasicBlock::Create(*CONTEXT,<span class="string">&quot;defaultBB&quot;</span>,&amp;F,retBB);<span class="comment">//创建一个返回块前的基本块</span></span><br><span class="line">    BranchInst::Create(retBB,defaultBB);  <span class="comment">//基本块肯定要有一条终结指令，所以这里随便添加一条跳转指令</span></span><br><span class="line">    SwitchInst *swInst=SwitchInst::Create(swVar,defaultBB,<span class="number">0</span>,dispatchBB);<span class="comment">//插入到分发块的后面</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//为每个基本块分配随机的case值</span></span><br><span class="line">    <span class="keyword">for</span>(BasicBlock *BB:origBB)&#123;</span><br><span class="line">        BB-&gt;moveBefore(retBB);<span class="comment">//移动到返回块前面</span></span><br><span class="line">        swInst-&gt;addCase(CONST_I32(randNumcase),BB);<span class="comment">//保存随机数</span></span><br><span class="line">        randNumcase=rand();<span class="comment">//重新生成随机数</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//第四步 实现调度变量自动调整</span></span><br><span class="line">    <span class="keyword">for</span>(BasicBlock *BB:origBB)&#123;</span><br><span class="line">        <span class="keyword">if</span>(BB-&gt;getTerminator()-&gt;getNumSuccessors()==<span class="number">0</span>)&#123;<span class="comment">//如果这个基本块的最后一条指令是返回指令(没有后继快)</span></span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(BB-&gt;getTerminator()-&gt;getNumSuccessors()==<span class="number">1</span>)&#123;<span class="comment">//如果这个基本块还有一个后继块(即为绝对跳转) </span></span><br><span class="line">            ConstantInt *numcase = swInst-&gt;findCaseDest(BB-&gt;getTerminator()-&gt;getSuccessor(<span class="number">0</span>));<span class="comment">//找到对应的case值</span></span><br><span class="line">            new StoreInst(numcase,swVarPtr,BB-&gt;getTerminator());<span class="comment">//修改swicth中的参数，修改为对应case</span></span><br><span class="line">            BB-&gt;getTerminator()-&gt;eraseFromParent();<span class="comment">//原先的跳转删除</span></span><br><span class="line">            BranchInst::Create(retBB,BB);<span class="comment">//添加跳转</span></span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(BB-&gt;getTerminator()-&gt;getNumSuccessors()==<span class="number">2</span>)&#123; <span class="comment">//有两个后继块</span></span><br><span class="line">             ConstantInt *numcase1 = swInst-&gt;findCaseDest(BB-&gt;getTerminator()-&gt;getSuccessor(<span class="number">0</span>));</span><br><span class="line">             ConstantInt *numcase2 = swInst-&gt;findCaseDest(BB-&gt;getTerminator()-&gt;getSuccessor(<span class="number">1</span>));<span class="comment">//全找了</span></span><br><span class="line">             BranchInst *br1=cast&lt;BranchInst&gt;(BB-&gt;getTerminator()); <span class="comment">//两个分支也有可能是switch指令，但是在混淆前，使用LLVM IR指令 (使用自带的 LowerSwitch的LLVM Pass)，将switch替换成了branch，所以这里最后一条指令只能是branch</span></span><br><span class="line">             SelectInst *sel=SelectInst::Create(br1-&gt;getCondition(),numcase1,numcase2,<span class="string">&quot;&quot;</span>,BB-&gt;getTerminator());<span class="comment">//三元运算符，找到对应的case</span></span><br><span class="line">             new StoreInst(sel,swVarPtr,BB-&gt;getTerminator());<span class="comment">//保存在switch变量</span></span><br><span class="line">            BB-&gt;getTerminator()-&gt;eraseFromParent(); <span class="comment">//原先的跳转删除</span></span><br><span class="line">             BranchInst::Create(retBB,BB);<span class="comment">//添加</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//第五步 修复 phi指令和逃逸变量</span></span><br><span class="line">    fixStack(F);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">char</span> Flattening::ID=<span class="number">0</span>;</span><br><span class="line"><span class="type">static</span> RegisterPass&lt;Flattening&gt;X(<span class="string">&quot;fla&quot;</span>,<span class="string">&quot;My control flow flattening obfuscation&quot;</span>);</span><br></pre></td></tr></table></figure><p>Utils.cpp</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;Utils.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;llvm/IR/Instructions.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;llvm/Transforms/Utils/Local.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;llvm/Transforms/Utils/ValueMapper.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;llvm/Transforms/Utils/Cloning.h&quot;</span></span></span><br><span class="line">using <span class="built_in">std</span>::<span class="built_in">vector</span>;</span><br><span class="line">using namespace llvm;</span><br><span class="line">LLVMContext *CONTEXT=nullptr;</span><br><span class="line"><span class="comment">//第五步 修复PHI指令和逃逸变量</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">llvm::fixStack</span><span class="params">(Function &amp;F)</span>&#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;PHINode*&gt; origPHI;</span><br><span class="line">    <span class="built_in">vector</span>&lt;Instruction*&gt; origReg;</span><br><span class="line">    BasicBlock &amp;entryBB=F.getEntryBlock();</span><br><span class="line">    <span class="keyword">for</span>(BasicBlock &amp;BB:F)&#123;</span><br><span class="line">        <span class="keyword">for</span> (Instruction &amp;I:BB)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(PHINode *PN=dyn_cast&lt;PHINode&gt;(&amp;I))&#123;</span><br><span class="line">                origPHI.push_back(PN);</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(!(isa&lt;AllocaInst&gt;(&amp;I)&amp;&amp; I.getParent()==&amp;entryBB)&amp;&amp; I.isUsedOutsideOfBlock(&amp;BB))&#123;<span class="comment">//判断是不是逃逸变量(除了通过Alloc，并且定义在入口块的，都要处理)</span></span><br><span class="line">                origReg.push_back(&amp;I);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(PHINode *PN:origPHI)&#123;</span><br><span class="line">        DemotePHIToStack(PN,entryBB.getTerminator());<span class="comment">//修复PHI指令</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(Instruction *I:origReg)&#123;</span><br><span class="line">        DemoteRegToStack(*I,entryBB.getTerminator());<span class="comment">//修复逃逸变量</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Utils.h</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> _UTILS_H_</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _UTILS_H_</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;llvm/IR/Function.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> INIT_CONTEXT(X) CONTEXT = &amp;X.getContext()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> TYPE_I64 Type::getInt64Ty(*CONTEXT)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> TYPE_I32 Type::getInt32Ty(*CONTEXT)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> TYPE_I8 Type::getInt8Ty(*CONTEXT)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> GET_TYPE(X) TYPE::getInt(X) Ty(*CONTEXT)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CONST_I64(V) ConstantInt::get(TYPE_I64, V, false)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CONST_I32(V) ConstantInt::get(TYPE_I32, V, false)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CONST_I8(V) ConstantInt::get(TYPE_I8, V, false)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CONST(T, V) ConstantInt::get(T, V)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> RANDOM(X) (cryptoutils-&gt;get_uint8_t() % 100 &lt; X)</span></span><br><span class="line"><span class="keyword">extern</span> llvm::LLVMContext *CONTEXT;</span><br><span class="line"></span><br><span class="line">namespace llvm&#123;</span><br><span class="line">    <span class="type">void</span> <span class="title function_">fixStack</span><span class="params">(Function &amp;F)</span>;</span><br><span class="line">    BasicBlock* <span class="title function_">createCloneBasicBlock</span><span class="params">(BasicBlock *BB)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;OLLVM-控制流平坦化&quot;&gt;&lt;a href=&quot;#OLLVM-控制流平坦化&quot; class=&quot;headerlink&quot; title=&quot;OLLVM-控制流平坦化&quot;&gt;&lt;/a&gt;OLLVM-控制流平坦化&lt;/h1&gt;&lt;p&gt;建议结合代码后的注释食用！&lt;/p&gt;
&lt;p&gt;&lt;img src=</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>llvm IR常用指令二</title>
    <link href="https://straw-233.github.io/2024/02/29/llvm%20IR%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4%E4%BA%8C/"/>
    <id>https://straw-233.github.io/2024/02/29/llvm%20IR%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4%E4%BA%8C/</id>
    <published>2024-02-29T13:00:58.816Z</published>
    <updated>2024-02-29T13:02:59.516Z</updated>
    
    <content type="html"><![CDATA[<h1 id="llvm-IR常用指令二"><a href="#llvm-IR常用指令二" class="headerlink" title="llvm IR常用指令二"></a>llvm IR常用指令二</h1><h3 id="内存访问和寻址操作"><a href="#内存访问和寻址操作" class="headerlink" title="内存访问和寻址操作"></a>内存访问和寻址操作</h3><h4 id="alloca指令"><a href="#alloca指令" class="headerlink" title="alloca指令"></a>alloca指令</h4><p>&lt; result&gt;&#x3D;alloca &lt; type&gt; [,&lt; ty&gt; &lt; NumElements&gt;] [, align &lt; alignment&gt;];</p><p>分配sizeof(type)*NumElements字节的内存，分配的地址与alignment对齐</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">%ptr = alloca i32                  ;分配4字节的内存并返回i32类型的指针</span><br><span class="line">%ptr = alloca i32,i32 4            ;分配4*4字节的内存并返回i32类型的指针</span><br><span class="line">%ptr = alloca i32,i32 4,align 1024 ;分配4*4字节的内存并返回i32类型的指针，分配地址与1024对齐</span><br><span class="line">%ptr = alloca i32,align 1024       ;分配4字节的内存并返回i32类型的指针，分配地址与1024对齐</span><br></pre></td></tr></table></figure><h4 id="store指令"><a href="#store指令" class="headerlink" title="store指令"></a>store指令</h4><p>store &lt; ty&gt; &lt; value&gt;,&lt; ty&gt;* &lt; pointer&gt;;向特定类型指针指向的内存存储相同类型的数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">%ptr = alloca i32</span><br><span class="line">store i32 3, i32* %ptr</span><br></pre></td></tr></table></figure><h4 id="load指令"><a href="#load指令" class="headerlink" title="load指令"></a>load指令</h4><p>&lt; result&gt; &#x3D; load &lt; ty&gt;, &lt; ty&gt;* &lt; pointer&gt;;从特定类型的指针指向的内存中读取特定类型的数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">%ptr = alloca i32</span><br><span class="line">store i32 3, i32* %ptr</span><br><span class="line">%value = load i32,i32* %ptr</span><br></pre></td></tr></table></figure><h3 id="类型转换指令"><a href="#类型转换指令" class="headerlink" title="类型转换指令"></a>类型转换指令</h3><h4 id="trunc-to指令"><a href="#trunc-to指令" class="headerlink" title="trunc..to指令"></a>trunc..to指令</h4><p>&lt; result&gt; &#x3D; trunc &lt; ty&gt; &lt; value&gt; to &lt; ty2&gt;;将ty类型变量截断为ty2类型的变量</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">%X = trunc i32 257 to i8                      ;i8:1</span><br><span class="line">%Y = trunc i32 123 to i1                      ;i1:true</span><br><span class="line">%Z = trunc i32 122 to i1                      ;i1:false</span><br><span class="line">%W = trunc &lt;2 x i16&gt; &lt;i16 8,i16 7&gt;to&lt;2 x i8&gt;  ;&lt;i8 8,i8 7&gt;</span><br></pre></td></tr></table></figure><h4 id="zext-to指令"><a href="#zext-to指令" class="headerlink" title="zext..to指令"></a>zext..to指令</h4><p>&lt; result&gt; &#x3D; zext &lt; ty&gt; &lt; value&gt; to &lt; ty2&gt;;将ty类型变量拓展为ty2类型的变量，强制转换</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">%X = zext i32 257 to i64                       ;i64:257</span><br><span class="line">%Y = zext i1 true to i32                       ;i32:1</span><br><span class="line">%Z = zext &lt;2 x i16&gt; &lt;i16 8,i16 7&gt; to &lt;2 x i32&gt; ;&lt;i32 8,i32 7&gt;</span><br></pre></td></tr></table></figure><h4 id="sext-to指令"><a href="#sext-to指令" class="headerlink" title="sext..to指令"></a>sext..to指令</h4><p>&lt; result&gt;&#x3D; sext &lt; ty&gt; &lt; value&gt; to &lt; ty2&gt;;将ty类型变量拓展为ty2类型的变量，复制符号位</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">%X = sext i8 -1 to i64                         ;i64:-1</span><br><span class="line">%Y = sext i1 true to i32                       ;i32:-1</span><br><span class="line">%Z = sext &lt;2 x i16&gt; &lt;i16 8,i16 7&gt; to &lt;2 x i32&gt; ;&lt;i32 8,i32 7&gt;</span><br></pre></td></tr></table></figure><h3 id="其他操作"><a href="#其他操作" class="headerlink" title="其他操作"></a>其他操作</h3><h4 id="phi指令"><a href="#phi指令" class="headerlink" title="phi指令"></a>phi指令</h4><p>由静态单赋值引起的SSA问题，引入phi函数解决</p><p><img src="/../img/llvm2.png" alt="llvm2"></p><p>&lt; result&gt; &#x3D; phi &lt; ty&gt; [ &lt; val0&gt;,&lt; label0&gt;], … ;如果前驱快为label0，则result&#x3D;val0…</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Loop:     ; Infinite loop that counts from 0 on up...</span><br><span class="line">%indvar = phi i32[ 0, %LoopHeader ],[ %nextindvar, %Loop ]</span><br><span class="line">%nextindvar = add i32 %indvar,1</span><br><span class="line">br label %Loop   ;phi指令实现for循环</span><br></pre></td></tr></table></figure><h4 id="select指令"><a href="#select指令" class="headerlink" title="select指令"></a>select指令</h4><p>三元运算符</p><p>&lt; result&gt; &#x3D; select i1 &lt; cond&gt;,&lt; ty&gt; &lt; vall&gt;,&lt; ty&gt; &lt; val2&gt;; 如果条件cond成立</p><p>result&#x3D;vall,否则 result&#x3D;val2</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">%X = select i1 true,i8 17,i8 42    ;i8:17</span><br><span class="line">%X = select i1 flase,i8 17,i8 42   ;i8:42</span><br></pre></td></tr></table></figure><h4 id="call指令"><a href="#call指令" class="headerlink" title="call指令"></a>call指令</h4><p>&lt; result&gt; &#x3D; call &lt; ty&gt;|&lt; fnty&gt; &lt; fnptrval&gt;(&lt; function args&gt;); 调用函数,可以传递参数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">%retval = call i32 @test(i32 %argc)                  ;调用test函数，参数为i32类型，返回值为i32类型</span><br><span class="line">call i32 (i8*, ...)* @printf(i8* %msg, i32 12,i8 42) ;调用printf函数，参数可变</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;llvm-IR常用指令二&quot;&gt;&lt;a href=&quot;#llvm-IR常用指令二&quot; class=&quot;headerlink&quot; title=&quot;llvm IR常用指令二&quot;&gt;&lt;/a&gt;llvm IR常用指令二&lt;/h1&gt;&lt;h3 id=&quot;内存访问和寻址操作&quot;&gt;&lt;a href=&quot;#内存访问</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>llvm IR常用指令一</title>
    <link href="https://straw-233.github.io/2024/02/28/llvm%20IR%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4%E4%B8%80/"/>
    <id>https://straw-233.github.io/2024/02/28/llvm%20IR%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4%E4%B8%80/</id>
    <published>2024-02-28T13:26:52.873Z</published>
    <updated>2024-02-29T06:39:56.814Z</updated>
    
    <content type="html"><![CDATA[<h1 id="llvm-IR常用指令一"><a href="#llvm-IR常用指令一" class="headerlink" title="llvm IR常用指令一"></a>llvm IR常用指令一</h1><h3 id="终结指令"><a href="#终结指令" class="headerlink" title="终结指令"></a>终结指令</h3><h4 id="ret指令"><a href="#ret指令" class="headerlink" title="ret指令"></a>ret指令</h4><p>ret &lt; type&gt;  &lt; value&gt;;返回特定类型返回值的return指令</p><p>ret void;无返回值的return指令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Test:</span><br><span class="line">ret i32 5;返回整数5</span><br><span class="line">ret void;返回无符号</span><br><span class="line">ret &#123; i32 , i8 &#125; &#123; i32 4 , i8 2 &#125;;返回结构体</span><br></pre></td></tr></table></figure><h4 id="br指令"><a href="#br指令" class="headerlink" title="br指令"></a>br指令</h4><p>br i1 &lt; cond&gt;,label &lt; iftrue&gt;,label &lt; iffalse&gt;;有条件跳转</p><p>br label &lt; dest&gt;;无条件分支</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Test:</span><br><span class="line">%cond = icmp eq i32 %al,%b</span><br><span class="line">br il %cond,label %IfEqual,label %IfUnequal</span><br><span class="line">IfEqual:</span><br><span class="line">ret i32 1</span><br><span class="line">IfUnequal:</span><br><span class="line">ret i32 0</span><br></pre></td></tr></table></figure><h4 id="icmp指令"><a href="#icmp指令" class="headerlink" title="icmp指令"></a>icmp指令</h4><p>&lt; result&gt; &#x3D; icmp  &lt; cond&gt;  &lt; ty&gt;  &lt; op1&gt;  &lt; op2&gt;;比较两个ty类型的数是否满足条件cond</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Test:</span><br><span class="line">&lt;result&gt; = icmp eq i32 4,5      ;false eq=equal</span><br><span class="line">&lt;result&gt; = icmp ne float* %X %X ;false ne=not equal</span><br><span class="line">&lt;result&gt; = icmp ult i16 4, 5    ;true ult=unsigned less than</span><br><span class="line">&lt;result&gt; = icmp sgt i16 4, 5    ;false sgt=signed greater than</span><br><span class="line">&lt;result&gt; = icmp ule i16 -4, 5   ;false ule=unsigned less or equal</span><br><span class="line">&lt;result&gt; = icmp sge i16 4, 5    ;false sge=signed greater or equal</span><br></pre></td></tr></table></figure><h4 id="fcmp指令"><a href="#fcmp指令" class="headerlink" title="fcmp指令"></a>fcmp指令</h4><p>&lt; result&gt;&#x3D; fcmp &lt; cond&gt;  &lt; ty&gt;  &lt; op1&gt;  &lt; op2&gt;;比较两个浮点数是否满足条件cond</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Test:</span><br><span class="line">&lt;result&gt; = fcmp oeq float 4.0,5.0   ;false oeq=order and equal</span><br><span class="line">&lt;result&gt; = fcmp one float 4.0,5.0   ;true </span><br><span class="line">&lt;result&gt; = fcmp olt float 4.0,5.0   ;true</span><br><span class="line">&lt;result&gt; = fcmp ueq double 1.0,2.0  ;false</span><br></pre></td></tr></table></figure><h4 id="switch指令"><a href="#switch指令" class="headerlink" title="switch指令"></a>switch指令</h4><p>switch &lt; intty&gt; &lt; value&gt;, label &lt; defaultdest&gt; [ &lt; intty&gt;  &lt; val&gt;,label  &lt; dest&gt;…]</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Test:</span><br><span class="line">%Val = zext i1 %value to i32</span><br><span class="line">switch i32 %Val,label %truedest[ i32 0,label %falsedest ];与条件跳转等效</span><br><span class="line">switch i32 0,label %dest[ ];与非条件跳转等效</span><br><span class="line">switch i32 %Val,label %otherwise [ i32 0, label %onzero</span><br><span class="line">                                   i32 1, label %onone</span><br><span class="line">                                   i32 2, label %ontwo];三条跳转</span><br></pre></td></tr></table></figure><h3 id="二元运算"><a href="#二元运算" class="headerlink" title="二元运算"></a>二元运算</h3><h4 id="add指令"><a href="#add指令" class="headerlink" title="add指令"></a>add指令</h4><p>&lt; result&gt; &#x3D; add &lt; ty&gt;  &lt; op1&gt;, &lt; op2&gt;</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;result&gt;=add i32 4,%var;4+%var</span><br></pre></td></tr></table></figure><h4 id="sub指令"><a href="#sub指令" class="headerlink" title="sub指令"></a>sub指令</h4><p>&lt; result&gt; &#x3D; sub &lt; ty&gt;  &lt; op1&gt;, &lt; op2&gt;</p><h4 id="mul指令"><a href="#mul指令" class="headerlink" title="mul指令"></a>mul指令</h4><p>&lt; result&gt; &#x3D; mul &lt; ty&gt;  &lt; op1&gt;, &lt; op2&gt;</p><h4 id="udiv指令"><a href="#udiv指令" class="headerlink" title="udiv指令"></a>udiv指令</h4><p>&lt; result&gt; &#x3D; udiv &lt; ty&gt;  &lt; op1&gt;, &lt; op2&gt;;无符号整除</p><p>&lt; result&gt; &#x3D; udiv exact  &lt; ty&gt;  &lt; op1&gt;, &lt; op2&gt;;如果结果不是整数会报错</p><h4 id="sdiv指令"><a href="#sdiv指令" class="headerlink" title="sdiv指令"></a>sdiv指令</h4><p>&lt; result&gt; &#x3D; sdiv &lt; ty&gt;  &lt; op1&gt;, &lt; op2&gt;;有符号整除</p><p>&lt; result&gt; &#x3D; sdiv exact  &lt; ty&gt;  &lt; op1&gt;, &lt; op2&gt;;如果结果不是整数会报错</p><h4 id="urem指令"><a href="#urem指令" class="headerlink" title="urem指令"></a>urem指令</h4><p>&lt; result&gt; &#x3D; urem &lt; ty&gt;  &lt; op1&gt;, &lt; op2&gt;；无符号取余</p><h4 id="srem指令"><a href="#srem指令" class="headerlink" title="srem指令"></a>srem指令</h4><p>&lt; result&gt; &#x3D; srem &lt; ty&gt;  &lt; op1&gt;, &lt; op2&gt;；有 符号取余</p><h3 id="按位二元运算"><a href="#按位二元运算" class="headerlink" title="按位二元运算"></a>按位二元运算</h3><h4 id="shl指令"><a href="#shl指令" class="headerlink" title="shl指令"></a>shl指令</h4><p>&lt; result&gt; &#x3D; shl &lt; ty&gt;  &lt; op1&gt;, &lt; op2&gt;；整数左移op1&lt;&lt;op2</p><h4 id="lshr指令"><a href="#lshr指令" class="headerlink" title="lshr指令"></a>lshr指令</h4><p>&lt; result&gt; &#x3D; lshr &lt; ty&gt;  &lt; op1&gt;, &lt; op2&gt;；整数逻辑右移，会变为无符号类型</p><h4 id="ashr指令"><a href="#ashr指令" class="headerlink" title="ashr指令"></a>ashr指令</h4><p>&lt; result&gt; &#x3D; ashr &lt; ty&gt;  &lt; op1&gt;, &lt; op2&gt;；整数算数右移</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Difference:</span><br><span class="line">&lt;result&gt;=lshr i8 -2,1  ;result=0x7F</span><br><span class="line">&lt;result&gt;=ashr i8 -2,1  ;result=-1</span><br></pre></td></tr></table></figure><h4 id="and指令"><a href="#and指令" class="headerlink" title="and指令"></a>and指令</h4><p>&lt; result&gt; &#x3D; and &lt; ty&gt;  &lt; op1&gt;, &lt; op2&gt;；整数按位与</p><h4 id="or指令"><a href="#or指令" class="headerlink" title="or指令"></a>or指令</h4><p>&lt; result&gt; &#x3D; or &lt; ty&gt;  &lt; op1&gt;, &lt; op2&gt;；整数按位或</p><h4 id="xor指令"><a href="#xor指令" class="headerlink" title="xor指令"></a>xor指令</h4><p>&lt; result&gt; &#x3D; ashr &lt; ty&gt;  &lt; op1&gt;, &lt; op2&gt;；整数按位异或</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;llvm-IR常用指令一&quot;&gt;&lt;a href=&quot;#llvm-IR常用指令一&quot; class=&quot;headerlink&quot; title=&quot;llvm IR常用指令一&quot;&gt;&lt;/a&gt;llvm IR常用指令一&lt;/h1&gt;&lt;h3 id=&quot;终结指令&quot;&gt;&lt;a href=&quot;#终结指令&quot; cla</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>java学习（2）</title>
    <link href="https://straw-233.github.io/2023/12/19/java%E5%AD%A6%E4%B9%A0%EF%BC%882%EF%BC%89/"/>
    <id>https://straw-233.github.io/2023/12/19/java%E5%AD%A6%E4%B9%A0%EF%BC%882%EF%BC%89/</id>
    <published>2023-12-19T13:19:08.557Z</published>
    <updated>2023-12-19T13:18:39.716Z</updated>
    
    <content type="html"><![CDATA[<h1 id="java学习（2）"><a href="#java学习（2）" class="headerlink" title="java学习（2）"></a>java学习（2）</h1><h5 id="外置类"><a href="#外置类" class="headerlink" title="外置类"></a>外置类</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StudentTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> </span><br><span class="line">    &#123;</span><br><span class="line">    Student s=<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;straw&quot;</span>,<span class="number">20</span>);</span><br><span class="line">    System.out.println(s.getAge());</span><br><span class="line">    System.out.println(s.getName());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(name);</span><br><span class="line">        System.out.println(age);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(String name,<span class="type">int</span> age)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">this</span>.name=name;</span><br><span class="line">        <span class="built_in">this</span>.age=age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">this</span>.name=name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">20</span><br><span class="line">straw</span><br></pre></td></tr></table></figure><h5 id="字符串拼接"><a href="#字符串拼接" class="headerlink" title="字符串拼接"></a>字符串拼接</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span> &#123; </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span>[] arr=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;</span><br><span class="line">        String str=arrToString(arr);</span><br><span class="line">        System.out.println(str);</span><br><span class="line">    &#125;   </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">arrToString</span><span class="params">(<span class="type">int</span>[] arr)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(arr==<span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(arr.length==<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;[]&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        String result= <span class="string">&quot;[&quot;</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length-<span class="number">1</span>; i++) </span><br><span class="line">        &#123;</span><br><span class="line">            result+=arr[i]+<span class="string">&quot;,&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        result=result+arr[arr.length-<span class="number">1</span>]+<span class="string">&quot;]&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[1,2,3]</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;java学习（2）&quot;&gt;&lt;a href=&quot;#java学习（2）&quot; class=&quot;headerlink&quot; title=&quot;java学习（2）&quot;&gt;&lt;/a&gt;java学习（2）&lt;/h1&gt;&lt;h5 id=&quot;外置类&quot;&gt;&lt;a href=&quot;#外置类&quot; class=&quot;headerlink</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>java学习（1）</title>
    <link href="https://straw-233.github.io/2023/12/07/java%E5%AD%A6%E4%B9%A0%EF%BC%881%EF%BC%89/"/>
    <id>https://straw-233.github.io/2023/12/07/java%E5%AD%A6%E4%B9%A0%EF%BC%881%EF%BC%89/</id>
    <published>2023-12-07T12:56:00.738Z</published>
    <updated>2023-12-07T13:07:44.640Z</updated>
    
    <content type="html"><![CDATA[<h1 id="java学习（1）"><a href="#java学习（1）" class="headerlink" title="java学习（1）"></a>java学习（1）</h1><h3 id="随机数"><a href="#随机数" class="headerlink" title="随机数"></a>随机数</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Root1</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] arr=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line">        Random r=<span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt; arr.length ;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> index=r.nextInt(arr.length);</span><br><span class="line">            <span class="type">int</span> temp= arr[i];</span><br><span class="line">            arr[i]=arr[index];</span><br><span class="line">            arr[index]=temp;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;arr.length;i++)</span><br><span class="line">        &#123;</span><br><span class="line">           System.out.print(arr[i]+<span class="string">&quot; &quot;</span>); </span><br><span class="line">        &#125;        </span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1 3 5 2 4//随机</span><br></pre></td></tr></table></figure><h3 id="scanf读入-方法"><a href="#scanf读入-方法" class="headerlink" title="scanf读入+方法"></a>scanf读入+方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Root2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span></span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(getSum1(<span class="number">1</span>, <span class="number">2</span>));</span><br><span class="line">        Scanner sc=<span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">int</span> put=sc.nextInt();</span><br><span class="line">        System.out.println(put);</span><br><span class="line">        sc.close();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">getSum</span><span class="params">(<span class="type">int</span> num1,<span class="type">int</span> num2)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> result=num1+num2;</span><br><span class="line">        System.out.println(result);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">getSum1</span><span class="params">(<span class="type">int</span> num1,<span class="type">int</span> num2)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> result=num1+num2;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">114514</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">3</span><br><span class="line">114514</span><br></pre></td></tr></table></figure><h3 id="类"><a href="#类" class="headerlink" title="类"></a>类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Root3</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Girlfriend gf1=<span class="keyword">new</span> <span class="title class_">Girlfriend</span>();</span><br><span class="line">        gf1.name=<span class="string">&quot;神里绫华&quot;</span>;</span><br><span class="line">        gf1.age=<span class="number">21</span>;</span><br><span class="line">        gf1.gender=<span class="string">&quot;神里家的大小姐&quot;</span>;</span><br><span class="line">        System.out.println(gf1.name+<span class="string">&quot; &quot;</span>+gf1.age+<span class="string">&quot; &quot;</span>+gf1.gender);</span><br><span class="line">        gf1.eat();</span><br><span class="line">        gf1.sleep();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Girlfriend</span> &#123;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">    String gender;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sleep</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;女朋友在睡觉&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;女朋友在吃饭&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">神里绫华 21 神里家的大小姐</span><br><span class="line">女朋友在吃饭</span><br><span class="line">女朋友在睡觉</span><br></pre></td></tr></table></figure><p><img src="/../img/%E7%8E%A9%E5%8E%9F%E7%A5%9E.jpg" alt="玩原神"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;java学习（1）&quot;&gt;&lt;a href=&quot;#java学习（1）&quot; class=&quot;headerlink&quot; title=&quot;java学习（1）&quot;&gt;&lt;/a&gt;java学习（1）&lt;/h1&gt;&lt;h3 id=&quot;随机数&quot;&gt;&lt;a href=&quot;#随机数&quot; class=&quot;headerlink</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>浙江省2023网络安全信息竞赛(初赛)Reverse 复现</title>
    <link href="https://straw-233.github.io/2023/11/07/2023%E7%9C%81%E8%B5%9B(%E5%88%9D%E8%B5%9B)Reverse%20%E5%A4%8D%E7%8E%B0/"/>
    <id>https://straw-233.github.io/2023/11/07/2023%E7%9C%81%E8%B5%9B(%E5%88%9D%E8%B5%9B)Reverse%20%E5%A4%8D%E7%8E%B0/</id>
    <published>2023-11-07T10:02:21.192Z</published>
    <updated>2023-11-07T10:20:47.855Z</updated>
    
    <content type="html"><![CDATA[<h1 id="浙江省2023网络安全信息竞赛-初赛-Reverse-复现"><a href="#浙江省2023网络安全信息竞赛-初赛-Reverse-复现" class="headerlink" title="浙江省2023网络安全信息竞赛(初赛)Reverse 复现"></a>浙江省2023网络安全信息竞赛(初赛)Reverse 复现</h1><p>​<em><strong>我是fw，赛场上纯纯坐牢，只会复现</strong></em></p><p><img src="/../img/%E5%B0%8F%E8%8F%B2%E5%93%AD.gif" alt="小菲哭"></p><h2 id="luare"><a href="#luare" class="headerlink" title="luare"></a>luare</h2><p>主函数</p><p><img src="/../img/2023%20Reverse%E7%9C%81%E8%B5%9B/1.1.png" alt="1.1"></p><p>这里是一段lua的字节码，调试到这一步，提取</p><p><img src="/../img/2023%20Reverse%E7%9C%81%E8%B5%9B/1.2.png" alt="1.2"></p><p>学了一手，有个java的unluac.jar反编译脚本，输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar .\unluac.jar lua</span><br></pre></td></tr></table></figure><p><img src="/../img/2023%20Reverse%E7%9C%81%E8%B5%9B/1.3.png" alt="1.3"></p><p>里面的Oo00Oo0在ida里面</p><p><img src="/../img/2023%20Reverse%E7%9C%81%E8%B5%9B/1.4.png" alt="1.4"></p><p>仔细研究一下，是一个查表+异或，关键就在那个ptr的for函数里</p><p>给出脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">pw=[<span class="number">109</span>,-<span class="number">73</span>,-<span class="number">72</span>,<span class="number">46</span>,-<span class="number">73</span>,-<span class="number">5</span>,<span class="number">99</span>,-<span class="number">100</span>,<span class="number">46</span>,<span class="number">59</span>,<span class="number">32</span>,-<span class="number">76</span>,<span class="number">109</span>,<span class="number">3</span>,<span class="number">59</span>,<span class="number">20</span>,-<span class="number">61</span>,-<span class="number">56</span>,</span><br><span class="line">    -<span class="number">119</span>,<span class="number">48</span>,<span class="number">100</span>,<span class="number">118</span>,<span class="number">36</span>,<span class="number">118</span>,<span class="number">82</span>,<span class="number">3</span>,<span class="number">95</span>,<span class="number">106</span>,<span class="number">14</span>,-<span class="number">80</span>,<span class="number">5</span>,-<span class="number">89</span>,<span class="number">89</span>,-<span class="number">85</span>,<span class="number">5</span>,<span class="number">14</span>,<span class="number">46</span>,</span><br><span class="line">   -<span class="number">73</span>,<span class="number">7</span>,<span class="number">127</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(pw)):</span><br><span class="line">    pw[i]=pw[i]&amp;<span class="number">0xff</span></span><br><span class="line">table=[ <span class="number">0x3C</span>, <span class="number">0x95</span>, <span class="number">0xC8</span>, <span class="number">0x28</span>, <span class="number">0x10</span>, <span class="number">0x6D</span>, <span class="number">0x85</span>, <span class="number">0x60</span>, <span class="number">0x59</span>, <span class="number">0x03</span>,<span class="number">0xB3</span>, <span class="number">0x4C</span>, <span class="number">0x76</span>, <span class="number">0x49</span>, <span class="number">0x48</span>, <span class="number">0x96</span>,</span><br><span class="line">        <span class="number">0xB8</span>, <span class="number">0x5F</span>, <span class="number">0xB7</span>, <span class="number">0x79</span>, <span class="number">0xC4</span>, <span class="number">0x64</span>, <span class="number">0x71</span>, <span class="number">0x2E</span>, <span class="number">0x38</span>, <span class="number">0x8C</span>, <span class="number">0xAC</span>,<span class="number">0xA7</span>, <span class="number">0x91</span>, <span class="number">0x72</span>, <span class="number">0x63</span>, <span class="number">0x80</span>,</span><br><span class="line">        <span class="number">0xB0</span>, <span class="number">0x9E</span>, <span class="number">0x33</span>, <span class="number">0x4B</span>, <span class="number">0xAE</span>, <span class="number">0xF3</span>, <span class="number">0x8B</span>, <span class="number">0x7B</span>, <span class="number">0x4D</span>, <span class="number">0x5B</span>, <span class="number">0xB4</span>,<span class="number">0x52</span>, <span class="number">0xEC</span>, <span class="number">0x6F</span>, <span class="number">0xE0</span>, <span class="number">0xCF</span>,</span><br><span class="line">        <span class="number">0xAD</span>, <span class="number">0xC3</span>, <span class="number">0x20</span>, <span class="number">0xAB</span>, <span class="number">0xEA</span>, <span class="number">0x67</span>, <span class="number">0xDC</span>, <span class="number">0x05</span>, <span class="number">0x00</span>, <span class="number">0x9F</span>, <span class="number">0x40</span>,<span class="number">0x56</span>, <span class="number">0xD6</span>, <span class="number">0xFB</span>, <span class="number">0xFC</span>, <span class="number">0x24</span>,</span><br><span class="line">        <span class="number">0x92</span>, <span class="number">0xCA</span>, <span class="number">0x0B</span>, <span class="number">0x3D</span>, <span class="number">0x46</span>, <span class="number">0x0D</span>, <span class="number">0xF0</span>, <span class="number">0x4A</span>, <span class="number">0x5A</span>, <span class="number">0x55</span>, <span class="number">0x11</span>,<span class="number">0x1A</span>, <span class="number">0x3B</span>, <span class="number">0x8A</span>, <span class="number">0xBC</span>, <span class="number">0x7D</span>,</span><br><span class="line">        <span class="number">0x6C</span>, <span class="number">0xE7</span>, <span class="number">0xA9</span>, <span class="number">0x13</span>, <span class="number">0x75</span>, <span class="number">0xCE</span>, <span class="number">0x61</span>, <span class="number">0x30</span>, <span class="number">0x14</span>, <span class="number">0xA6</span>, <span class="number">0x6A</span>,<span class="number">0x27</span>, <span class="number">0x07</span>, <span class="number">0xD0</span>, <span class="number">0x54</span>, <span class="number">0x9C</span>,</span><br><span class="line">        <span class="number">0x5C</span>, <span class="number">0x8E</span>, <span class="number">0x89</span>, <span class="number">0xD8</span>, <span class="number">0x58</span>, <span class="number">0x01</span>, <span class="number">0xC2</span>, <span class="number">0x34</span>, <span class="number">0xE8</span>, <span class="number">0x69</span>, <span class="number">0x35</span>,<span class="number">0x2F</span>, <span class="number">0xC0</span>, <span class="number">0x2A</span>, <span class="number">0xA0</span>, <span class="number">0x50</span>,</span><br><span class="line">        <span class="number">0x36</span>, <span class="number">0x88</span>, <span class="number">0xFF</span>, <span class="number">0x39</span>, <span class="number">0x1D</span>, <span class="number">0x68</span>, <span class="number">0x0E</span>, <span class="number">0x0C</span>, <span class="number">0x93</span>, <span class="number">0xE6</span>, <span class="number">0xB1</span>,<span class="number">0xFE</span>, <span class="number">0x18</span>, <span class="number">0x7F</span>, <span class="number">0x6E</span>, <span class="number">0xB6</span>,</span><br><span class="line">        <span class="number">0x78</span>, <span class="number">0x53</span>, <span class="number">0x31</span>, <span class="number">0x2B</span>, <span class="number">0xE9</span>, <span class="number">0xD2</span>, <span class="number">0xF5</span>, <span class="number">0x29</span>, <span class="number">0x0F</span>, <span class="number">0x2C</span>, <span class="number">0x17</span>,<span class="number">0x84</span>, <span class="number">0xDE</span>, <span class="number">0xDB</span>, <span class="number">0xD9</span>, <span class="number">0x41</span>,</span><br><span class="line">        <span class="number">0x06</span>, <span class="number">0x19</span>, <span class="number">0xF7</span>, <span class="number">0xA1</span>, <span class="number">0x99</span>, <span class="number">0xA8</span>, <span class="number">0x45</span>, <span class="number">0x7A</span>, <span class="number">0x3E</span>, <span class="number">0x23</span>, <span class="number">0xA5</span>,<span class="number">0x1B</span>, <span class="number">0xAF</span>, <span class="number">0x0A</span>, <span class="number">0xAA</span>, <span class="number">0xE5</span>,</span><br><span class="line">        <span class="number">0xEF</span>, <span class="number">0xA4</span>, <span class="number">0xE1</span>, <span class="number">0xF8</span>, <span class="number">0xFA</span>, <span class="number">0x82</span>, <span class="number">0x3A</span>, <span class="number">0x9A</span>, <span class="number">0xDF</span>, <span class="number">0x8F</span>, <span class="number">0x1C</span>,<span class="number">0x65</span>, <span class="number">0xC7</span>, <span class="number">0x73</span>, <span class="number">0xD1</span>, <span class="number">0xC1</span>,</span><br><span class="line">        <span class="number">0xC5</span>, <span class="number">0xD7</span>, <span class="number">0xA2</span>, <span class="number">0x5E</span>, <span class="number">0x87</span>, <span class="number">0xDD</span>, <span class="number">0x9D</span>, <span class="number">0x8D</span>, <span class="number">0xF9</span>, <span class="number">0xC9</span>, <span class="number">0x81</span>,<span class="number">0xCD</span>, <span class="number">0x90</span>, <span class="number">0x97</span>, <span class="number">0xEE</span>, <span class="number">0x66</span>,</span><br><span class="line">        <span class="number">0xDA</span>, <span class="number">0x4F</span>, <span class="number">0x42</span>, <span class="number">0x3F</span>, <span class="number">0xC6</span>, <span class="number">0x74</span>, <span class="number">0x08</span>, <span class="number">0x37</span>, <span class="number">0x25</span>, <span class="number">0xCB</span>, <span class="number">0x77</span>,<span class="number">0x26</span>, <span class="number">0xE3</span>, <span class="number">0x83</span>, <span class="number">0x32</span>, <span class="number">0xB9</span>,</span><br><span class="line">        <span class="number">0xBD</span>, <span class="number">0xD3</span>, <span class="number">0xF2</span>, <span class="number">0x44</span>, <span class="number">0xD5</span>, <span class="number">0x4E</span>, <span class="number">0x2D</span>, <span class="number">0xBA</span>, <span class="number">0x62</span>, <span class="number">0x98</span>, <span class="number">0x04</span>,<span class="number">0x1E</span>, <span class="number">0x12</span>, <span class="number">0x21</span>, <span class="number">0xE4</span>, <span class="number">0xBF</span>,</span><br><span class="line">        <span class="number">0x47</span>, <span class="number">0xF6</span>, <span class="number">0x86</span>, <span class="number">0xF4</span>, <span class="number">0xFD</span>, <span class="number">0x94</span>, <span class="number">0x16</span>, <span class="number">0xA3</span>, <span class="number">0xEB</span>, <span class="number">0x1F</span>, <span class="number">0x70</span>,<span class="number">0x7C</span>, <span class="number">0xB2</span>, <span class="number">0x51</span>, <span class="number">0x02</span>, <span class="number">0x43</span>,</span><br><span class="line">        <span class="number">0x22</span>, <span class="number">0x15</span>, <span class="number">0xCC</span>, <span class="number">0x7E</span>, <span class="number">0x09</span>, <span class="number">0x6B</span>, <span class="number">0xE2</span>, <span class="number">0x5D</span>, <span class="number">0xBB</span>, <span class="number">0x9B</span>, <span class="number">0xBE</span>,<span class="number">0xB5</span>, <span class="number">0xD4</span>, <span class="number">0xED</span>, <span class="number">0x57</span>, <span class="number">0xF1</span>]</span><br><span class="line">s=[<span class="number">0</span>]*<span class="number">40</span></span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">40</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">        <span class="keyword">if</span> table[i]==pw[j]:</span><br><span class="line">            s[j]=i</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="built_in">print</span>(s[j],end=<span class="string">&quot;,&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>()</span><br><span class="line">start=<span class="number">0x44</span>  <span class="comment">#&quot;D&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">40</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">chr</span>(start),end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    start=start^s[i]</span><br><span class="line"><span class="comment">#DASCTF&#123;e:-aSy|u9aPR0gr~AMfo~$RrE^VeR$3!&#125;</span></span><br></pre></td></tr></table></figure><h2 id="AndriodELF"><a href="#AndriodELF" class="headerlink" title="AndriodELF"></a>AndriodELF</h2><p><img src="/../img/2023%20Reverse%E7%9C%81%E8%B5%9B/2.1.png" alt="2.1"></p><p>有个UPX壳，还是魔改壳</p><p><img src="/../img/2023%20Reverse%E7%9C%81%E8%B5%9B/2.2.png" alt="2.2"></p><p>把最后两个upx改UPX才能用脚本出</p><p>主函数</p><p><img src="/../img/2023%20Reverse%E7%9C%81%E8%B5%9B/2.3.png" alt="2.3"></p><p>然后进sub_218FB4函数</p><p><img src="/../img/2023%20Reverse%E7%9C%81%E8%B5%9B/2.4.png" alt="2.4"></p><p>四个加密逐一逆向，给出脚本</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> pw[<span class="number">64</span>] = &#123;</span><br><span class="line"><span class="number">0x3D</span>, <span class="number">0x45</span>, <span class="number">0x38</span>, <span class="number">0x7E</span>, <span class="number">0x78</span>, <span class="number">0x4B</span>, <span class="number">0x6A</span>, <span class="number">0x5C</span>, <span class="number">0x5B</span>, <span class="number">0x52</span>, <span class="number">0x4C</span>, <span class="number">0x73</span>, <span class="number">0x4E</span>, <span class="number">0x39</span>, <span class="number">0x49</span>, <span class="number">0x5F</span>, </span><br><span class="line"><span class="number">0x49</span>, <span class="number">0x40</span>, <span class="number">0x38</span>, <span class="number">0x5E</span>, <span class="number">0x74</span>, <span class="number">0x40</span>, <span class="number">0x66</span>, <span class="number">0x44</span>, <span class="number">0x46</span>, <span class="number">0x7A</span>, <span class="number">0x39</span>, <span class="number">0x3B</span>, <span class="number">0x67</span>, <span class="number">0x39</span>, <span class="number">0x70</span>, <span class="number">0x6C</span>, </span><br><span class="line"><span class="number">0x71</span>, <span class="number">0x5E</span>, <span class="number">0x6D</span>, <span class="number">0x4D</span>, <span class="number">0x5A</span>, <span class="number">0x4C</span>, <span class="number">0x7F</span>, <span class="number">0x3B</span>, <span class="number">0x4D</span>, <span class="number">0x63</span>, <span class="number">0x5E</span>, <span class="number">0x4E</span>, <span class="number">0x44</span>, <span class="number">0x5A</span>, <span class="number">0x7B</span>, <span class="number">0x51</span>, </span><br><span class="line"><span class="number">0x38</span>, <span class="number">0x61</span>, <span class="number">0x29</span>, <span class="number">0x63</span>, <span class="number">0x75</span>, <span class="number">0x5B</span>, <span class="number">0x67</span>, <span class="number">0x46</span>, <span class="number">0x4E</span>, <span class="number">0x5D</span>, <span class="number">0x79</span>, <span class="number">0x29</span>, <span class="number">0x4D</span>, <span class="number">0x29</span>, <span class="number">0x6D</span>, <span class="number">0x71</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> table[<span class="number">16</span>] = &#123;</span><br><span class="line"><span class="number">0x0000000D</span>, <span class="number">0x00000004</span>, <span class="number">0x00000000</span>, <span class="number">0x00000005</span>, <span class="number">0x00000002</span>, <span class="number">0x0000000C</span>, <span class="number">0x0000000B</span>, <span class="number">0x00000008</span>, </span><br><span class="line"><span class="number">0x0000000A</span>, <span class="number">0x00000006</span>, <span class="number">0x00000001</span>, <span class="number">0x00000009</span>, <span class="number">0x00000003</span>, <span class="number">0x0000000F</span>, <span class="number">0x00000007</span>, <span class="number">0x0000000E</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> flag[<span class="number">64</span>];</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> v[<span class="number">64</span>];</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> pw1[<span class="number">16</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> o=<span class="number">0</span>;o&lt;<span class="number">4</span>;o++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;<span class="number">16</span>;j++)</span><br><span class="line">&#123;</span><br><span class="line">pw1[j]=pw[o*<span class="number">16</span>+j];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">15</span>;j&gt;=<span class="number">0</span>;j--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">16</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line">v[i]=pw1[i]^(<span class="number">120</span>*j);<span class="comment">//加密4 异或120*j</span></span><br><span class="line">v[i]=(v[i]&lt;&lt;<span class="number">5</span>)|(v[i]&gt;&gt;<span class="number">3</span>);<span class="comment">//加密3 移位</span></span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">16</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line">flag[i]=v[table[i]];</span><br><span class="line">&#125;<span class="comment">//加密2 换表</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">16</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> v1=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> l=<span class="number">0</span>;l&lt;<span class="number">8</span>;l++)</span><br><span class="line">&#123;</span><br><span class="line">v1|=((flag[i]&gt;&gt;l)&amp;<span class="number">1</span>)&lt;&lt;(<span class="number">7</span>-l);</span><br><span class="line">&#125;</span><br><span class="line">flag[i]=v1;</span><br><span class="line">&#125;<span class="comment">//加密1 循环移位</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> x=<span class="number">0</span>;x&lt;<span class="number">16</span>;x++)</span><br><span class="line">&#123;</span><br><span class="line">pw1[x]=flag[x];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">16</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>,pw1[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//DASCTF&#123;51bWZvM0p1xNHLo3A1ndrVH0|VsED3LFyRwYkEVeRqeFSNE!0!oyUki!&#125;</span></span><br><span class="line"><span class="comment">//flag给这么长我也醉了</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;浙江省2023网络安全信息竞赛-初赛-Reverse-复现&quot;&gt;&lt;a href=&quot;#浙江省2023网络安全信息竞赛-初赛-Reverse-复现&quot; class=&quot;headerlink&quot; title=&quot;浙江省2023网络安全信息竞赛(初赛)Reverse 复现&quot;&gt;&lt;/a</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Tea类型加密</title>
    <link href="https://straw-233.github.io/2023/11/01/tea%E5%8A%A0%E5%AF%86/"/>
    <id>https://straw-233.github.io/2023/11/01/tea%E5%8A%A0%E5%AF%86/</id>
    <published>2023-11-01T13:43:08.336Z</published>
    <updated>2023-11-01T13:51:31.223Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Tea类型加密"><a href="#Tea类型加密" class="headerlink" title="Tea类型加密"></a><strong>Tea类型加密</strong></h1><p>​        很早就想概括tea类型加密了，对于很多刚开始做逆向的新手来说，这个掌握好了解题确实快，不像之前的我找到了key，密文，算法，还是因为小错误，而解不出来。作为最基础，也是最常见的加密，确实需要好好总结一番的喵~!</p><p><img src="/../img/taffychayao.png" alt="taffychayao"></p><h2 id="Tea"><a href="#Tea" class="headerlink" title="Tea"></a>Tea</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">encrypt</span><span class="params">(<span class="type">unsigned</span> <span class="type">int</span>* v, <span class="type">unsigned</span> <span class="type">int</span>* key)</span> &#123;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> l = v[<span class="number">0</span>], r = v[<span class="number">1</span>], sum = <span class="number">0</span>, delta = <span class="number">0x9e3779b9</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++) &#123;</span><br><span class="line">    sum += delta;</span><br><span class="line">    l += ((r &lt;&lt; <span class="number">4</span>) + key[<span class="number">0</span>]) ^ (r + sum) ^ ((r &gt;&gt; <span class="number">5</span>) + key[<span class="number">1</span>]);</span><br><span class="line">    r += ((l &lt;&lt; <span class="number">4</span>) + key[<span class="number">2</span>]) ^ (l + sum) ^ ((l &gt;&gt; <span class="number">5</span>) + key[<span class="number">3</span>]);</span><br><span class="line">  &#125;</span><br><span class="line">  v[<span class="number">0</span>] = l;</span><br><span class="line">  v[<span class="number">1</span>] = r;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="type">void</span> <span class="title function_">decrypt</span><span class="params">(<span class="type">unsigned</span> <span class="type">int</span>* v, <span class="type">unsigned</span> <span class="type">int</span>* key)</span> &#123;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> l = v[<span class="number">0</span>], r = v[<span class="number">1</span>], sum = <span class="number">0</span>, delta = <span class="number">0x9e3779b9</span>;</span><br><span class="line">  sum = delta *<span class="number">32</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++) &#123;</span><br><span class="line">    r -= ((l &lt;&lt; <span class="number">4</span>) + key[<span class="number">2</span>]) ^ (l + sum) ^ ((l &gt;&gt; <span class="number">5</span>) + key[<span class="number">3</span>]);</span><br><span class="line">    l -= ((r &lt;&lt; <span class="number">4</span>) + key[<span class="number">0</span>]) ^ (r + sum) ^ ((r &gt;&gt; <span class="number">5</span>) + key[<span class="number">1</span>]);</span><br><span class="line">    sum -= delta;</span><br><span class="line">  &#125;</span><br><span class="line">  v[<span class="number">0</span>] = l;</span><br><span class="line">  v[<span class="number">1</span>] = r;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其实是一个移位+错位+异或操作结合的算法，逆向解密也是十分容易，将flag以4个unsigned char为一组转为unsigned int加密，注意小端序。</p><p>给出一个我常用的解密脚本</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">int</span> n;<span class="comment">//pw的个数</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> pw[]=&#123;&#125;;<span class="comment">//可改</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> v0;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> v1;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> sum;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> key[<span class="number">4</span>]=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;;<span class="comment">//可改</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n/<span class="number">2</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line">v0=pw[<span class="number">2</span>*i];</span><br><span class="line">v1=pw[<span class="number">2</span>*i+<span class="number">1</span>];</span><br><span class="line">sum=<span class="number">-32</span>*<span class="number">0x61C88647</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">32</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line">v1 -= ((v0 &gt;&gt; <span class="number">5</span>) + key[<span class="number">3</span>] )^ (<span class="number">16</span> * v0 + key[<span class="number">2</span>]) ^ (sum + v0);<span class="comment">//容易魔改</span></span><br><span class="line">v0 -= ((v1 &gt;&gt; <span class="number">5</span>) + key[<span class="number">1</span>]) ^ (<span class="number">16</span> * v1 + key[<span class="number">0</span>]) ^ (sum + v1);</span><br><span class="line">sum += <span class="number">0x61C88647</span>;<span class="comment">//容易魔改</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j&lt;=<span class="number">3</span>; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, (v0 &gt;&gt; (j * <span class="number">8</span>)) &amp; <span class="number">0xFF</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j&lt;=<span class="number">3</span>; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, (v1 &gt;&gt; (j * <span class="number">8</span>)) &amp; <span class="number">0xFF</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>大多数题目都是给出偶数个unsigned int(4个字节)的密文m，每两段为一组，每一段密文对应的都是4个字母的flag。</p><p>这里再给一个python的脚本（我不怎么常用）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> ctypes <span class="keyword">import</span> * </span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encrypt</span>(<span class="params">v,k</span>):<span class="comment">#加密</span></span><br><span class="line">v0=c_uint32(v[<span class="number">0</span>])</span><br><span class="line">v1=c_uint32(v[<span class="number">1</span>])</span><br><span class="line">sum1=c_uint32(<span class="number">0</span>)</span><br><span class="line">delta=<span class="number">0x9e3779b9</span>  </span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>):</span><br><span class="line">sum1.value+=delta</span><br><span class="line">v0.value+=((v1.value&lt;&lt;<span class="number">4</span>)+k[<span class="number">0</span>])^(v1.value+sum1.value)^((v1.value&gt;&gt;<span class="number">5</span>)+k[<span class="number">1</span>])</span><br><span class="line">v1.value+=((v0.value&lt;&lt;<span class="number">4</span>)+k[<span class="number">2</span>])^(v0.value+sum1.value)^((v0.value&gt;&gt;<span class="number">5</span>)+k[<span class="number">3</span>])</span><br><span class="line"><span class="keyword">return</span> v0.value,v1.value</span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decrypt</span>(<span class="params">v,k</span>):<span class="comment">#解密</span></span><br><span class="line">v0=c_uint32(v[<span class="number">0</span>])</span><br><span class="line">v1=c_uint32(v[<span class="number">1</span>])</span><br><span class="line">delta=<span class="number">0x9e3779b9</span> </span><br><span class="line">sum1=c_uint32(delta*<span class="number">40</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">40</span>):</span><br><span class="line">v1.value-=((v0.value&lt;&lt;<span class="number">5</span>)+k[<span class="number">2</span>])^(v0.value+sum1.value)^((v0.value&gt;&gt;<span class="number">5</span>)+k[<span class="number">3</span>])</span><br><span class="line">v0.value-=((v1.value&lt;&lt;<span class="number">5</span>)+k[<span class="number">0</span>])^(v1.value+sum1.value)^((v1.value&gt;&gt;<span class="number">5</span>)+k[<span class="number">1</span>])</span><br><span class="line">sum1.value-=delta</span><br><span class="line"><span class="keyword">return</span> v0.value,v1.value</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    k=[<span class="number">2</span>,<span class="number">0</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"><span class="comment"># res=encrypt(a,k)</span></span><br><span class="line">    flag=<span class="string">b&#x27;&#x27;</span></span><br><span class="line">    res=[<span class="number">0x76B9621A</span>, <span class="number">0xCCE4ADDE</span>, <span class="number">0x25C8BFC8</span>, <span class="number">0x16C2D472</span>, <span class="number">0xF317D53A</span>, <span class="number">0xF2A111A1</span>, <span class="number">0xDF89F0E6</span>, <span class="number">0xDCCDA623</span>, <span class="number">0x21C2F409</span>, <span class="number">0xDBD88D63</span>]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(res)//<span class="number">2</span>):</span><br><span class="line">         d = decrypt(res[<span class="number">2</span>*i:<span class="number">2</span>*(i+<span class="number">1</span>)], k)</span><br><span class="line">         flag += long_to_bytes(d[<span class="number">0</span>])[::-<span class="number">1</span>]+long_to_bytes(d[<span class="number">1</span>])[::-<span class="number">1</span>]</span><br><span class="line">    flag += long_to_bytes(res[-<span class="number">1</span>])[::-<span class="number">1</span>]</span><br><span class="line">    <span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure><h2 id="xTea"><a href="#xTea" class="headerlink" title="xTea"></a>xTea</h2><p>其实跟tea差不多，只是加密方式变了一下</p><p>简单给出加密方式</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">unsigned</span> <span class="type">int</span> n;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> flag[n];</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> key[<span class="number">4</span>];</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> v0,v1;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> delta = <span class="number">0x9E3779B9</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; j=j+<span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line">    v0 = flag[j], v1 = flag[j+<span class="number">1</span>]</span><br><span class="line">    <span class="type">unsigned</span> sum = <span class="number">0</span>; </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++) &#123;</span><br><span class="line">        v0 += (((v1 &lt;&lt; <span class="number">4</span>) ^ (v1 &gt;&gt; <span class="number">5</span>)) + v1) ^ (sum + key[sum &amp; <span class="number">3</span>]);</span><br><span class="line">        sum += delta;</span><br><span class="line">        v1 += (((v0 &lt;&lt; <span class="number">4</span>) ^ (v0 &gt;&gt; <span class="number">5</span>)) + v0) ^ (sum + key[(sum &gt;&gt; <span class="number">11</span>) &amp; <span class="number">3</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">flag[j] = v0; flag[j+<span class="number">1</span>] = v1;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br></pre></td></tr></table></figure><p>下面是解密脚本</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> enc[] = &#123;&#125;;</span><br><span class="line"><span class="type">int</span> n;<span class="comment">//enc的个数</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> key[<span class="number">4</span>] = &#123;&#125;;</span><br><span class="line"><span class="type">int</span> i, j;</span><br><span class="line"><span class="type">long</span> sum = <span class="number">0</span>, delta = <span class="number">0x31415927</span>;<span class="comment">//0x9e3779b9=-0x31415927</span></span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i &lt;n;i+=<span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line">sum = (<span class="number">32</span> * delta);</span><br><span class="line"><span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; <span class="number">32</span>; j++) </span><br><span class="line">&#123;</span><br><span class="line">sum -= delta;</span><br><span class="line">enc[i] -= (((enc[i+<span class="number">1</span>] &gt;&gt; <span class="number">5</span>) ^ (<span class="number">16</span> * enc[i+<span class="number">1</span>])) + enc[i+<span class="number">1</span>]) ^ (key[(sum &amp; <span class="number">3</span>)] + sum);<span class="comment">//容易魔改</span></span><br><span class="line">enc[i+<span class="number">1</span>] -= (((enc[i] &gt;&gt; <span class="number">5</span>) ^ (<span class="number">16</span> * enc[i])) + enc[i]) ^ (key[((sum &gt;&gt; <span class="number">11</span>) &amp; <span class="number">3</span>)] + sum);<span class="comment">//容易魔改</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 打印</span></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt;n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">0</span>; j&lt;=<span class="number">3</span>; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, (enc[i] &gt;&gt; (j * <span class="number">8</span>)) &amp; <span class="number">0xFF</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="xxTea"><a href="#xxTea" class="headerlink" title="xxTea"></a>xxTea</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">xxtea_encrypt</span><span class="params">(<span class="type">unsigned</span> <span class="type">int</span> *v, <span class="type">int</span> n, <span class="type">unsigned</span> <span class="type">int</span> key[<span class="number">4</span>])</span> &#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> y, z, sum;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> delta=<span class="number">0x9e3779b9</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> p, rounds, e;</span><br><span class="line">    rounds = <span class="number">6</span> + <span class="number">52</span> / n;</span><br><span class="line">    sum = <span class="number">0</span>;</span><br><span class="line">    z = v[n - <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        sum += delta;</span><br><span class="line">        e = (sum &gt;&gt; <span class="number">2</span>) &amp; <span class="number">3</span>;</span><br><span class="line">        <span class="keyword">for</span> (p = <span class="number">0</span>; p &lt; n - <span class="number">1</span>; p++) &#123;</span><br><span class="line">            y = v[p + <span class="number">1</span>];</span><br><span class="line">            z = v[p] += (y &gt;&gt; <span class="number">5</span> ^ (z &lt;&lt; <span class="number">2</span>)) + (y &lt;&lt; <span class="number">3</span> ^ (z &gt;&gt; <span class="number">4</span>)) ^ (sum ^ y) + (key[(p &amp; <span class="number">3</span>) ^ e] ^ z);</span><br><span class="line">        &#125;</span><br><span class="line">        y = v[<span class="number">0</span>];</span><br><span class="line">        z = v[n - <span class="number">1</span>] += (y &gt;&gt; <span class="number">5</span> ^ (z &lt;&lt; <span class="number">2</span>)) + (y &lt;&lt; <span class="number">3</span> ^ (z &gt;&gt; <span class="number">4</span>)) ^ (sum ^ y) + (key[(p &amp; <span class="number">3</span>) ^ e] ^ z);</span><br><span class="line">    &#125; <span class="keyword">while</span> (--rounds);</span><br><span class="line">&#125;<span class="comment">//chatgpt跑的</span></span><br></pre></td></tr></table></figure><p>脚本</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> delta 0x9e3779b9</span></span><br><span class="line"> </span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> v[<span class="number">8</span>] = &#123;<span class="number">0x10BD3B47</span>, <span class="number">0x6155E0F9</span>, <span class="number">0x6AF7EBC5</span>, <span class="number">0x8D23435F</span>, <span class="number">0x1A091605</span>, <span class="number">0xD43D40EF</span>, <span class="number">0xB4B16A67</span>, <span class="number">0x6B3578A9</span>&#125;;<span class="comment">//可改</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> key[<span class="number">4</span>] = &#123;<span class="number">0x00001234</span>, <span class="number">0x00002345</span>, <span class="number">0x00004567</span>, <span class="number">0x00006789</span>&#125;;<span class="comment">//可改</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> y,z,p,rounds,e;</span><br><span class="line">    <span class="type">int</span> n = <span class="number">8</span>;<span class="comment">//v的个数</span></span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    rounds = <span class="number">6</span> + <span class="number">52</span>/n;<span class="comment">//容易魔改</span></span><br><span class="line">    y = v[<span class="number">0</span>];</span><br><span class="line">    sum = rounds*delta;</span><br><span class="line">     <span class="keyword">do</span></span><br><span class="line">     &#123;</span><br><span class="line">        e = sum &gt;&gt; <span class="number">2</span> &amp; <span class="number">3</span>;</span><br><span class="line">        <span class="keyword">for</span>(p=n<span class="number">-1</span>;p&gt;<span class="number">0</span>;p--)</span><br><span class="line">        &#123;</span><br><span class="line">            z = v[p<span class="number">-1</span>];</span><br><span class="line">            v[p] -= ((((z&gt;&gt;<span class="number">5</span>)^(y&lt;&lt;<span class="number">2</span>))+((y&gt;&gt;<span class="number">3</span>)^(z&lt;&lt;<span class="number">4</span>))) ^ ((key[(p&amp;<span class="number">3</span>)^e]^z)+(y ^ sum)));<span class="comment">//容易魔改</span></span><br><span class="line">            y = v[p];</span><br><span class="line">        &#125;</span><br><span class="line">        z = v[n<span class="number">-1</span>];</span><br><span class="line">        v[<span class="number">0</span>] -= (((key[(p^e)&amp;<span class="number">3</span>]^z)+(y ^ sum)) ^ (((y&lt;&lt;<span class="number">2</span>)^(z&gt;&gt;<span class="number">5</span>))+((z&lt;&lt;<span class="number">4</span>)^(y&gt;&gt;<span class="number">3</span>))));<span class="comment">//容易魔改</span></span><br><span class="line">        y = v[<span class="number">0</span>];</span><br><span class="line">        sum = sum-delta;</span><br><span class="line">     &#125;<span class="keyword">while</span>(--rounds);</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%c%c%c%c&quot;</span>,*((<span class="type">char</span>*)&amp;v[i]+<span class="number">0</span>),*((<span class="type">char</span>*)&amp;v[i]+<span class="number">1</span>),*((<span class="type">char</span>*)&amp;v[i]+<span class="number">2</span>),*((<span class="type">char</span>*)&amp;v[i]+<span class="number">3</span>));</span><br><span class="line">        <span class="comment">//printf(&quot;%c%c%c%c&quot;,*((char*)&amp;v[i]+3),*((char*)&amp;v[i]+2),*((char*)&amp;v[i]+1),*((char*)&amp;v[i]+0));</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h2><h3 id="2023极客大挑战myslef（tea）"><a href="#2023极客大挑战myslef（tea）" class="headerlink" title="2023极客大挑战myslef（tea）"></a>2023极客大挑战myslef（tea）</h3><p><img src="/../img/myself.png" alt="myself"></p><p>SMC后明显一个tea,甚至密钥都写上去了</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> pw[<span class="number">8</span>]=&#123;<span class="number">0xBDBDF9F0</span>, <span class="number">0xE26194C4</span>, <span class="number">0x80799125</span>, <span class="number">0x1F0FC219</span>, <span class="number">0xEB6A1815</span>, <span class="number">0x84F572C5</span>, <span class="number">0x40CC3A85</span>, <span class="number">0xD2A32ABB</span>&#125;;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> v0;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> v1;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> sum;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> key[<span class="number">4</span>]=&#123;<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line">v0=pw[<span class="number">2</span>*i];</span><br><span class="line">v1=pw[<span class="number">2</span>*i+<span class="number">1</span>];</span><br><span class="line">sum=<span class="number">-32</span>*<span class="number">0x61C88647</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">32</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line">v1 -= ((v0 &gt;&gt; <span class="number">5</span>) + key[<span class="number">3</span>] )^ (<span class="number">16</span> * v0 + key[<span class="number">2</span>]) ^ (sum + v0);<span class="comment">//容易魔改</span></span><br><span class="line">v0 -= ((v1 &gt;&gt; <span class="number">5</span>) + key[<span class="number">1</span>]) ^ (<span class="number">16</span> * v1 + key[<span class="number">0</span>]) ^ (sum + v1);</span><br><span class="line">sum += <span class="number">0x61C88647</span>;<span class="comment">//容易魔改</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j&lt;=<span class="number">3</span>; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, (v0 &gt;&gt; (j * <span class="number">8</span>)) &amp; <span class="number">0xFF</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j&lt;=<span class="number">3</span>; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, (v1 &gt;&gt; (j * <span class="number">8</span>)) &amp; <span class="number">0xFF</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//SYC&#123;H0w_7o_R@te_YOurs31f_iNtRo?&#125;</span></span><br></pre></td></tr></table></figure><p><img src="/../img/baibai.png" alt="baibai"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Tea类型加密&quot;&gt;&lt;a href=&quot;#Tea类型加密&quot; class=&quot;headerlink&quot; title=&quot;Tea类型加密&quot;&gt;&lt;/a&gt;&lt;strong&gt;Tea类型加密&lt;/strong&gt;&lt;/h1&gt;&lt;p&gt;​        很早就想概括tea类型加密了，对于很多刚开始做逆</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://straw-233.github.io/2023/10/29/hello-world/"/>
    <id>https://straw-233.github.io/2023/10/29/hello-world/</id>
    <published>2023-10-29T11:59:56.012Z</published>
    <updated>2023-10-29T11:16:03.137Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
