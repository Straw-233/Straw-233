<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Straw</title>
  
  <subtitle>Straw_blog</subtitle>
  <link href="https://straw-233.github.io/atom.xml" rel="self"/>
  
  <link href="https://straw-233.github.io/"/>
  <updated>2024-03-15T13:13:29.829Z</updated>
  <id>https://straw-233.github.io/</id>
  
  <author>
    <name>Straw</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>OLLVM-控制流平坦化</title>
    <link href="https://straw-233.github.io/2024/03/15/OLLVM%E6%8E%A7%E5%88%B6%E6%B5%81%E5%B9%B3%E5%9D%A6%E5%8C%96/"/>
    <id>https://straw-233.github.io/2024/03/15/OLLVM%E6%8E%A7%E5%88%B6%E6%B5%81%E5%B9%B3%E5%9D%A6%E5%8C%96/</id>
    <published>2024-03-15T13:06:43.121Z</published>
    <updated>2024-03-15T13:13:29.829Z</updated>
    
    <content type="html"><![CDATA[<h1 id="OLLVM-控制流平坦化"><a href="#OLLVM-控制流平坦化" class="headerlink" title="OLLVM-控制流平坦化"></a>OLLVM-控制流平坦化</h1><p>建议结合代码后的注释食用！</p><p><img src="/../img/%E7%82%B8%E6%AF%9B%E8%8A%99.jpg" alt="炸毛芙"></p><h4 id="第一步：保存基本块"><a href="#第一步：保存基本块" class="headerlink" title="第一步：保存基本块"></a>第一步：保存基本块</h4><p><img src="/../img/OLLVM%E6%8E%A7%E5%88%B6%E6%B5%81%E5%B9%B3%E5%9D%A6%E5%8C%96/%E6%8E%A7%E5%88%B6%E6%B5%811.png" alt="控制流1"></p><h4 id="第二步：创建分发块和返回块"><a href="#第二步：创建分发块和返回块" class="headerlink" title="第二步：创建分发块和返回块"></a>第二步：创建分发块和返回块</h4><p><img src="/../img/OLLVM%E6%8E%A7%E5%88%B6%E6%B5%81%E5%B9%B3%E5%9D%A6%E5%8C%96/%E6%8E%A7%E5%88%B6%E6%B5%812.png" alt="控制流2"></p><h4 id="第三步：实现分发块调度"><a href="#第三步：实现分发块调度" class="headerlink" title="第三步：实现分发块调度"></a>第三步：实现分发块调度</h4><p><img src="/../img/OLLVM%E6%8E%A7%E5%88%B6%E6%B5%81%E5%B9%B3%E5%9D%A6%E5%8C%96/%E6%8E%A7%E5%88%B6%E6%B5%813.png" alt="控制流3"></p><h4 id="第四步：实现调度变量的自动调整"><a href="#第四步：实现调度变量的自动调整" class="headerlink" title="第四步：实现调度变量的自动调整"></a>第四步：实现调度变量的自动调整</h4><p><img src="/../img/OLLVM%E6%8E%A7%E5%88%B6%E6%B5%81%E5%B9%B3%E5%9D%A6%E5%8C%96/%E6%8E%A7%E5%88%B6%E6%B5%814.png" alt="控制流4"></p><h4 id="第五步：修复PHI指令和逃逸变量"><a href="#第五步：修复PHI指令和逃逸变量" class="headerlink" title="第五步：修复PHI指令和逃逸变量"></a>第五步：修复PHI指令和逃逸变量</h4><p><img src="/../img/OLLVM%E6%8E%A7%E5%88%B6%E6%B5%81%E5%B9%B3%E5%9D%A6%E5%8C%96/%E6%8E%A7%E5%88%B6%E6%B5%815.png" alt="控制流5"></p><h4 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h4><p>FLattening.cpp</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;llvm/IR/Function.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;llvm/Pass.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;llvm/IR/LegacyPassManager.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;llvm/Transforms/IPO/PassManagerBuilder.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;llvm/Support/raw_ostream.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;llvm/IR/Instructions.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;llvm/Transforms/Utils.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;llvm/Support/CommandLine.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;llvm/Transforms/Utils/Local.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;SplitBasicBlock.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Utils.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ctime&gt;</span></span></span><br><span class="line">using namespace llvm;</span><br><span class="line">using <span class="built_in">std</span>::<span class="built_in">vector</span>;</span><br><span class="line">namespace&#123;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Flattening</span> :</span>public FunctionPass&#123;</span><br><span class="line">        public :</span><br><span class="line">            <span class="type">static</span> <span class="type">char</span> ID;</span><br><span class="line">            </span><br><span class="line">            Flattening():FunctionPass(ID)&#123;</span><br><span class="line">                srand(time(<span class="number">0</span>));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">void</span> <span class="title function_">flatten</span><span class="params">(Function &amp;F)</span>;</span><br><span class="line">            <span class="type">bool</span> <span class="title function_">runOnFunction</span><span class="params">(Function &amp;F)</span>;</span><br><span class="line"></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="type">bool</span> <span class="title function_">Flattening::runOnFunction</span><span class="params">(Function &amp;F)</span>&#123;</span><br><span class="line">    INIT_CONTEXT(F);</span><br><span class="line">    FunctionPass * pass =createSplitBasicBlockPass();</span><br><span class="line">    pass-&gt;runOnFunction(F);</span><br><span class="line">    flatten(F);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Flattening::flatten</span><span class="params">(Function &amp;F)</span>&#123;</span><br><span class="line">    <span class="comment">//第一步,保存除了入口块的基本块</span></span><br><span class="line">    <span class="built_in">vector</span>&lt;BasicBlock*&gt; origBB;<span class="comment">//创建一个容器</span></span><br><span class="line">    <span class="keyword">for</span>(BasicBlock&amp; BB:F)&#123;</span><br><span class="line">        origBB.push_back(&amp;BB);</span><br><span class="line">    &#125;<span class="comment">//保存所有基本快</span></span><br><span class="line">    origBB.erase(origBB.begin());<span class="comment">//移除第一个基本块</span></span><br><span class="line">    BasicBlock &amp;entryBlock=F.getEntryBlock();<span class="comment">//获取入口块</span></span><br><span class="line">    <span class="keyword">if</span>(BranchInst *br=dyn_cast&lt;BranchInst&gt;(entryBlock.getTerminator()))&#123;</span><br><span class="line">        <span class="keyword">if</span>(br-&gt;isConditional())&#123;<span class="comment">//判断是不是条件跳转</span></span><br><span class="line">            origBB.insert(origBB.begin(),entryBlock.splitBasicBlock(br));<span class="comment">//是条件跳转，单独拎出来作为新的基本块</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//第二步，创建分发块和返回块</span></span><br><span class="line">    BasicBlock *dispatchBB=BasicBlock::Create(*CONTEXT,<span class="string">&quot;dispatchBB&quot;</span>,&amp;F,&amp;entryBlock);<span class="comment">//创建分发块</span></span><br><span class="line">    BasicBlock *retBB=BasicBlock::Create(*CONTEXT,<span class="string">&quot;retBB&quot;</span>,&amp;F,&amp;entryBlock);<span class="comment">//创建返回块</span></span><br><span class="line">    entryBlock.moveBefore(dispatchBB);<span class="comment">//移动入口块到最前面</span></span><br><span class="line">    entryBlock.getTerminator()-&gt;eraseFromParent();<span class="comment">//踢掉入口块原来的跳转</span></span><br><span class="line">    BranchInst::Create(dispatchBB,&amp;entryBlock);<span class="comment">//入口块绝对跳转到分发快</span></span><br><span class="line">    BranchInst::Create(dispatchBB,retBB);<span class="comment">//返回块到分发块</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//第三部，实现分发块的调度功能</span></span><br><span class="line">    <span class="type">int</span> randNumcase=rand();<span class="comment">//rand参数</span></span><br><span class="line">    AllocaInst * swVarPtr =new AllocaInst(TYPE_I32,<span class="number">0</span>,<span class="string">&quot;swVar.ptr&quot;</span>,entryBlock.getTerminator());<span class="comment">//入口块创建alloca指令，插入到入口块终结指令前</span></span><br><span class="line">    new StoreInst(CONST_I32(randNumcase),swVarPtr,entryBlock.getTerminator());<span class="comment">//对switch变量进行初始化</span></span><br><span class="line">    LoadInst *swVar=new LoadInst(TYPE_I32,swVarPtr,<span class="string">&quot;swVAR&quot;</span>,dispatchBB);<span class="comment">//添加switch指令</span></span><br><span class="line">    BasicBlock *defaultBB = BasicBlock::Create(*CONTEXT,<span class="string">&quot;defaultBB&quot;</span>,&amp;F,retBB);<span class="comment">//创建一个返回块前的基本块</span></span><br><span class="line">    BranchInst::Create(retBB,defaultBB);  <span class="comment">//基本块肯定要有一条终结指令，所以这里随便添加一条跳转指令</span></span><br><span class="line">    SwitchInst *swInst=SwitchInst::Create(swVar,defaultBB,<span class="number">0</span>,dispatchBB);<span class="comment">//插入到分发块的后面</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//为每个基本块分配随机的case值</span></span><br><span class="line">    <span class="keyword">for</span>(BasicBlock *BB:origBB)&#123;</span><br><span class="line">        BB-&gt;moveBefore(retBB);<span class="comment">//移动到返回块前面</span></span><br><span class="line">        swInst-&gt;addCase(CONST_I32(randNumcase),BB);<span class="comment">//保存随机数</span></span><br><span class="line">        randNumcase=rand();<span class="comment">//重新生成随机数</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//第四步 实现调度变量自动调整</span></span><br><span class="line">    <span class="keyword">for</span>(BasicBlock *BB:origBB)&#123;</span><br><span class="line">        <span class="keyword">if</span>(BB-&gt;getTerminator()-&gt;getNumSuccessors()==<span class="number">0</span>)&#123;<span class="comment">//如果这个基本块的最后一条指令是返回指令(没有后继快)</span></span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(BB-&gt;getTerminator()-&gt;getNumSuccessors()==<span class="number">1</span>)&#123;<span class="comment">//如果这个基本块还有一个后继块(即为绝对跳转) </span></span><br><span class="line">            ConstantInt *numcase = swInst-&gt;findCaseDest(BB-&gt;getTerminator()-&gt;getSuccessor(<span class="number">0</span>));<span class="comment">//找到对应的case值</span></span><br><span class="line">            new StoreInst(numcase,swVarPtr,BB-&gt;getTerminator());<span class="comment">//修改swicth中的参数，修改为对应case</span></span><br><span class="line">            BB-&gt;getTerminator()-&gt;eraseFromParent();<span class="comment">//原先的跳转删除</span></span><br><span class="line">            BranchInst::Create(retBB,BB);<span class="comment">//添加跳转</span></span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(BB-&gt;getTerminator()-&gt;getNumSuccessors()==<span class="number">2</span>)&#123; <span class="comment">//有两个后继块</span></span><br><span class="line">             ConstantInt *numcase1 = swInst-&gt;findCaseDest(BB-&gt;getTerminator()-&gt;getSuccessor(<span class="number">0</span>));</span><br><span class="line">             ConstantInt *numcase2 = swInst-&gt;findCaseDest(BB-&gt;getTerminator()-&gt;getSuccessor(<span class="number">1</span>));<span class="comment">//全找了</span></span><br><span class="line">             BranchInst *br1=cast&lt;BranchInst&gt;(BB-&gt;getTerminator()); <span class="comment">//两个分支也有可能是switch指令，但是在混淆前，使用LLVM IR指令 (使用自带的 LowerSwitch的LLVM Pass)，将switch替换成了branch，所以这里最后一条指令只能是branch</span></span><br><span class="line">             SelectInst *sel=SelectInst::Create(br1-&gt;getCondition(),numcase1,numcase2,<span class="string">&quot;&quot;</span>,BB-&gt;getTerminator());<span class="comment">//三元运算符，找到对应的case</span></span><br><span class="line">             new StoreInst(sel,swVarPtr,BB-&gt;getTerminator());<span class="comment">//保存在switch变量</span></span><br><span class="line">            BB-&gt;getTerminator()-&gt;eraseFromParent(); <span class="comment">//原先的跳转删除</span></span><br><span class="line">             BranchInst::Create(retBB,BB);<span class="comment">//添加</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//第五步 修复 phi指令和逃逸变量</span></span><br><span class="line">    fixStack(F);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">char</span> Flattening::ID=<span class="number">0</span>;</span><br><span class="line"><span class="type">static</span> RegisterPass&lt;Flattening&gt;X(<span class="string">&quot;fla&quot;</span>,<span class="string">&quot;My control flow flattening obfuscation&quot;</span>);</span><br></pre></td></tr></table></figure><p>Utils.cpp</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;Utils.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;llvm/IR/Instructions.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;llvm/Transforms/Utils/Local.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;llvm/Transforms/Utils/ValueMapper.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;llvm/Transforms/Utils/Cloning.h&quot;</span></span></span><br><span class="line">using <span class="built_in">std</span>::<span class="built_in">vector</span>;</span><br><span class="line">using namespace llvm;</span><br><span class="line">LLVMContext *CONTEXT=nullptr;</span><br><span class="line"><span class="comment">//第五步 修复PHI指令和逃逸变量</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">llvm::fixStack</span><span class="params">(Function &amp;F)</span>&#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;PHINode*&gt; origPHI;</span><br><span class="line">    <span class="built_in">vector</span>&lt;Instruction*&gt; origReg;</span><br><span class="line">    BasicBlock &amp;entryBB=F.getEntryBlock();</span><br><span class="line">    <span class="keyword">for</span>(BasicBlock &amp;BB:F)&#123;</span><br><span class="line">        <span class="keyword">for</span> (Instruction &amp;I:BB)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(PHINode *PN=dyn_cast&lt;PHINode&gt;(&amp;I))&#123;</span><br><span class="line">                origPHI.push_back(PN);</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(!(isa&lt;AllocaInst&gt;(&amp;I)&amp;&amp; I.getParent()==&amp;entryBB)&amp;&amp; I.isUsedOutsideOfBlock(&amp;BB))&#123;<span class="comment">//判断是不是逃逸变量(除了通过Alloc，并且定义在入口块的，都要处理)</span></span><br><span class="line">                origReg.push_back(&amp;I);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(PHINode *PN:origPHI)&#123;</span><br><span class="line">        DemotePHIToStack(PN,entryBB.getTerminator());<span class="comment">//修复PHI指令</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(Instruction *I:origReg)&#123;</span><br><span class="line">        DemoteRegToStack(*I,entryBB.getTerminator());<span class="comment">//修复逃逸变量</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Utils.h</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> _UTILS_H_</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _UTILS_H_</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;llvm/IR/Function.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> INIT_CONTEXT(X) CONTEXT = &amp;X.getContext()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> TYPE_I64 Type::getInt64Ty(*CONTEXT)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> TYPE_I32 Type::getInt32Ty(*CONTEXT)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> TYPE_I8 Type::getInt8Ty(*CONTEXT)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> GET_TYPE(X) TYPE::getInt(X) Ty(*CONTEXT)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CONST_I64(V) ConstantInt::get(TYPE_I64, V, false)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CONST_I32(V) ConstantInt::get(TYPE_I32, V, false)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CONST_I8(V) ConstantInt::get(TYPE_I8, V, false)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CONST(T, V) ConstantInt::get(T, V)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> RANDOM(X) (cryptoutils-&gt;get_uint8_t() % 100 &lt; X)</span></span><br><span class="line"><span class="keyword">extern</span> llvm::LLVMContext *CONTEXT;</span><br><span class="line"></span><br><span class="line">namespace llvm&#123;</span><br><span class="line">    <span class="type">void</span> <span class="title function_">fixStack</span><span class="params">(Function &amp;F)</span>;</span><br><span class="line">    BasicBlock* <span class="title function_">createCloneBasicBlock</span><span class="params">(BasicBlock *BB)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;OLLVM-控制流平坦化&quot;&gt;&lt;a href=&quot;#OLLVM-控制流平坦化&quot; class=&quot;headerlink&quot; title=&quot;OLLVM-控制流平坦化&quot;&gt;&lt;/a&gt;OLLVM-控制流平坦化&lt;/h1&gt;&lt;p&gt;建议结合代码后的注释食用！&lt;/p&gt;
&lt;p&gt;&lt;img src=</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>llvm IR常用指令二</title>
    <link href="https://straw-233.github.io/2024/02/29/llvm%20IR%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4%E4%BA%8C/"/>
    <id>https://straw-233.github.io/2024/02/29/llvm%20IR%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4%E4%BA%8C/</id>
    <published>2024-02-29T13:00:58.816Z</published>
    <updated>2024-02-29T13:02:59.516Z</updated>
    
    <content type="html"><![CDATA[<h1 id="llvm-IR常用指令二"><a href="#llvm-IR常用指令二" class="headerlink" title="llvm IR常用指令二"></a>llvm IR常用指令二</h1><h3 id="内存访问和寻址操作"><a href="#内存访问和寻址操作" class="headerlink" title="内存访问和寻址操作"></a>内存访问和寻址操作</h3><h4 id="alloca指令"><a href="#alloca指令" class="headerlink" title="alloca指令"></a>alloca指令</h4><p>&lt; result&gt;&#x3D;alloca &lt; type&gt; [,&lt; ty&gt; &lt; NumElements&gt;] [, align &lt; alignment&gt;];</p><p>分配sizeof(type)*NumElements字节的内存，分配的地址与alignment对齐</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">%ptr = alloca i32                  ;分配4字节的内存并返回i32类型的指针</span><br><span class="line">%ptr = alloca i32,i32 4            ;分配4*4字节的内存并返回i32类型的指针</span><br><span class="line">%ptr = alloca i32,i32 4,align 1024 ;分配4*4字节的内存并返回i32类型的指针，分配地址与1024对齐</span><br><span class="line">%ptr = alloca i32,align 1024       ;分配4字节的内存并返回i32类型的指针，分配地址与1024对齐</span><br></pre></td></tr></table></figure><h4 id="store指令"><a href="#store指令" class="headerlink" title="store指令"></a>store指令</h4><p>store &lt; ty&gt; &lt; value&gt;,&lt; ty&gt;* &lt; pointer&gt;;向特定类型指针指向的内存存储相同类型的数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">%ptr = alloca i32</span><br><span class="line">store i32 3, i32* %ptr</span><br></pre></td></tr></table></figure><h4 id="load指令"><a href="#load指令" class="headerlink" title="load指令"></a>load指令</h4><p>&lt; result&gt; &#x3D; load &lt; ty&gt;, &lt; ty&gt;* &lt; pointer&gt;;从特定类型的指针指向的内存中读取特定类型的数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">%ptr = alloca i32</span><br><span class="line">store i32 3, i32* %ptr</span><br><span class="line">%value = load i32,i32* %ptr</span><br></pre></td></tr></table></figure><h3 id="类型转换指令"><a href="#类型转换指令" class="headerlink" title="类型转换指令"></a>类型转换指令</h3><h4 id="trunc-to指令"><a href="#trunc-to指令" class="headerlink" title="trunc..to指令"></a>trunc..to指令</h4><p>&lt; result&gt; &#x3D; trunc &lt; ty&gt; &lt; value&gt; to &lt; ty2&gt;;将ty类型变量截断为ty2类型的变量</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">%X = trunc i32 257 to i8                      ;i8:1</span><br><span class="line">%Y = trunc i32 123 to i1                      ;i1:true</span><br><span class="line">%Z = trunc i32 122 to i1                      ;i1:false</span><br><span class="line">%W = trunc &lt;2 x i16&gt; &lt;i16 8,i16 7&gt;to&lt;2 x i8&gt;  ;&lt;i8 8,i8 7&gt;</span><br></pre></td></tr></table></figure><h4 id="zext-to指令"><a href="#zext-to指令" class="headerlink" title="zext..to指令"></a>zext..to指令</h4><p>&lt; result&gt; &#x3D; zext &lt; ty&gt; &lt; value&gt; to &lt; ty2&gt;;将ty类型变量拓展为ty2类型的变量，强制转换</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">%X = zext i32 257 to i64                       ;i64:257</span><br><span class="line">%Y = zext i1 true to i32                       ;i32:1</span><br><span class="line">%Z = zext &lt;2 x i16&gt; &lt;i16 8,i16 7&gt; to &lt;2 x i32&gt; ;&lt;i32 8,i32 7&gt;</span><br></pre></td></tr></table></figure><h4 id="sext-to指令"><a href="#sext-to指令" class="headerlink" title="sext..to指令"></a>sext..to指令</h4><p>&lt; result&gt;&#x3D; sext &lt; ty&gt; &lt; value&gt; to &lt; ty2&gt;;将ty类型变量拓展为ty2类型的变量，复制符号位</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">%X = sext i8 -1 to i64                         ;i64:-1</span><br><span class="line">%Y = sext i1 true to i32                       ;i32:-1</span><br><span class="line">%Z = sext &lt;2 x i16&gt; &lt;i16 8,i16 7&gt; to &lt;2 x i32&gt; ;&lt;i32 8,i32 7&gt;</span><br></pre></td></tr></table></figure><h3 id="其他操作"><a href="#其他操作" class="headerlink" title="其他操作"></a>其他操作</h3><h4 id="phi指令"><a href="#phi指令" class="headerlink" title="phi指令"></a>phi指令</h4><p>由静态单赋值引起的SSA问题，引入phi函数解决</p><p><img src="/../img/llvm2.png" alt="llvm2"></p><p>&lt; result&gt; &#x3D; phi &lt; ty&gt; [ &lt; val0&gt;,&lt; label0&gt;], … ;如果前驱快为label0，则result&#x3D;val0…</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Loop:     ; Infinite loop that counts from 0 on up...</span><br><span class="line">%indvar = phi i32[ 0, %LoopHeader ],[ %nextindvar, %Loop ]</span><br><span class="line">%nextindvar = add i32 %indvar,1</span><br><span class="line">br label %Loop   ;phi指令实现for循环</span><br></pre></td></tr></table></figure><h4 id="select指令"><a href="#select指令" class="headerlink" title="select指令"></a>select指令</h4><p>三元运算符</p><p>&lt; result&gt; &#x3D; select i1 &lt; cond&gt;,&lt; ty&gt; &lt; vall&gt;,&lt; ty&gt; &lt; val2&gt;; 如果条件cond成立</p><p>result&#x3D;vall,否则 result&#x3D;val2</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">%X = select i1 true,i8 17,i8 42    ;i8:17</span><br><span class="line">%X = select i1 flase,i8 17,i8 42   ;i8:42</span><br></pre></td></tr></table></figure><h4 id="call指令"><a href="#call指令" class="headerlink" title="call指令"></a>call指令</h4><p>&lt; result&gt; &#x3D; call &lt; ty&gt;|&lt; fnty&gt; &lt; fnptrval&gt;(&lt; function args&gt;); 调用函数,可以传递参数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">%retval = call i32 @test(i32 %argc)                  ;调用test函数，参数为i32类型，返回值为i32类型</span><br><span class="line">call i32 (i8*, ...)* @printf(i8* %msg, i32 12,i8 42) ;调用printf函数，参数可变</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;llvm-IR常用指令二&quot;&gt;&lt;a href=&quot;#llvm-IR常用指令二&quot; class=&quot;headerlink&quot; title=&quot;llvm IR常用指令二&quot;&gt;&lt;/a&gt;llvm IR常用指令二&lt;/h1&gt;&lt;h3 id=&quot;内存访问和寻址操作&quot;&gt;&lt;a href=&quot;#内存访问</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>llvm IR常用指令一</title>
    <link href="https://straw-233.github.io/2024/02/28/llvm%20IR%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4%E4%B8%80/"/>
    <id>https://straw-233.github.io/2024/02/28/llvm%20IR%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4%E4%B8%80/</id>
    <published>2024-02-28T13:26:52.873Z</published>
    <updated>2024-02-29T06:39:56.814Z</updated>
    
    <content type="html"><![CDATA[<h1 id="llvm-IR常用指令一"><a href="#llvm-IR常用指令一" class="headerlink" title="llvm IR常用指令一"></a>llvm IR常用指令一</h1><h3 id="终结指令"><a href="#终结指令" class="headerlink" title="终结指令"></a>终结指令</h3><h4 id="ret指令"><a href="#ret指令" class="headerlink" title="ret指令"></a>ret指令</h4><p>ret &lt; type&gt;  &lt; value&gt;;返回特定类型返回值的return指令</p><p>ret void;无返回值的return指令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Test:</span><br><span class="line">ret i32 5;返回整数5</span><br><span class="line">ret void;返回无符号</span><br><span class="line">ret &#123; i32 , i8 &#125; &#123; i32 4 , i8 2 &#125;;返回结构体</span><br></pre></td></tr></table></figure><h4 id="br指令"><a href="#br指令" class="headerlink" title="br指令"></a>br指令</h4><p>br i1 &lt; cond&gt;,label &lt; iftrue&gt;,label &lt; iffalse&gt;;有条件跳转</p><p>br label &lt; dest&gt;;无条件分支</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Test:</span><br><span class="line">%cond = icmp eq i32 %al,%b</span><br><span class="line">br il %cond,label %IfEqual,label %IfUnequal</span><br><span class="line">IfEqual:</span><br><span class="line">ret i32 1</span><br><span class="line">IfUnequal:</span><br><span class="line">ret i32 0</span><br></pre></td></tr></table></figure><h4 id="icmp指令"><a href="#icmp指令" class="headerlink" title="icmp指令"></a>icmp指令</h4><p>&lt; result&gt; &#x3D; icmp  &lt; cond&gt;  &lt; ty&gt;  &lt; op1&gt;  &lt; op2&gt;;比较两个ty类型的数是否满足条件cond</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Test:</span><br><span class="line">&lt;result&gt; = icmp eq i32 4,5      ;false eq=equal</span><br><span class="line">&lt;result&gt; = icmp ne float* %X %X ;false ne=not equal</span><br><span class="line">&lt;result&gt; = icmp ult i16 4, 5    ;true ult=unsigned less than</span><br><span class="line">&lt;result&gt; = icmp sgt i16 4, 5    ;false sgt=signed greater than</span><br><span class="line">&lt;result&gt; = icmp ule i16 -4, 5   ;false ule=unsigned less or equal</span><br><span class="line">&lt;result&gt; = icmp sge i16 4, 5    ;false sge=signed greater or equal</span><br></pre></td></tr></table></figure><h4 id="fcmp指令"><a href="#fcmp指令" class="headerlink" title="fcmp指令"></a>fcmp指令</h4><p>&lt; result&gt;&#x3D; fcmp &lt; cond&gt;  &lt; ty&gt;  &lt; op1&gt;  &lt; op2&gt;;比较两个浮点数是否满足条件cond</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Test:</span><br><span class="line">&lt;result&gt; = fcmp oeq float 4.0,5.0   ;false oeq=order and equal</span><br><span class="line">&lt;result&gt; = fcmp one float 4.0,5.0   ;true </span><br><span class="line">&lt;result&gt; = fcmp olt float 4.0,5.0   ;true</span><br><span class="line">&lt;result&gt; = fcmp ueq double 1.0,2.0  ;false</span><br></pre></td></tr></table></figure><h4 id="switch指令"><a href="#switch指令" class="headerlink" title="switch指令"></a>switch指令</h4><p>switch &lt; intty&gt; &lt; value&gt;, label &lt; defaultdest&gt; [ &lt; intty&gt;  &lt; val&gt;,label  &lt; dest&gt;…]</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Test:</span><br><span class="line">%Val = zext i1 %value to i32</span><br><span class="line">switch i32 %Val,label %truedest[ i32 0,label %falsedest ];与条件跳转等效</span><br><span class="line">switch i32 0,label %dest[ ];与非条件跳转等效</span><br><span class="line">switch i32 %Val,label %otherwise [ i32 0, label %onzero</span><br><span class="line">                                   i32 1, label %onone</span><br><span class="line">                                   i32 2, label %ontwo];三条跳转</span><br></pre></td></tr></table></figure><h3 id="二元运算"><a href="#二元运算" class="headerlink" title="二元运算"></a>二元运算</h3><h4 id="add指令"><a href="#add指令" class="headerlink" title="add指令"></a>add指令</h4><p>&lt; result&gt; &#x3D; add &lt; ty&gt;  &lt; op1&gt;, &lt; op2&gt;</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;result&gt;=add i32 4,%var;4+%var</span><br></pre></td></tr></table></figure><h4 id="sub指令"><a href="#sub指令" class="headerlink" title="sub指令"></a>sub指令</h4><p>&lt; result&gt; &#x3D; sub &lt; ty&gt;  &lt; op1&gt;, &lt; op2&gt;</p><h4 id="mul指令"><a href="#mul指令" class="headerlink" title="mul指令"></a>mul指令</h4><p>&lt; result&gt; &#x3D; mul &lt; ty&gt;  &lt; op1&gt;, &lt; op2&gt;</p><h4 id="udiv指令"><a href="#udiv指令" class="headerlink" title="udiv指令"></a>udiv指令</h4><p>&lt; result&gt; &#x3D; udiv &lt; ty&gt;  &lt; op1&gt;, &lt; op2&gt;;无符号整除</p><p>&lt; result&gt; &#x3D; udiv exact  &lt; ty&gt;  &lt; op1&gt;, &lt; op2&gt;;如果结果不是整数会报错</p><h4 id="sdiv指令"><a href="#sdiv指令" class="headerlink" title="sdiv指令"></a>sdiv指令</h4><p>&lt; result&gt; &#x3D; sdiv &lt; ty&gt;  &lt; op1&gt;, &lt; op2&gt;;有符号整除</p><p>&lt; result&gt; &#x3D; sdiv exact  &lt; ty&gt;  &lt; op1&gt;, &lt; op2&gt;;如果结果不是整数会报错</p><h4 id="urem指令"><a href="#urem指令" class="headerlink" title="urem指令"></a>urem指令</h4><p>&lt; result&gt; &#x3D; urem &lt; ty&gt;  &lt; op1&gt;, &lt; op2&gt;；无符号取余</p><h4 id="srem指令"><a href="#srem指令" class="headerlink" title="srem指令"></a>srem指令</h4><p>&lt; result&gt; &#x3D; srem &lt; ty&gt;  &lt; op1&gt;, &lt; op2&gt;；有 符号取余</p><h3 id="按位二元运算"><a href="#按位二元运算" class="headerlink" title="按位二元运算"></a>按位二元运算</h3><h4 id="shl指令"><a href="#shl指令" class="headerlink" title="shl指令"></a>shl指令</h4><p>&lt; result&gt; &#x3D; shl &lt; ty&gt;  &lt; op1&gt;, &lt; op2&gt;；整数左移op1&lt;&lt;op2</p><h4 id="lshr指令"><a href="#lshr指令" class="headerlink" title="lshr指令"></a>lshr指令</h4><p>&lt; result&gt; &#x3D; lshr &lt; ty&gt;  &lt; op1&gt;, &lt; op2&gt;；整数逻辑右移，会变为无符号类型</p><h4 id="ashr指令"><a href="#ashr指令" class="headerlink" title="ashr指令"></a>ashr指令</h4><p>&lt; result&gt; &#x3D; ashr &lt; ty&gt;  &lt; op1&gt;, &lt; op2&gt;；整数算数右移</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Difference:</span><br><span class="line">&lt;result&gt;=lshr i8 -2,1  ;result=0x7F</span><br><span class="line">&lt;result&gt;=ashr i8 -2,1  ;result=-1</span><br></pre></td></tr></table></figure><h4 id="and指令"><a href="#and指令" class="headerlink" title="and指令"></a>and指令</h4><p>&lt; result&gt; &#x3D; and &lt; ty&gt;  &lt; op1&gt;, &lt; op2&gt;；整数按位与</p><h4 id="or指令"><a href="#or指令" class="headerlink" title="or指令"></a>or指令</h4><p>&lt; result&gt; &#x3D; or &lt; ty&gt;  &lt; op1&gt;, &lt; op2&gt;；整数按位或</p><h4 id="xor指令"><a href="#xor指令" class="headerlink" title="xor指令"></a>xor指令</h4><p>&lt; result&gt; &#x3D; ashr &lt; ty&gt;  &lt; op1&gt;, &lt; op2&gt;；整数按位异或</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;llvm-IR常用指令一&quot;&gt;&lt;a href=&quot;#llvm-IR常用指令一&quot; class=&quot;headerlink&quot; title=&quot;llvm IR常用指令一&quot;&gt;&lt;/a&gt;llvm IR常用指令一&lt;/h1&gt;&lt;h3 id=&quot;终结指令&quot;&gt;&lt;a href=&quot;#终结指令&quot; cla</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>java学习（2）</title>
    <link href="https://straw-233.github.io/2023/12/19/java%E5%AD%A6%E4%B9%A0%EF%BC%882%EF%BC%89/"/>
    <id>https://straw-233.github.io/2023/12/19/java%E5%AD%A6%E4%B9%A0%EF%BC%882%EF%BC%89/</id>
    <published>2023-12-19T13:19:08.557Z</published>
    <updated>2023-12-19T13:18:39.716Z</updated>
    
    <content type="html"><![CDATA[<h1 id="java学习（2）"><a href="#java学习（2）" class="headerlink" title="java学习（2）"></a>java学习（2）</h1><h5 id="外置类"><a href="#外置类" class="headerlink" title="外置类"></a>外置类</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StudentTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> </span><br><span class="line">    &#123;</span><br><span class="line">    Student s=<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;straw&quot;</span>,<span class="number">20</span>);</span><br><span class="line">    System.out.println(s.getAge());</span><br><span class="line">    System.out.println(s.getName());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(name);</span><br><span class="line">        System.out.println(age);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(String name,<span class="type">int</span> age)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">this</span>.name=name;</span><br><span class="line">        <span class="built_in">this</span>.age=age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">this</span>.name=name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">20</span><br><span class="line">straw</span><br></pre></td></tr></table></figure><h5 id="字符串拼接"><a href="#字符串拼接" class="headerlink" title="字符串拼接"></a>字符串拼接</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span> &#123; </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span>[] arr=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;</span><br><span class="line">        String str=arrToString(arr);</span><br><span class="line">        System.out.println(str);</span><br><span class="line">    &#125;   </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">arrToString</span><span class="params">(<span class="type">int</span>[] arr)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(arr==<span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(arr.length==<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;[]&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        String result= <span class="string">&quot;[&quot;</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length-<span class="number">1</span>; i++) </span><br><span class="line">        &#123;</span><br><span class="line">            result+=arr[i]+<span class="string">&quot;,&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        result=result+arr[arr.length-<span class="number">1</span>]+<span class="string">&quot;]&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[1,2,3]</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;java学习（2）&quot;&gt;&lt;a href=&quot;#java学习（2）&quot; class=&quot;headerlink&quot; title=&quot;java学习（2）&quot;&gt;&lt;/a&gt;java学习（2）&lt;/h1&gt;&lt;h5 id=&quot;外置类&quot;&gt;&lt;a href=&quot;#外置类&quot; class=&quot;headerlink</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>java学习（1）</title>
    <link href="https://straw-233.github.io/2023/12/07/java%E5%AD%A6%E4%B9%A0%EF%BC%881%EF%BC%89/"/>
    <id>https://straw-233.github.io/2023/12/07/java%E5%AD%A6%E4%B9%A0%EF%BC%881%EF%BC%89/</id>
    <published>2023-12-07T12:56:00.738Z</published>
    <updated>2023-12-07T13:07:44.640Z</updated>
    
    <content type="html"><![CDATA[<h1 id="java学习（1）"><a href="#java学习（1）" class="headerlink" title="java学习（1）"></a>java学习（1）</h1><h3 id="随机数"><a href="#随机数" class="headerlink" title="随机数"></a>随机数</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Root1</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] arr=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line">        Random r=<span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt; arr.length ;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> index=r.nextInt(arr.length);</span><br><span class="line">            <span class="type">int</span> temp= arr[i];</span><br><span class="line">            arr[i]=arr[index];</span><br><span class="line">            arr[index]=temp;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;arr.length;i++)</span><br><span class="line">        &#123;</span><br><span class="line">           System.out.print(arr[i]+<span class="string">&quot; &quot;</span>); </span><br><span class="line">        &#125;        </span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1 3 5 2 4//随机</span><br></pre></td></tr></table></figure><h3 id="scanf读入-方法"><a href="#scanf读入-方法" class="headerlink" title="scanf读入+方法"></a>scanf读入+方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Root2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span></span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(getSum1(<span class="number">1</span>, <span class="number">2</span>));</span><br><span class="line">        Scanner sc=<span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">int</span> put=sc.nextInt();</span><br><span class="line">        System.out.println(put);</span><br><span class="line">        sc.close();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">getSum</span><span class="params">(<span class="type">int</span> num1,<span class="type">int</span> num2)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> result=num1+num2;</span><br><span class="line">        System.out.println(result);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">getSum1</span><span class="params">(<span class="type">int</span> num1,<span class="type">int</span> num2)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> result=num1+num2;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">114514</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">3</span><br><span class="line">114514</span><br></pre></td></tr></table></figure><h3 id="类"><a href="#类" class="headerlink" title="类"></a>类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Root3</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Girlfriend gf1=<span class="keyword">new</span> <span class="title class_">Girlfriend</span>();</span><br><span class="line">        gf1.name=<span class="string">&quot;神里绫华&quot;</span>;</span><br><span class="line">        gf1.age=<span class="number">21</span>;</span><br><span class="line">        gf1.gender=<span class="string">&quot;神里家的大小姐&quot;</span>;</span><br><span class="line">        System.out.println(gf1.name+<span class="string">&quot; &quot;</span>+gf1.age+<span class="string">&quot; &quot;</span>+gf1.gender);</span><br><span class="line">        gf1.eat();</span><br><span class="line">        gf1.sleep();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Girlfriend</span> &#123;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">    String gender;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sleep</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;女朋友在睡觉&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;女朋友在吃饭&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">神里绫华 21 神里家的大小姐</span><br><span class="line">女朋友在吃饭</span><br><span class="line">女朋友在睡觉</span><br></pre></td></tr></table></figure><p><img src="/../img/%E7%8E%A9%E5%8E%9F%E7%A5%9E.jpg" alt="玩原神"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;java学习（1）&quot;&gt;&lt;a href=&quot;#java学习（1）&quot; class=&quot;headerlink&quot; title=&quot;java学习（1）&quot;&gt;&lt;/a&gt;java学习（1）&lt;/h1&gt;&lt;h3 id=&quot;随机数&quot;&gt;&lt;a href=&quot;#随机数&quot; class=&quot;headerlink</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>浙江省2023网络安全信息竞赛(初赛)Reverse 复现</title>
    <link href="https://straw-233.github.io/2023/11/07/2023%E7%9C%81%E8%B5%9B(%E5%88%9D%E8%B5%9B)Reverse%20%E5%A4%8D%E7%8E%B0/"/>
    <id>https://straw-233.github.io/2023/11/07/2023%E7%9C%81%E8%B5%9B(%E5%88%9D%E8%B5%9B)Reverse%20%E5%A4%8D%E7%8E%B0/</id>
    <published>2023-11-07T10:02:21.192Z</published>
    <updated>2023-11-07T10:20:47.855Z</updated>
    
    <content type="html"><![CDATA[<h1 id="浙江省2023网络安全信息竞赛-初赛-Reverse-复现"><a href="#浙江省2023网络安全信息竞赛-初赛-Reverse-复现" class="headerlink" title="浙江省2023网络安全信息竞赛(初赛)Reverse 复现"></a>浙江省2023网络安全信息竞赛(初赛)Reverse 复现</h1><p>​<em><strong>我是fw，赛场上纯纯坐牢，只会复现</strong></em></p><p><img src="/../img/%E5%B0%8F%E8%8F%B2%E5%93%AD.gif" alt="小菲哭"></p><h2 id="luare"><a href="#luare" class="headerlink" title="luare"></a>luare</h2><p>主函数</p><p><img src="/../img/2023%20Reverse%E7%9C%81%E8%B5%9B/1.1.png" alt="1.1"></p><p>这里是一段lua的字节码，调试到这一步，提取</p><p><img src="/../img/2023%20Reverse%E7%9C%81%E8%B5%9B/1.2.png" alt="1.2"></p><p>学了一手，有个java的unluac.jar反编译脚本，输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar .\unluac.jar lua</span><br></pre></td></tr></table></figure><p><img src="/../img/2023%20Reverse%E7%9C%81%E8%B5%9B/1.3.png" alt="1.3"></p><p>里面的Oo00Oo0在ida里面</p><p><img src="/../img/2023%20Reverse%E7%9C%81%E8%B5%9B/1.4.png" alt="1.4"></p><p>仔细研究一下，是一个查表+异或，关键就在那个ptr的for函数里</p><p>给出脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">pw=[<span class="number">109</span>,-<span class="number">73</span>,-<span class="number">72</span>,<span class="number">46</span>,-<span class="number">73</span>,-<span class="number">5</span>,<span class="number">99</span>,-<span class="number">100</span>,<span class="number">46</span>,<span class="number">59</span>,<span class="number">32</span>,-<span class="number">76</span>,<span class="number">109</span>,<span class="number">3</span>,<span class="number">59</span>,<span class="number">20</span>,-<span class="number">61</span>,-<span class="number">56</span>,</span><br><span class="line">    -<span class="number">119</span>,<span class="number">48</span>,<span class="number">100</span>,<span class="number">118</span>,<span class="number">36</span>,<span class="number">118</span>,<span class="number">82</span>,<span class="number">3</span>,<span class="number">95</span>,<span class="number">106</span>,<span class="number">14</span>,-<span class="number">80</span>,<span class="number">5</span>,-<span class="number">89</span>,<span class="number">89</span>,-<span class="number">85</span>,<span class="number">5</span>,<span class="number">14</span>,<span class="number">46</span>,</span><br><span class="line">   -<span class="number">73</span>,<span class="number">7</span>,<span class="number">127</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(pw)):</span><br><span class="line">    pw[i]=pw[i]&amp;<span class="number">0xff</span></span><br><span class="line">table=[ <span class="number">0x3C</span>, <span class="number">0x95</span>, <span class="number">0xC8</span>, <span class="number">0x28</span>, <span class="number">0x10</span>, <span class="number">0x6D</span>, <span class="number">0x85</span>, <span class="number">0x60</span>, <span class="number">0x59</span>, <span class="number">0x03</span>,<span class="number">0xB3</span>, <span class="number">0x4C</span>, <span class="number">0x76</span>, <span class="number">0x49</span>, <span class="number">0x48</span>, <span class="number">0x96</span>,</span><br><span class="line">        <span class="number">0xB8</span>, <span class="number">0x5F</span>, <span class="number">0xB7</span>, <span class="number">0x79</span>, <span class="number">0xC4</span>, <span class="number">0x64</span>, <span class="number">0x71</span>, <span class="number">0x2E</span>, <span class="number">0x38</span>, <span class="number">0x8C</span>, <span class="number">0xAC</span>,<span class="number">0xA7</span>, <span class="number">0x91</span>, <span class="number">0x72</span>, <span class="number">0x63</span>, <span class="number">0x80</span>,</span><br><span class="line">        <span class="number">0xB0</span>, <span class="number">0x9E</span>, <span class="number">0x33</span>, <span class="number">0x4B</span>, <span class="number">0xAE</span>, <span class="number">0xF3</span>, <span class="number">0x8B</span>, <span class="number">0x7B</span>, <span class="number">0x4D</span>, <span class="number">0x5B</span>, <span class="number">0xB4</span>,<span class="number">0x52</span>, <span class="number">0xEC</span>, <span class="number">0x6F</span>, <span class="number">0xE0</span>, <span class="number">0xCF</span>,</span><br><span class="line">        <span class="number">0xAD</span>, <span class="number">0xC3</span>, <span class="number">0x20</span>, <span class="number">0xAB</span>, <span class="number">0xEA</span>, <span class="number">0x67</span>, <span class="number">0xDC</span>, <span class="number">0x05</span>, <span class="number">0x00</span>, <span class="number">0x9F</span>, <span class="number">0x40</span>,<span class="number">0x56</span>, <span class="number">0xD6</span>, <span class="number">0xFB</span>, <span class="number">0xFC</span>, <span class="number">0x24</span>,</span><br><span class="line">        <span class="number">0x92</span>, <span class="number">0xCA</span>, <span class="number">0x0B</span>, <span class="number">0x3D</span>, <span class="number">0x46</span>, <span class="number">0x0D</span>, <span class="number">0xF0</span>, <span class="number">0x4A</span>, <span class="number">0x5A</span>, <span class="number">0x55</span>, <span class="number">0x11</span>,<span class="number">0x1A</span>, <span class="number">0x3B</span>, <span class="number">0x8A</span>, <span class="number">0xBC</span>, <span class="number">0x7D</span>,</span><br><span class="line">        <span class="number">0x6C</span>, <span class="number">0xE7</span>, <span class="number">0xA9</span>, <span class="number">0x13</span>, <span class="number">0x75</span>, <span class="number">0xCE</span>, <span class="number">0x61</span>, <span class="number">0x30</span>, <span class="number">0x14</span>, <span class="number">0xA6</span>, <span class="number">0x6A</span>,<span class="number">0x27</span>, <span class="number">0x07</span>, <span class="number">0xD0</span>, <span class="number">0x54</span>, <span class="number">0x9C</span>,</span><br><span class="line">        <span class="number">0x5C</span>, <span class="number">0x8E</span>, <span class="number">0x89</span>, <span class="number">0xD8</span>, <span class="number">0x58</span>, <span class="number">0x01</span>, <span class="number">0xC2</span>, <span class="number">0x34</span>, <span class="number">0xE8</span>, <span class="number">0x69</span>, <span class="number">0x35</span>,<span class="number">0x2F</span>, <span class="number">0xC0</span>, <span class="number">0x2A</span>, <span class="number">0xA0</span>, <span class="number">0x50</span>,</span><br><span class="line">        <span class="number">0x36</span>, <span class="number">0x88</span>, <span class="number">0xFF</span>, <span class="number">0x39</span>, <span class="number">0x1D</span>, <span class="number">0x68</span>, <span class="number">0x0E</span>, <span class="number">0x0C</span>, <span class="number">0x93</span>, <span class="number">0xE6</span>, <span class="number">0xB1</span>,<span class="number">0xFE</span>, <span class="number">0x18</span>, <span class="number">0x7F</span>, <span class="number">0x6E</span>, <span class="number">0xB6</span>,</span><br><span class="line">        <span class="number">0x78</span>, <span class="number">0x53</span>, <span class="number">0x31</span>, <span class="number">0x2B</span>, <span class="number">0xE9</span>, <span class="number">0xD2</span>, <span class="number">0xF5</span>, <span class="number">0x29</span>, <span class="number">0x0F</span>, <span class="number">0x2C</span>, <span class="number">0x17</span>,<span class="number">0x84</span>, <span class="number">0xDE</span>, <span class="number">0xDB</span>, <span class="number">0xD9</span>, <span class="number">0x41</span>,</span><br><span class="line">        <span class="number">0x06</span>, <span class="number">0x19</span>, <span class="number">0xF7</span>, <span class="number">0xA1</span>, <span class="number">0x99</span>, <span class="number">0xA8</span>, <span class="number">0x45</span>, <span class="number">0x7A</span>, <span class="number">0x3E</span>, <span class="number">0x23</span>, <span class="number">0xA5</span>,<span class="number">0x1B</span>, <span class="number">0xAF</span>, <span class="number">0x0A</span>, <span class="number">0xAA</span>, <span class="number">0xE5</span>,</span><br><span class="line">        <span class="number">0xEF</span>, <span class="number">0xA4</span>, <span class="number">0xE1</span>, <span class="number">0xF8</span>, <span class="number">0xFA</span>, <span class="number">0x82</span>, <span class="number">0x3A</span>, <span class="number">0x9A</span>, <span class="number">0xDF</span>, <span class="number">0x8F</span>, <span class="number">0x1C</span>,<span class="number">0x65</span>, <span class="number">0xC7</span>, <span class="number">0x73</span>, <span class="number">0xD1</span>, <span class="number">0xC1</span>,</span><br><span class="line">        <span class="number">0xC5</span>, <span class="number">0xD7</span>, <span class="number">0xA2</span>, <span class="number">0x5E</span>, <span class="number">0x87</span>, <span class="number">0xDD</span>, <span class="number">0x9D</span>, <span class="number">0x8D</span>, <span class="number">0xF9</span>, <span class="number">0xC9</span>, <span class="number">0x81</span>,<span class="number">0xCD</span>, <span class="number">0x90</span>, <span class="number">0x97</span>, <span class="number">0xEE</span>, <span class="number">0x66</span>,</span><br><span class="line">        <span class="number">0xDA</span>, <span class="number">0x4F</span>, <span class="number">0x42</span>, <span class="number">0x3F</span>, <span class="number">0xC6</span>, <span class="number">0x74</span>, <span class="number">0x08</span>, <span class="number">0x37</span>, <span class="number">0x25</span>, <span class="number">0xCB</span>, <span class="number">0x77</span>,<span class="number">0x26</span>, <span class="number">0xE3</span>, <span class="number">0x83</span>, <span class="number">0x32</span>, <span class="number">0xB9</span>,</span><br><span class="line">        <span class="number">0xBD</span>, <span class="number">0xD3</span>, <span class="number">0xF2</span>, <span class="number">0x44</span>, <span class="number">0xD5</span>, <span class="number">0x4E</span>, <span class="number">0x2D</span>, <span class="number">0xBA</span>, <span class="number">0x62</span>, <span class="number">0x98</span>, <span class="number">0x04</span>,<span class="number">0x1E</span>, <span class="number">0x12</span>, <span class="number">0x21</span>, <span class="number">0xE4</span>, <span class="number">0xBF</span>,</span><br><span class="line">        <span class="number">0x47</span>, <span class="number">0xF6</span>, <span class="number">0x86</span>, <span class="number">0xF4</span>, <span class="number">0xFD</span>, <span class="number">0x94</span>, <span class="number">0x16</span>, <span class="number">0xA3</span>, <span class="number">0xEB</span>, <span class="number">0x1F</span>, <span class="number">0x70</span>,<span class="number">0x7C</span>, <span class="number">0xB2</span>, <span class="number">0x51</span>, <span class="number">0x02</span>, <span class="number">0x43</span>,</span><br><span class="line">        <span class="number">0x22</span>, <span class="number">0x15</span>, <span class="number">0xCC</span>, <span class="number">0x7E</span>, <span class="number">0x09</span>, <span class="number">0x6B</span>, <span class="number">0xE2</span>, <span class="number">0x5D</span>, <span class="number">0xBB</span>, <span class="number">0x9B</span>, <span class="number">0xBE</span>,<span class="number">0xB5</span>, <span class="number">0xD4</span>, <span class="number">0xED</span>, <span class="number">0x57</span>, <span class="number">0xF1</span>]</span><br><span class="line">s=[<span class="number">0</span>]*<span class="number">40</span></span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">40</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">        <span class="keyword">if</span> table[i]==pw[j]:</span><br><span class="line">            s[j]=i</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="built_in">print</span>(s[j],end=<span class="string">&quot;,&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>()</span><br><span class="line">start=<span class="number">0x44</span>  <span class="comment">#&quot;D&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">40</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">chr</span>(start),end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    start=start^s[i]</span><br><span class="line"><span class="comment">#DASCTF&#123;e:-aSy|u9aPR0gr~AMfo~$RrE^VeR$3!&#125;</span></span><br></pre></td></tr></table></figure><h2 id="AndriodELF"><a href="#AndriodELF" class="headerlink" title="AndriodELF"></a>AndriodELF</h2><p><img src="/../img/2023%20Reverse%E7%9C%81%E8%B5%9B/2.1.png" alt="2.1"></p><p>有个UPX壳，还是魔改壳</p><p><img src="/../img/2023%20Reverse%E7%9C%81%E8%B5%9B/2.2.png" alt="2.2"></p><p>把最后两个upx改UPX才能用脚本出</p><p>主函数</p><p><img src="/../img/2023%20Reverse%E7%9C%81%E8%B5%9B/2.3.png" alt="2.3"></p><p>然后进sub_218FB4函数</p><p><img src="/../img/2023%20Reverse%E7%9C%81%E8%B5%9B/2.4.png" alt="2.4"></p><p>四个加密逐一逆向，给出脚本</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> pw[<span class="number">64</span>] = &#123;</span><br><span class="line"><span class="number">0x3D</span>, <span class="number">0x45</span>, <span class="number">0x38</span>, <span class="number">0x7E</span>, <span class="number">0x78</span>, <span class="number">0x4B</span>, <span class="number">0x6A</span>, <span class="number">0x5C</span>, <span class="number">0x5B</span>, <span class="number">0x52</span>, <span class="number">0x4C</span>, <span class="number">0x73</span>, <span class="number">0x4E</span>, <span class="number">0x39</span>, <span class="number">0x49</span>, <span class="number">0x5F</span>, </span><br><span class="line"><span class="number">0x49</span>, <span class="number">0x40</span>, <span class="number">0x38</span>, <span class="number">0x5E</span>, <span class="number">0x74</span>, <span class="number">0x40</span>, <span class="number">0x66</span>, <span class="number">0x44</span>, <span class="number">0x46</span>, <span class="number">0x7A</span>, <span class="number">0x39</span>, <span class="number">0x3B</span>, <span class="number">0x67</span>, <span class="number">0x39</span>, <span class="number">0x70</span>, <span class="number">0x6C</span>, </span><br><span class="line"><span class="number">0x71</span>, <span class="number">0x5E</span>, <span class="number">0x6D</span>, <span class="number">0x4D</span>, <span class="number">0x5A</span>, <span class="number">0x4C</span>, <span class="number">0x7F</span>, <span class="number">0x3B</span>, <span class="number">0x4D</span>, <span class="number">0x63</span>, <span class="number">0x5E</span>, <span class="number">0x4E</span>, <span class="number">0x44</span>, <span class="number">0x5A</span>, <span class="number">0x7B</span>, <span class="number">0x51</span>, </span><br><span class="line"><span class="number">0x38</span>, <span class="number">0x61</span>, <span class="number">0x29</span>, <span class="number">0x63</span>, <span class="number">0x75</span>, <span class="number">0x5B</span>, <span class="number">0x67</span>, <span class="number">0x46</span>, <span class="number">0x4E</span>, <span class="number">0x5D</span>, <span class="number">0x79</span>, <span class="number">0x29</span>, <span class="number">0x4D</span>, <span class="number">0x29</span>, <span class="number">0x6D</span>, <span class="number">0x71</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> table[<span class="number">16</span>] = &#123;</span><br><span class="line"><span class="number">0x0000000D</span>, <span class="number">0x00000004</span>, <span class="number">0x00000000</span>, <span class="number">0x00000005</span>, <span class="number">0x00000002</span>, <span class="number">0x0000000C</span>, <span class="number">0x0000000B</span>, <span class="number">0x00000008</span>, </span><br><span class="line"><span class="number">0x0000000A</span>, <span class="number">0x00000006</span>, <span class="number">0x00000001</span>, <span class="number">0x00000009</span>, <span class="number">0x00000003</span>, <span class="number">0x0000000F</span>, <span class="number">0x00000007</span>, <span class="number">0x0000000E</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> flag[<span class="number">64</span>];</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> v[<span class="number">64</span>];</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> pw1[<span class="number">16</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> o=<span class="number">0</span>;o&lt;<span class="number">4</span>;o++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;<span class="number">16</span>;j++)</span><br><span class="line">&#123;</span><br><span class="line">pw1[j]=pw[o*<span class="number">16</span>+j];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">15</span>;j&gt;=<span class="number">0</span>;j--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">16</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line">v[i]=pw1[i]^(<span class="number">120</span>*j);<span class="comment">//加密4 异或120*j</span></span><br><span class="line">v[i]=(v[i]&lt;&lt;<span class="number">5</span>)|(v[i]&gt;&gt;<span class="number">3</span>);<span class="comment">//加密3 移位</span></span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">16</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line">flag[i]=v[table[i]];</span><br><span class="line">&#125;<span class="comment">//加密2 换表</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">16</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> v1=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> l=<span class="number">0</span>;l&lt;<span class="number">8</span>;l++)</span><br><span class="line">&#123;</span><br><span class="line">v1|=((flag[i]&gt;&gt;l)&amp;<span class="number">1</span>)&lt;&lt;(<span class="number">7</span>-l);</span><br><span class="line">&#125;</span><br><span class="line">flag[i]=v1;</span><br><span class="line">&#125;<span class="comment">//加密1 循环移位</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> x=<span class="number">0</span>;x&lt;<span class="number">16</span>;x++)</span><br><span class="line">&#123;</span><br><span class="line">pw1[x]=flag[x];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">16</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>,pw1[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//DASCTF&#123;51bWZvM0p1xNHLo3A1ndrVH0|VsED3LFyRwYkEVeRqeFSNE!0!oyUki!&#125;</span></span><br><span class="line"><span class="comment">//flag给这么长我也醉了</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;浙江省2023网络安全信息竞赛-初赛-Reverse-复现&quot;&gt;&lt;a href=&quot;#浙江省2023网络安全信息竞赛-初赛-Reverse-复现&quot; class=&quot;headerlink&quot; title=&quot;浙江省2023网络安全信息竞赛(初赛)Reverse 复现&quot;&gt;&lt;/a</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Tea类型加密</title>
    <link href="https://straw-233.github.io/2023/11/01/tea%E5%8A%A0%E5%AF%86/"/>
    <id>https://straw-233.github.io/2023/11/01/tea%E5%8A%A0%E5%AF%86/</id>
    <published>2023-11-01T13:43:08.336Z</published>
    <updated>2023-11-01T13:51:31.223Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Tea类型加密"><a href="#Tea类型加密" class="headerlink" title="Tea类型加密"></a><strong>Tea类型加密</strong></h1><p>​        很早就想概括tea类型加密了，对于很多刚开始做逆向的新手来说，这个掌握好了解题确实快，不像之前的我找到了key，密文，算法，还是因为小错误，而解不出来。作为最基础，也是最常见的加密，确实需要好好总结一番的喵~!</p><p><img src="/../img/taffychayao.png" alt="taffychayao"></p><h2 id="Tea"><a href="#Tea" class="headerlink" title="Tea"></a>Tea</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">encrypt</span><span class="params">(<span class="type">unsigned</span> <span class="type">int</span>* v, <span class="type">unsigned</span> <span class="type">int</span>* key)</span> &#123;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> l = v[<span class="number">0</span>], r = v[<span class="number">1</span>], sum = <span class="number">0</span>, delta = <span class="number">0x9e3779b9</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++) &#123;</span><br><span class="line">    sum += delta;</span><br><span class="line">    l += ((r &lt;&lt; <span class="number">4</span>) + key[<span class="number">0</span>]) ^ (r + sum) ^ ((r &gt;&gt; <span class="number">5</span>) + key[<span class="number">1</span>]);</span><br><span class="line">    r += ((l &lt;&lt; <span class="number">4</span>) + key[<span class="number">2</span>]) ^ (l + sum) ^ ((l &gt;&gt; <span class="number">5</span>) + key[<span class="number">3</span>]);</span><br><span class="line">  &#125;</span><br><span class="line">  v[<span class="number">0</span>] = l;</span><br><span class="line">  v[<span class="number">1</span>] = r;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="type">void</span> <span class="title function_">decrypt</span><span class="params">(<span class="type">unsigned</span> <span class="type">int</span>* v, <span class="type">unsigned</span> <span class="type">int</span>* key)</span> &#123;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> l = v[<span class="number">0</span>], r = v[<span class="number">1</span>], sum = <span class="number">0</span>, delta = <span class="number">0x9e3779b9</span>;</span><br><span class="line">  sum = delta *<span class="number">32</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++) &#123;</span><br><span class="line">    r -= ((l &lt;&lt; <span class="number">4</span>) + key[<span class="number">2</span>]) ^ (l + sum) ^ ((l &gt;&gt; <span class="number">5</span>) + key[<span class="number">3</span>]);</span><br><span class="line">    l -= ((r &lt;&lt; <span class="number">4</span>) + key[<span class="number">0</span>]) ^ (r + sum) ^ ((r &gt;&gt; <span class="number">5</span>) + key[<span class="number">1</span>]);</span><br><span class="line">    sum -= delta;</span><br><span class="line">  &#125;</span><br><span class="line">  v[<span class="number">0</span>] = l;</span><br><span class="line">  v[<span class="number">1</span>] = r;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其实是一个移位+错位+异或操作结合的算法，逆向解密也是十分容易，将flag以4个unsigned char为一组转为unsigned int加密，注意小端序。</p><p>给出一个我常用的解密脚本</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">int</span> n;<span class="comment">//pw的个数</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> pw[]=&#123;&#125;;<span class="comment">//可改</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> v0;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> v1;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> sum;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> key[<span class="number">4</span>]=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;;<span class="comment">//可改</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n/<span class="number">2</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line">v0=pw[<span class="number">2</span>*i];</span><br><span class="line">v1=pw[<span class="number">2</span>*i+<span class="number">1</span>];</span><br><span class="line">sum=<span class="number">-32</span>*<span class="number">0x61C88647</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">32</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line">v1 -= ((v0 &gt;&gt; <span class="number">5</span>) + key[<span class="number">3</span>] )^ (<span class="number">16</span> * v0 + key[<span class="number">2</span>]) ^ (sum + v0);<span class="comment">//容易魔改</span></span><br><span class="line">v0 -= ((v1 &gt;&gt; <span class="number">5</span>) + key[<span class="number">1</span>]) ^ (<span class="number">16</span> * v1 + key[<span class="number">0</span>]) ^ (sum + v1);</span><br><span class="line">sum += <span class="number">0x61C88647</span>;<span class="comment">//容易魔改</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j&lt;=<span class="number">3</span>; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, (v0 &gt;&gt; (j * <span class="number">8</span>)) &amp; <span class="number">0xFF</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j&lt;=<span class="number">3</span>; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, (v1 &gt;&gt; (j * <span class="number">8</span>)) &amp; <span class="number">0xFF</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>大多数题目都是给出偶数个unsigned int(4个字节)的密文m，每两段为一组，每一段密文对应的都是4个字母的flag。</p><p>这里再给一个python的脚本（我不怎么常用）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> ctypes <span class="keyword">import</span> * </span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encrypt</span>(<span class="params">v,k</span>):<span class="comment">#加密</span></span><br><span class="line">v0=c_uint32(v[<span class="number">0</span>])</span><br><span class="line">v1=c_uint32(v[<span class="number">1</span>])</span><br><span class="line">sum1=c_uint32(<span class="number">0</span>)</span><br><span class="line">delta=<span class="number">0x9e3779b9</span>  </span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>):</span><br><span class="line">sum1.value+=delta</span><br><span class="line">v0.value+=((v1.value&lt;&lt;<span class="number">4</span>)+k[<span class="number">0</span>])^(v1.value+sum1.value)^((v1.value&gt;&gt;<span class="number">5</span>)+k[<span class="number">1</span>])</span><br><span class="line">v1.value+=((v0.value&lt;&lt;<span class="number">4</span>)+k[<span class="number">2</span>])^(v0.value+sum1.value)^((v0.value&gt;&gt;<span class="number">5</span>)+k[<span class="number">3</span>])</span><br><span class="line"><span class="keyword">return</span> v0.value,v1.value</span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decrypt</span>(<span class="params">v,k</span>):<span class="comment">#解密</span></span><br><span class="line">v0=c_uint32(v[<span class="number">0</span>])</span><br><span class="line">v1=c_uint32(v[<span class="number">1</span>])</span><br><span class="line">delta=<span class="number">0x9e3779b9</span> </span><br><span class="line">sum1=c_uint32(delta*<span class="number">40</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">40</span>):</span><br><span class="line">v1.value-=((v0.value&lt;&lt;<span class="number">5</span>)+k[<span class="number">2</span>])^(v0.value+sum1.value)^((v0.value&gt;&gt;<span class="number">5</span>)+k[<span class="number">3</span>])</span><br><span class="line">v0.value-=((v1.value&lt;&lt;<span class="number">5</span>)+k[<span class="number">0</span>])^(v1.value+sum1.value)^((v1.value&gt;&gt;<span class="number">5</span>)+k[<span class="number">1</span>])</span><br><span class="line">sum1.value-=delta</span><br><span class="line"><span class="keyword">return</span> v0.value,v1.value</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    k=[<span class="number">2</span>,<span class="number">0</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"><span class="comment"># res=encrypt(a,k)</span></span><br><span class="line">    flag=<span class="string">b&#x27;&#x27;</span></span><br><span class="line">    res=[<span class="number">0x76B9621A</span>, <span class="number">0xCCE4ADDE</span>, <span class="number">0x25C8BFC8</span>, <span class="number">0x16C2D472</span>, <span class="number">0xF317D53A</span>, <span class="number">0xF2A111A1</span>, <span class="number">0xDF89F0E6</span>, <span class="number">0xDCCDA623</span>, <span class="number">0x21C2F409</span>, <span class="number">0xDBD88D63</span>]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(res)//<span class="number">2</span>):</span><br><span class="line">         d = decrypt(res[<span class="number">2</span>*i:<span class="number">2</span>*(i+<span class="number">1</span>)], k)</span><br><span class="line">         flag += long_to_bytes(d[<span class="number">0</span>])[::-<span class="number">1</span>]+long_to_bytes(d[<span class="number">1</span>])[::-<span class="number">1</span>]</span><br><span class="line">    flag += long_to_bytes(res[-<span class="number">1</span>])[::-<span class="number">1</span>]</span><br><span class="line">    <span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure><h2 id="xTea"><a href="#xTea" class="headerlink" title="xTea"></a>xTea</h2><p>其实跟tea差不多，只是加密方式变了一下</p><p>简单给出加密方式</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">unsigned</span> <span class="type">int</span> n;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> flag[n];</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> key[<span class="number">4</span>];</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> v0,v1;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> delta = <span class="number">0x9E3779B9</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; j=j+<span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line">    v0 = flag[j], v1 = flag[j+<span class="number">1</span>]</span><br><span class="line">    <span class="type">unsigned</span> sum = <span class="number">0</span>; </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++) &#123;</span><br><span class="line">        v0 += (((v1 &lt;&lt; <span class="number">4</span>) ^ (v1 &gt;&gt; <span class="number">5</span>)) + v1) ^ (sum + key[sum &amp; <span class="number">3</span>]);</span><br><span class="line">        sum += delta;</span><br><span class="line">        v1 += (((v0 &lt;&lt; <span class="number">4</span>) ^ (v0 &gt;&gt; <span class="number">5</span>)) + v0) ^ (sum + key[(sum &gt;&gt; <span class="number">11</span>) &amp; <span class="number">3</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">flag[j] = v0; flag[j+<span class="number">1</span>] = v1;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br></pre></td></tr></table></figure><p>下面是解密脚本</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> enc[] = &#123;&#125;;</span><br><span class="line"><span class="type">int</span> n;<span class="comment">//enc的个数</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> key[<span class="number">4</span>] = &#123;&#125;;</span><br><span class="line"><span class="type">int</span> i, j;</span><br><span class="line"><span class="type">long</span> sum = <span class="number">0</span>, delta = <span class="number">0x31415927</span>;<span class="comment">//0x9e3779b9=-0x31415927</span></span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i &lt;n;i+=<span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line">sum = (<span class="number">32</span> * delta);</span><br><span class="line"><span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; <span class="number">32</span>; j++) </span><br><span class="line">&#123;</span><br><span class="line">sum -= delta;</span><br><span class="line">enc[i] -= (((enc[i+<span class="number">1</span>] &gt;&gt; <span class="number">5</span>) ^ (<span class="number">16</span> * enc[i+<span class="number">1</span>])) + enc[i+<span class="number">1</span>]) ^ (key[(sum &amp; <span class="number">3</span>)] + sum);<span class="comment">//容易魔改</span></span><br><span class="line">enc[i+<span class="number">1</span>] -= (((enc[i] &gt;&gt; <span class="number">5</span>) ^ (<span class="number">16</span> * enc[i])) + enc[i]) ^ (key[((sum &gt;&gt; <span class="number">11</span>) &amp; <span class="number">3</span>)] + sum);<span class="comment">//容易魔改</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 打印</span></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt;n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">0</span>; j&lt;=<span class="number">3</span>; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, (enc[i] &gt;&gt; (j * <span class="number">8</span>)) &amp; <span class="number">0xFF</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="xxTea"><a href="#xxTea" class="headerlink" title="xxTea"></a>xxTea</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">xxtea_encrypt</span><span class="params">(<span class="type">unsigned</span> <span class="type">int</span> *v, <span class="type">int</span> n, <span class="type">unsigned</span> <span class="type">int</span> key[<span class="number">4</span>])</span> &#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> y, z, sum;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> delta=<span class="number">0x9e3779b9</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> p, rounds, e;</span><br><span class="line">    rounds = <span class="number">6</span> + <span class="number">52</span> / n;</span><br><span class="line">    sum = <span class="number">0</span>;</span><br><span class="line">    z = v[n - <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        sum += delta;</span><br><span class="line">        e = (sum &gt;&gt; <span class="number">2</span>) &amp; <span class="number">3</span>;</span><br><span class="line">        <span class="keyword">for</span> (p = <span class="number">0</span>; p &lt; n - <span class="number">1</span>; p++) &#123;</span><br><span class="line">            y = v[p + <span class="number">1</span>];</span><br><span class="line">            z = v[p] += (y &gt;&gt; <span class="number">5</span> ^ (z &lt;&lt; <span class="number">2</span>)) + (y &lt;&lt; <span class="number">3</span> ^ (z &gt;&gt; <span class="number">4</span>)) ^ (sum ^ y) + (key[(p &amp; <span class="number">3</span>) ^ e] ^ z);</span><br><span class="line">        &#125;</span><br><span class="line">        y = v[<span class="number">0</span>];</span><br><span class="line">        z = v[n - <span class="number">1</span>] += (y &gt;&gt; <span class="number">5</span> ^ (z &lt;&lt; <span class="number">2</span>)) + (y &lt;&lt; <span class="number">3</span> ^ (z &gt;&gt; <span class="number">4</span>)) ^ (sum ^ y) + (key[(p &amp; <span class="number">3</span>) ^ e] ^ z);</span><br><span class="line">    &#125; <span class="keyword">while</span> (--rounds);</span><br><span class="line">&#125;<span class="comment">//chatgpt跑的</span></span><br></pre></td></tr></table></figure><p>脚本</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> delta 0x9e3779b9</span></span><br><span class="line"> </span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> v[<span class="number">8</span>] = &#123;<span class="number">0x10BD3B47</span>, <span class="number">0x6155E0F9</span>, <span class="number">0x6AF7EBC5</span>, <span class="number">0x8D23435F</span>, <span class="number">0x1A091605</span>, <span class="number">0xD43D40EF</span>, <span class="number">0xB4B16A67</span>, <span class="number">0x6B3578A9</span>&#125;;<span class="comment">//可改</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> key[<span class="number">4</span>] = &#123;<span class="number">0x00001234</span>, <span class="number">0x00002345</span>, <span class="number">0x00004567</span>, <span class="number">0x00006789</span>&#125;;<span class="comment">//可改</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> y,z,p,rounds,e;</span><br><span class="line">    <span class="type">int</span> n = <span class="number">8</span>;<span class="comment">//v的个数</span></span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    rounds = <span class="number">6</span> + <span class="number">52</span>/n;<span class="comment">//容易魔改</span></span><br><span class="line">    y = v[<span class="number">0</span>];</span><br><span class="line">    sum = rounds*delta;</span><br><span class="line">     <span class="keyword">do</span></span><br><span class="line">     &#123;</span><br><span class="line">        e = sum &gt;&gt; <span class="number">2</span> &amp; <span class="number">3</span>;</span><br><span class="line">        <span class="keyword">for</span>(p=n<span class="number">-1</span>;p&gt;<span class="number">0</span>;p--)</span><br><span class="line">        &#123;</span><br><span class="line">            z = v[p<span class="number">-1</span>];</span><br><span class="line">            v[p] -= ((((z&gt;&gt;<span class="number">5</span>)^(y&lt;&lt;<span class="number">2</span>))+((y&gt;&gt;<span class="number">3</span>)^(z&lt;&lt;<span class="number">4</span>))) ^ ((key[(p&amp;<span class="number">3</span>)^e]^z)+(y ^ sum)));<span class="comment">//容易魔改</span></span><br><span class="line">            y = v[p];</span><br><span class="line">        &#125;</span><br><span class="line">        z = v[n<span class="number">-1</span>];</span><br><span class="line">        v[<span class="number">0</span>] -= (((key[(p^e)&amp;<span class="number">3</span>]^z)+(y ^ sum)) ^ (((y&lt;&lt;<span class="number">2</span>)^(z&gt;&gt;<span class="number">5</span>))+((z&lt;&lt;<span class="number">4</span>)^(y&gt;&gt;<span class="number">3</span>))));<span class="comment">//容易魔改</span></span><br><span class="line">        y = v[<span class="number">0</span>];</span><br><span class="line">        sum = sum-delta;</span><br><span class="line">     &#125;<span class="keyword">while</span>(--rounds);</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%c%c%c%c&quot;</span>,*((<span class="type">char</span>*)&amp;v[i]+<span class="number">0</span>),*((<span class="type">char</span>*)&amp;v[i]+<span class="number">1</span>),*((<span class="type">char</span>*)&amp;v[i]+<span class="number">2</span>),*((<span class="type">char</span>*)&amp;v[i]+<span class="number">3</span>));</span><br><span class="line">        <span class="comment">//printf(&quot;%c%c%c%c&quot;,*((char*)&amp;v[i]+3),*((char*)&amp;v[i]+2),*((char*)&amp;v[i]+1),*((char*)&amp;v[i]+0));</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h2><h3 id="2023极客大挑战myslef（tea）"><a href="#2023极客大挑战myslef（tea）" class="headerlink" title="2023极客大挑战myslef（tea）"></a>2023极客大挑战myslef（tea）</h3><p><img src="/../img/myself.png" alt="myself"></p><p>SMC后明显一个tea,甚至密钥都写上去了</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> pw[<span class="number">8</span>]=&#123;<span class="number">0xBDBDF9F0</span>, <span class="number">0xE26194C4</span>, <span class="number">0x80799125</span>, <span class="number">0x1F0FC219</span>, <span class="number">0xEB6A1815</span>, <span class="number">0x84F572C5</span>, <span class="number">0x40CC3A85</span>, <span class="number">0xD2A32ABB</span>&#125;;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> v0;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> v1;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> sum;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> key[<span class="number">4</span>]=&#123;<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line">v0=pw[<span class="number">2</span>*i];</span><br><span class="line">v1=pw[<span class="number">2</span>*i+<span class="number">1</span>];</span><br><span class="line">sum=<span class="number">-32</span>*<span class="number">0x61C88647</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">32</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line">v1 -= ((v0 &gt;&gt; <span class="number">5</span>) + key[<span class="number">3</span>] )^ (<span class="number">16</span> * v0 + key[<span class="number">2</span>]) ^ (sum + v0);<span class="comment">//容易魔改</span></span><br><span class="line">v0 -= ((v1 &gt;&gt; <span class="number">5</span>) + key[<span class="number">1</span>]) ^ (<span class="number">16</span> * v1 + key[<span class="number">0</span>]) ^ (sum + v1);</span><br><span class="line">sum += <span class="number">0x61C88647</span>;<span class="comment">//容易魔改</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j&lt;=<span class="number">3</span>; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, (v0 &gt;&gt; (j * <span class="number">8</span>)) &amp; <span class="number">0xFF</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j&lt;=<span class="number">3</span>; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, (v1 &gt;&gt; (j * <span class="number">8</span>)) &amp; <span class="number">0xFF</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//SYC&#123;H0w_7o_R@te_YOurs31f_iNtRo?&#125;</span></span><br></pre></td></tr></table></figure><p><img src="/../img/baibai.png" alt="baibai"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Tea类型加密&quot;&gt;&lt;a href=&quot;#Tea类型加密&quot; class=&quot;headerlink&quot; title=&quot;Tea类型加密&quot;&gt;&lt;/a&gt;&lt;strong&gt;Tea类型加密&lt;/strong&gt;&lt;/h1&gt;&lt;p&gt;​        很早就想概括tea类型加密了，对于很多刚开始做逆</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://straw-233.github.io/2023/10/29/hello-world/"/>
    <id>https://straw-233.github.io/2023/10/29/hello-world/</id>
    <published>2023-10-29T11:59:56.012Z</published>
    <updated>2023-10-29T11:16:03.137Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
